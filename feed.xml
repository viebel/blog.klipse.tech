<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-10-02T22:29:50+00:00</updated><id>/feed.xml</id><title type="html">Yehonathan Sharvit</title><subtitle>Developer. Author. Speaker.</subtitle><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><entry><title type="html">Polymorphism without objects via multimethods</title><link href="/javascript/2021/10/02/multimethod.html" rel="alternate" type="text/html" title="Polymorphism without objects via multimethods" /><published>2021-10-02T20:12:21+00:00</published><updated>2021-10-02T20:12:21+00:00</updated><id>/javascript/2021/10/02/multimethod</id><content type="html" xml:base="/javascript/2021/10/02/multimethod.html">&lt;p&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt; is well known for allowing different classes to be called with the same interface, via a mechanism called &lt;strong&gt;polymorphism&lt;/strong&gt;. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have &lt;strong&gt;polymorphism without objects&lt;/strong&gt; via &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, multimethods provide more advanced polymorphism than OOP polymorphism as they support cases where the chosen implementation depends on several argument types (multiple dispatch) and even on the dynamic value of the arguments (dynamic dispatch).&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mimicking objects with multimethods (Single dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend on several argument types (Multiple dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend dynamically on several arguments (Dynamic dispatch)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-essence-of-polymorphism&quot;&gt;The essence of polymorphism&lt;/h1&gt;

&lt;p&gt;In OOP, &lt;strong&gt;polymorphism&lt;/strong&gt; is about defining an &lt;strong&gt;interface&lt;/strong&gt; and having &lt;strong&gt;different classes&lt;/strong&gt; that implement the same interface in different ways.&lt;/p&gt;

&lt;p&gt;Let’s illustrate polymorphism with an adaptation of the classic OOP polymorphism example: animal greetings. Let’s say that our animals are &lt;strong&gt;anthropomorphic&lt;/strong&gt; and each of them has its own way to greet, by emitting its preferred sound and telling its name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anthropomorphism&lt;/em&gt; is our first word that comes from the Greek: it comes from the Greek &lt;em&gt;ánthrōpos&lt;/em&gt; that means &lt;em&gt;human&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it’s our second word that comes from the Greek. The first one was &lt;em&gt;polymorphism&lt;/em&gt; coming from the Greek &lt;em&gt;polús&lt;/em&gt; that means &lt;em&gt;many&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;. Polymorphism is the ability of different objects to implement in different ways the same method.&lt;/p&gt;

&lt;p&gt;In Java, for instance, we’d define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAnimal&lt;/code&gt; interface with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; method and each animal class would implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; in its own way, like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Woof woof! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Meow! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cow&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Moo! Call me &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s ask ourselves: what is the &lt;strong&gt;fundamental&lt;/strong&gt; difference between OOP polymorphism and a &lt;strong&gt;naive switch statement&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Let me tell you what I mean by a naive switch statement. We could, as &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; recommends, represent an animal with a &lt;strong&gt;map&lt;/strong&gt; having two &lt;strong&gt;fields&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and call a different piece of code depending on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
break;
case &quot;cat&quot;:
console.log(&quot;Meow! I am: &quot; + animal.name);
break;
case &quot;cow&quot;:
console.log(&quot;Moo! Call me &quot; + animal.name);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes me think that we have not yet met our animals. For no further due, here are our heroes: Fido, Milo and Clarabelle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myDog = {
&quot;type&quot;: &quot;dog&quot;,
&quot;name&quot;: &quot;Fido&quot;
};
var myCat = {
&quot;type&quot;: &quot;cat&quot;,
&quot;name&quot;: &quot;Milo&quot;
};
var myCow = {
&quot;type&quot;: &quot;cow&quot;,
&quot;name&quot;: &quot;Clarabelle&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first difference between &lt;strong&gt;OOP polymorphism&lt;/strong&gt; and our &lt;strong&gt;switch statement&lt;/strong&gt; is that, if we pass an invalid map to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; function, bad things will happen.&lt;/p&gt;

&lt;p&gt;We could easily fix that by validating input data using &lt;a href=&quot;/javascript/2021/09/30/data-validation-with-json-schema.html&quot;&gt;JSON Schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another drawback of the switch statement approach is that when you want to &lt;strong&gt;modify&lt;/strong&gt; the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; for a specific animal, you have to change the code that deals with all the animals, While in the OOP approach, we have to change only a specific animal class.&lt;/p&gt;

&lt;p&gt;This could also be easily fixed by having a &lt;strong&gt;separate function&lt;/strong&gt; for each animal, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am: &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
greetDog(animal);
break;
case &quot;cat&quot;:
greetCat(animal);
break;
case &quot;cow&quot;:
greetCow(animal);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you want to &lt;strong&gt;extend&lt;/strong&gt; the functionality of greet and add a new animal?&lt;/p&gt;

&lt;p&gt;Now, we got to the &lt;strong&gt;essence&lt;/strong&gt; of polymorphism! With a switch statement, we cannot add a new animal without modifying the original code, while in OOP we can add a new class without having to modify the original code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main benefit of polymorphism is that it makes the code easily extensible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I have a surprise for you: We don’t need objects to make our code easily extensible. This is what we call: &lt;strong&gt;polymorphism without objects&lt;/strong&gt;. And it is possible with &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;multimethods-with-single-dispatch&quot;&gt;Multimethods with single dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethod&lt;/strong&gt; is a software construct that provides &lt;strong&gt;polymorphism&lt;/strong&gt; without the need for objects.&lt;/p&gt;

&lt;p&gt;Multimethods are made of two pieces:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a &lt;strong&gt;dispatched value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A set of &lt;strong&gt;methods&lt;/strong&gt; that provide an &lt;strong&gt;implementation&lt;/strong&gt; for each dispatched value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dispatch function is similar to an interface in the sense that it defines the way the function needs to be called. But it goes beyond that as it also dispatches a value that differentiates between the different implementations.&lt;/p&gt;

&lt;p&gt;Let me show illustrate how I would implement the animal greeting capabilities using a multimethod called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. We need a dispatch function and 3 methods. Let’s call the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it dispatches the animal type, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And each dispatch value is handled by a specific method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram, there is an arrow between animal and the methods in addition to the arrow between animal and the dispatch function because the arguments of a multimethod are passed to the dispatch function and to the methods.&lt;/p&gt;

&lt;p&gt;For now, our multimethod receives a single argument. But in the next section, it will receive several arguments.&lt;/p&gt;

&lt;p&gt;Let’s see how a multimethod looks like in terms of code.&lt;/p&gt;

&lt;p&gt;We start with the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it defines the signature of the multimethod and emits the type of the animal as the dispatched value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDispatch(animal) {
return animal.type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need a method for each dispatch value. In our case, we’ll have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt; for dogs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt; for cats and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt; for cows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the context of multimethods, a method is a function that provides an implementation for a dispatch value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the one hand we have the greet dispatch function and on the other hand we have the different greet implementations. How do you &lt;strong&gt;wire&lt;/strong&gt; everything together?&lt;/p&gt;

&lt;p&gt;For that, we need a library. For instance, in JavaScript using a library named &lt;a href=&quot;https://github.com/caderek/arrows/tree/master/packages/multimethod&quot;&gt;arrows/multimethod&lt;/a&gt;, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi&lt;/code&gt; to create a multimethod and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; to create a method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greet = multi(
greetDispatch,
method(&quot;dog&quot;, greetDog),
method(&quot;cat&quot;, greetCat),
method(&quot;cow&quot;, greetCow)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names of the dispatch function and the methods are not really important. But I like to follow a simple &lt;strong&gt;naming convention&lt;/strong&gt;: use the name of the multimethod as a &lt;strong&gt;prefix&lt;/strong&gt; for the dispatch function and the methods and have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch&lt;/code&gt; &lt;strong&gt;suffix&lt;/strong&gt; for the dispatch function and a specific &lt;strong&gt;suffix&lt;/strong&gt; for each method.&lt;/p&gt;

&lt;p&gt;Under the hood, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrows/multimethod&lt;/code&gt; library maintains a &lt;strong&gt;hash map&lt;/strong&gt;, where the keys are the values emitted by the dispatch function and the values are the methods. When you call method, the library adds an entry to the hash map and when you call the multimethod it queries the hash map to find the implementation that corresponds to the dispatch value.&lt;/p&gt;

&lt;p&gt;In terms of usage, we call a multimethod as a regular function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myCow);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-multiple-dispatch&quot;&gt;Multimethods with multiple dispatch&lt;/h1&gt;

&lt;p&gt;So far, we have mimicked OOP by having as a dispatch value the type of the multimethod argument. But if you think again about the flow of a multimethod, you will discover something interesting: in fact the dispatch function could emit any value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod.png&quot; alt=&quot;multi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, we could emit the type of two arguments!&lt;/p&gt;

&lt;p&gt;Imagine that our animals are &lt;strong&gt;polyglot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Polyglot&lt;/em&gt; comes from the Greek &lt;em&gt;polús&lt;/em&gt; meaning &lt;em&gt;much&lt;/em&gt; and &lt;em&gt;glôssa&lt;/em&gt; meaning &lt;em&gt;language&lt;/em&gt;. A polyglot is a person speaking many languages.&lt;/p&gt;

&lt;p&gt;Let’s say our animals speak English and French.&lt;/p&gt;

&lt;p&gt;We represent a language like we represent an animal, with a map having two fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var french = {
&quot;type&quot;: &quot;fr&quot;,
&quot;name&quot;: &quot;Français&quot;
};
var english = {
&quot;type&quot;: &quot;en&quot;,
&quot;name&quot;: &quot;English&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s write the code for the &lt;strong&gt;dispatch function&lt;/strong&gt; and the &lt;strong&gt;methods&lt;/strong&gt; for our polyglot animals. Let’s call our multimethod: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetLang&lt;/code&gt;. We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one dispatch function&lt;/li&gt;
  &lt;li&gt;6 methods: 3 animals (dog, cat, cow) times 2 languages (en, fr).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before the implementation I’d like to draw a flow diagram. It will help me to make things crystal clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal-polyglot.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I omitted the arrow between the arguments and the methods in order to keep the diagram readable. Otherwise there would be too many arrows.&lt;/p&gt;

&lt;p&gt;The dispatch function is going to return an array with two elements: the type of the animal and the type of the language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDispatch(animal, language) {
return [animal.type, language.type];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The order of the elements in the array It doesn’t matter but it needs to be consistent with the wiring of the methods.&lt;/p&gt;

&lt;p&gt;Now, let’s implement the 6 methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogEn(animal, language) {
console.log(&quot;Woof woof! My name is &quot; + animal.name + &quot; and I speak &quot; +
language.name);
}
function greetLangDogFr(animal, language) {
console.log(&quot;Ouaf Ouaf! Mon nom est &quot; + animal.name + &quot; et je parle &quot; +
language.name);
}
function greetLangCatEn(animal, language) {
console.log(&quot;Meow! I am &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
function greetLangCatFr(animal, language) {
console.log(&quot;Miaou! Je m'appelle &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
function greetLangCowEn(animal, language) {
console.log(&quot;Moo! Call me &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
function greetLangCowFr(animal, language) {
console.log(&quot;Meuh! Appelle moi &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a closer look at the code for the methods that deal with French and tell me if you are surprised to see “Ouaf Ouaf”
instead of “Woof Woof” for dogs, “Miaou” instead of “Meow” for cats and “Meuh” instead of “Moo” for cows. I find it funny that that animal &lt;strong&gt;onomatopoeia&lt;/strong&gt; are different in French than in English!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Onomatopoeia&lt;/em&gt; comes also from the Greek: &lt;em&gt;ónoma&lt;/em&gt; means &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;poiéō&lt;/em&gt; means &lt;em&gt;to produce&lt;/em&gt;. It is the property of words that sound like what they represent. For instance, Woof, Meow and Moo.&lt;/p&gt;

&lt;p&gt;Anyway, after we have defined our &lt;strong&gt;dispatch function&lt;/strong&gt; and our &lt;strong&gt;methods&lt;/strong&gt;, we need to &lt;strong&gt;wire&lt;/strong&gt; them altogether in a multimethod, like we did with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. The only difference that the dispatch values are arrays of strings instead of strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greetLang = multi(
  greetLangDispatch,
  method([&quot;dog&quot;, &quot;en&quot;], greetLangDogEn),
  method([&quot;dog&quot;, &quot;fr&quot;], greetLangDogFr),
  method([&quot;cat&quot;, &quot;en&quot;], greetLangCatEn),
  method([&quot;cat&quot;, &quot;fr&quot;], greetLangCatFr),
  method([&quot;cow&quot;, &quot;en&quot;], greetLangCowEn),
  method([&quot;cow&quot;, &quot;fr&quot;], greetLangCowFr)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Multiple dispatch&lt;/strong&gt; is when a dispatch function emits a value that depends on more than one argument.&lt;/p&gt;

&lt;p&gt;Let’s see our multimethod in action and ask our dog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fido&lt;/code&gt; to greet in French:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greetLang(myDog, french);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-dynamic-dispatch&quot;&gt;Multimethods with dynamic dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Dynamic dispatch&lt;/strong&gt; is when the dispatch function of a multimethod returns a value that goes &lt;strong&gt;beyond the static type&lt;/strong&gt; of its arguments, like for instance a number or a boolean.&lt;/p&gt;

&lt;p&gt;Imagine that instead of being polyglot our animals would suffer from &lt;strong&gt;dysmakrylexia&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dysmakrylexia&lt;/em&gt; comes from the Greek &lt;em&gt;dus&lt;/em&gt; expressing the idea of &lt;em&gt;difficulty&lt;/em&gt;, &lt;em&gt;makrýs&lt;/em&gt; meaning &lt;em&gt;long&lt;/em&gt; and &lt;em&gt;léxis&lt;/em&gt; that means &lt;em&gt;diction&lt;/em&gt;. Therefore, dysmakrilexia is a difficulty to pronounce long words.&lt;/p&gt;

&lt;p&gt;It’s not a real word, I invented it for the purpose of this article!&lt;/p&gt;

&lt;p&gt;Let’s say that when their name has more than 5 letters an animal is not able to tell it.&lt;/p&gt;

&lt;p&gt;Let’s call our multimethod &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dysGreet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-dys.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its dispatch function returns an array with two elements: the animal type and a boolean about whether the name is long or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDispatch(animal) {
var hasLongName = animal.name.length &amp;gt; 5;
return [animal.type, hasLongName];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogShort(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
function dysGreetDogLong(animal) {
console.log(&quot;Woof woof!&quot;);
}
function dysGreetCatShort(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
function dysGreetCatLong(animal) {
console.log(&quot;Meow!&quot;);
}
function dysGreetCowShort(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function dysGreetCowLong(animal) {
console.log(&quot;Moo!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As surprising as it may sound, wiring a multimethod with dynamic dispatch is as simple as wiring a multimethod with static dispatch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var dysGreet = multi(
dysGreetDispatch,
method([&quot;dog&quot;, false], dysGreetDogShort),
method([&quot;dog&quot;, true], dysGreetDogLong),
method([&quot;cat&quot;, false], dysGreetCatShort),
method([&quot;cat&quot;, true], dysGreetCatLong),
method([&quot;cow&quot;, false], dysGreetCowShort),
method([&quot;cow&quot;, true], dysGreetCowLong)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, if we ask Clarabelle to greet, she omits her name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;dysGreet(myCow)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-in-other-languages&quot;&gt;Multimethods in other languages&lt;/h1&gt;

&lt;p&gt;Multimethods are available in many languages, beside JavaScript. In Common LISP and Clojure, they are part of the language. In Python, there is a library called &lt;a href=&quot;https://github.com/weissjeffm/multimethods&quot;&gt;multimethods&lt;/a&gt; and in Ruby there is &lt;a href=&quot;https://github.com/psantacl/ruby-multimethods&quot;&gt;Ruby multimethods&lt;/a&gt;. Both work quite like JavaScript arrows/multimethod.&lt;/p&gt;

&lt;p&gt;In Java, there is the &lt;a href=&quot;http://igm.univ-mlv.fr/~forax/works/jmmf/&quot;&gt;Java Multimethod Framework&lt;/a&gt; and C# supports multimethods natively via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; keyword. However, in both cases, it works only with static data types and not with generic data structures. Also, dynamic dispatch is not supported.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethods&lt;/strong&gt; make it possible to benefit from &lt;strong&gt;polymorphism&lt;/strong&gt; when &lt;strong&gt;data&lt;/strong&gt; is represented with &lt;strong&gt;generic maps&lt;/strong&gt;. Multimethods are made of a &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a dispatch value and &lt;strong&gt;methods&lt;/strong&gt; that provide implementations for the dispatch values.&lt;/p&gt;

&lt;p&gt;In the simplest case (&lt;strong&gt;single dispatch&lt;/strong&gt;), the multimethod receives a single map that contains a type field and the dispatch function of the multimethod emits the value of the type field. In more advanced cases (&lt;strong&gt;multiple dispatch&lt;/strong&gt; and &lt;strong&gt;dynamic dispatch&lt;/strong&gt;), the dispatch function emits an arbitrary value that depends on several arguments.&lt;/p&gt;

&lt;script src=&quot;https://viebel.github.io/klipse/repo/js/multimethod.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;var {multi, method, fromMulti} = window.multimethod;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">Object-Oriented Programming is well known for allowing different classes to be called with the same interface, via a mechanism called polymorphism. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have polymorphism without objects via multimethods.</summary></entry><entry><title type="html">Data validation with JSON schema</title><link href="/javascript/2021/09/30/data-validation-with-json-schema.html" rel="alternate" type="text/html" title="Data validation with JSON schema" /><published>2021-09-30T00:15:28+00:00</published><updated>2021-09-30T00:15:28+00:00</updated><id>/javascript/2021/09/30/data-validation-with-json-schema</id><content type="html" xml:base="/javascript/2021/09/30/data-validation-with-json-schema.html">&lt;p&gt;According to the principles of &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented Programming&lt;/a&gt;, we should represent data with &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;immutable&lt;/strong&gt; data structures, like immutable hash maps and immutable vectors. At first sight, it might seem that it means to &lt;em&gt;live in the wild&lt;/em&gt; and not validate that data is conformed to an expected schema.&lt;/p&gt;

&lt;p&gt;In fact, it is possible – and advised – to maintain a data schema in Data-Oriented Programming. For instance, in Clojure, we handle data validation with tools like [clojure.spec] or [malli].&lt;/p&gt;

&lt;p&gt;The major insight of this kind of data validation is that &lt;strong&gt;data schema&lt;/strong&gt; should be &lt;strong&gt;separated&lt;/strong&gt; from &lt;strong&gt;data representation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We should separate data schema from data representation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of this article is to illustrate how to implement Clojure approach of data validation in other programming languages using JSON schema.&lt;/p&gt;

&lt;p&gt;This article is made of 4 parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How to express a data schema using &lt;strong&gt;JSON schema&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;How to &lt;strong&gt;validate&lt;/strong&gt; data against a JSON schema&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;benefits&lt;/strong&gt; of separating between data schema and data representation&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;costs&lt;/strong&gt; of separating between data schema and data representation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article is an interactive version of the article published on &lt;a href=&quot;https://javascript.works-hub.com/learn/data-validation-without-objects-78fcc&quot;&gt;JavaScript Works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/freedom-2.jpg&quot; alt=&quot;Freedom&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;json-schema&quot;&gt;JSON schema&lt;/h2&gt;

&lt;p&gt;Think about handling a request in a library management system for the addition of an author to the system. To keep things simple, imagine that such a request contains only basic information about the author:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Their first name&lt;/li&gt;
  &lt;li&gt;Their last name&lt;/li&gt;
  &lt;li&gt;Optionally, the number of books they have written&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Data-Oriented Programming, we represent the request data in our program as a string map that is expected to have three fields:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; - a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; - a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; - a number (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt;, we represent the data schema of the request with the following map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var addAuthorRequestSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;], 
  &quot;properties&quot;: {
    &quot;firstName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;lastName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;books&quot;: {&quot;type&quot;: &quot;integer&quot;}
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of remarks regarding the syntax of this JSON schema:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data is expected to be a map (in JSON, a map is called an object)&lt;/li&gt;
  &lt;li&gt;Only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; fields are required&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; must be a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; must be a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; must be an integer (when it is provided)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-validation-against-a-schema&quot;&gt;Data validation against a schema&lt;/h2&gt;

&lt;p&gt;In order to check whether a piece of data conforms to a data schema, we use a &lt;strong&gt;data validation library&lt;/strong&gt; for our preferred programming language.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Language&lt;/th&gt;
      &lt;th&gt;Data validation Library&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;JavaScript&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ajv-validator/ajv&quot;&gt;Ajv&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clojure&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/juxt/jinx&quot;&gt;jinx&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ssilverman/snowy-json&quot;&gt;Snow&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C#&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.newtonsoft.com/jsonschema&quot;&gt;JSON.net Schema&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/marksparkza/jschon&quot;&gt;jschon&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/davishmcclurg/json_schemer&quot;&gt;JSONSchemer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The complete list of data validation libraries is available &lt;a href=&quot;http://json-schema.org/implementations.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For instance, in JavaScript, using &lt;a href=&quot;https://ajv.js.org/&quot;&gt;Ajv JSON schema validator&lt;/a&gt;, we validate a piece of data using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; function. As you might expect, when a piece of data is valid, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var ajv = new Ajv({allErrors: true}); 

var validAuthorData = {
  firstName: &quot;Isaac&quot;,
  lastName: &quot;Asimov&quot;,
  books: 500
};

ajv.validate(addAuthorRequestSchema, validAuthorData); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a piece of data is invalid (e.g. using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastNam&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var invalidAuthorData = {
  firstName: &quot;Isaac&quot;,
  lastNam: &quot;Asimov&quot;,
  books: &quot;five hundred&quot;
};

ajv.validate(addAuthorRequestSchema, invalidAuthorData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a piece of data is invalid, we can easily get details about data validation failures in a human readable format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var invalidAuthorData = {
  firstName: &quot;Isaac&quot;,
  lastNam: &quot;Asimov&quot;,
  books: &quot;five hundred&quot;
};

ajv.validate(addAuthorRequestSchema, invalidAuthorData);
ajv.errorsText(ajv.errors);
// &quot;data should have required property 'lastName', data.books should be number&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of remarks regarding validation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ajv&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By default, Ajv stores only the first data validation error. We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allErrors: true&lt;/code&gt; to store all errors.&lt;/li&gt;
  &lt;li&gt;Data validation errors are stored internally as an array. In order to get a human readable string, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errorsText&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-benefits-of-separating-between-data-schema-and-data-representation&quot;&gt;The benefits of separating between data schema and data representation&lt;/h2&gt;

&lt;p&gt;When we separate data schema from data representation in our programs, our programs benefit from:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Freedom&lt;/strong&gt; to choose what data should be validated&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optional&lt;/strong&gt; fields&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt; data validation conditions&lt;/li&gt;
  &lt;li&gt;Automatic generation of data model &lt;strong&gt;visualization&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Automatic generation of &lt;strong&gt;unit tests&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;benefit-1-freedom-to-choose-what-data-should-be-validated&quot;&gt;Benefit #1: Freedom to choose what data should be validated&lt;/h3&gt;

&lt;p&gt;When data schema is separated from data representation we are free to instantiate data without specifying its expected shape. Such a &lt;em&gt;freedom&lt;/em&gt; is useful in various situations. For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We want to experiment with code quickly&lt;/li&gt;
  &lt;li&gt;Data has already been validated&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;rapid-prototyping&quot;&gt;Rapid prototyping&lt;/h4&gt;

&lt;p&gt;In classic Object-Oriented Programming and in some statically typed Functional Programming, each and every piece of data must have a predefined shape (either a class or a data type). During the &lt;strong&gt;exploration phase&lt;/strong&gt; of coding, where we don’t know yet what is the exact shape of our data, being forced to update the type definition each time we update our data model &lt;em&gt;slows us down&lt;/em&gt;. In Data-Oriented Programming, we can develop at a &lt;em&gt;fast pace&lt;/em&gt; during the exploration phase, by &lt;strong&gt;delaying&lt;/strong&gt; the data schema definition to a later phase.&lt;/p&gt;

&lt;h4 id=&quot;code-refactoring&quot;&gt;Code refactoring&lt;/h4&gt;

&lt;p&gt;One common refactoring pattern is the &lt;strong&gt;split phase refactoring&lt;/strong&gt; where you basically split a single large function into multiple smaller functions, with a private scope. Those functions are called with data that has already been validated by the large function. In Data-Oriented Programming, we are free to not specify the shape of the arguments of the inner functions, relying on the data validation that has already occurred.&lt;/p&gt;

&lt;p&gt;Suppose we want to display some information about an author, like their full name and whether they are considered as prolific or not.&lt;/p&gt;

&lt;p&gt;First, we define the data schema for the author data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;],
  &quot;properties&quot;: {
    &quot;firstName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;lastName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;books&quot;: {&quot;type&quot;: &quot;integer&quot;}
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; function that first check whether data is valid and then displays the information about he author:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function displayAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &quot;displayAuthorInfo called with invalid data&quot;;
  };
  console.log(&quot;Author full name is: &quot;, authorData.firstName + &quot; &quot; + authorData.lastName);
  if(authorData.books == null) {
    console.log(&quot;Author has not written any book&quot;);
  } else {
    if (authorData.books &amp;gt; 100) {
      console.log(&quot;Author is prolific&quot;);
    } else {
      console.log(&quot;Author is not prolific&quot;);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the first thing we do inside the body of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; is to validate that the argument passed to the function is valid.&lt;/p&gt;

&lt;p&gt;Now, let’s apply the split phase refactoring pattern to this simplistic example and split the body of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; in two inner functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayFullName&lt;/code&gt;: Display the author full name&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayProlificity&lt;/code&gt;: Display whether the author is prolific or not&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;
function displayFullName(authorData) {
  console.log(&quot;Author full name is: &quot;, authorData.firstName + &quot; &quot; + authorData.lastName);
}

function displayProlificity(authorData) {
  if(authorData.books == null) {
    console.log(&quot;Author has not written any book&quot;);
  } else {
    if (authorData.books &amp;gt; 100) {
      console.log(&quot;Author is prolific&quot;);
    } else {
      console.log(&quot;Author is not prolific&quot;);
    }
  }
}

function displayAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &quot;displayAuthorInfo called with invalid data&quot;;
  };
  displayFullName(authorData);
  displayProlificity(authorData);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the data schema separated from the data representation allows us not to specify a data schema for the arguments of the inner functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayFullName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayProlificity&lt;/code&gt;. It makes the refactoring process a bit &lt;em&gt;smoother&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In some cases, the inner functions are more complicated and it makes sense to specify a data schema for their arguments. Data-Oriented Programming gives us the freedom to choose!&lt;/p&gt;

&lt;h3 id=&quot;benefit-2-optional-fields&quot;&gt;Benefit #2: Optional fields&lt;/h3&gt;

&lt;p&gt;In Object-Oriented Programming, allowing a class member to be &lt;em&gt;optional&lt;/em&gt; is not easy. For instance, in Java one needs a special construct like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional&lt;/code&gt; class &lt;a href=&quot;https://www.oracle.com/technical-resources/articles/java/java8-optional.html&quot;&gt;introduced in Java 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Data-Oriented Programming, it is natural to declare a field as optional in a map. In fact in JSON schema, &lt;strong&gt;by default&lt;/strong&gt; every field is optional. In order to make a field non-optional, we have to include its name in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required&lt;/code&gt; array as for instance in the author schema in the following code snippet where only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; are required while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; is optional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;], // `books` is not included in `required`, as it is an optional field
  &quot;properties&quot;: {
    &quot;firstName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;lastName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;books&quot;: {&quot;type&quot;: &quot;integer&quot;} // when present, `books` must be an integer
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s illustrate how the validation function deals with optional fields: A map without a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; field is considered to be valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorDataNoBooks = {
  &quot;firstName&quot;: &quot;Yehonathan&quot;,
  &quot;lastName&quot;: &quot;Sharvit&quot;
};

ajv.validate(authorSchema, authorDataNoBooks) // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a map with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; field where the value is not an interger is considered to be invalid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorDataInvalidBooks = {
  &quot;firstName&quot;: &quot;Albert&quot;,
  &quot;lastName&quot;: &quot;Einstein&quot;,
  &quot;books&quot;: &quot;Five&quot;
};

ajv.validate(authorSchema, authorDataInvalidBooks) // false
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;benefit-3-advanced-data-validation-conditions&quot;&gt;Benefit #3: Advanced data validation conditions&lt;/h3&gt;

&lt;p&gt;In Data-Oriented Programming, data validation occurs at &lt;strong&gt;run time&lt;/strong&gt;. It allows us to define data validation conditions that go beyond the &lt;strong&gt;type&lt;/strong&gt; of a field. For instance, we might want to make sure that a field is not only a string but a string with a maximal number of characters or a number comprised in a range of numbers.&lt;/p&gt;

&lt;p&gt;For instance, here is a JSON schema that expects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; to be strings of less than 100 characters and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; to be a number between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10,000&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorComplexSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;],
  &quot;properties&quot;: {
    &quot;firstName&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;maxLength&quot;: 100
    },
    &quot;lastName&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;maxLength&quot;: 100
    },
    &quot;books&quot;: {
      &quot;type&quot;: &quot;integer&quot;,
      &quot;minimum&quot;: 0,
      &quot;maximum&quot;: 10000
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON schema supports many other advanced data validation conditions, like regular expression validation for string fields or number fields that should be a multiple of a given number.&lt;/p&gt;

&lt;h3 id=&quot;benefit-4-automatic-generation-of-data-model-visualization&quot;&gt;Benefit #4: Automatic generation of data model visualization&lt;/h3&gt;

&lt;p&gt;When the data schema is defined as data, we can leverage tools that generate data model visualization: with tools like &lt;a href=&quot;https://navneethg.github.io/jsonschemaviewer/&quot;&gt;JSON Schema Viewer&lt;/a&gt; and &lt;a href=&quot;https://github.com/metosin/malli&quot;&gt;Malli&lt;/a&gt; we can generate a UML diagram out of a JSON schema. For instance, the following JSON schema defines the shape of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookList&lt;/code&gt; field that is an array of books where each book is a map.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bookList&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The tools we just mentioned can generate the following UML diagram from the JSON schema:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/author-schema.png&quot; alt=&quot;author schema&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benefit-5-automatic-generation-of-unit-tests&quot;&gt;Benefit #5: Automatic generation of unit tests&lt;/h3&gt;

&lt;p&gt;An interesting way to leverage data schema for function arguments is to automatically generate unit tests. Let’s change a bit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; function into a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt; that – instead of displaying the author info – returns the author info as a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function calculateAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &quot;calculateAuthorInfo called with invalid data&quot;;
  };
  var fullName = &quot;Author full name is: &quot; + authorData.firstName + &quot; &quot; + authorData.lastName;
  var prolificity = &quot;&quot;;
  if(authorData.books == null) {
    prolificity = &quot;Author has not written any book&quot;;
  } else {
    if (authorData.books &amp;gt; 100) {
      prolificity = &quot;Author is prolific&quot;;
    } else {
      prolificity = &quot;Author is not prolific&quot;;
    }
  }
  return fullName + &quot;\n&quot; + prolificity;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to generate a unit test for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt; by generating random input data that conforms to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorSchema&lt;/code&gt;. For that purpose, we use a library like &lt;a href=&quot;https://github.com/json-schema-faker/json-schema-faker&quot;&gt;JSON Schema Faker&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;JSONSchemaFaker(authorSchema)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt; with the random data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;calculateAuthorInfo(JSONSchemaFaker(authorSchema))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on what the function does, we might expect different things. In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt;, we expect the output to be a string that starts with the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt;. Let’s create a schema for the return value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var calculateAuthorInfoReturnValueSchema = {
&quot;type&quot;: &quot;string&quot;,
&quot;pattern&quot;: &quot;Author.*&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the code of our unit test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var res = calculateAuthorInfo(JSONSchemaFaker(authorSchema));
ajv.validate(calculateAuthorInfoReturnValueSchema, res)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-costs-of-separating-between-data-schema-and-data-representation&quot;&gt;The costs of separating between data schema and data representation&lt;/h2&gt;

&lt;p&gt;There is no such thing as a free lunch. Separating between data schema and data representation comes at a cost:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Loose connection&lt;/em&gt; between data and its schema&lt;/li&gt;
  &lt;li&gt;Light &lt;em&gt;performance&lt;/em&gt; hit&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cost-1-loose-connection-between-data-and-its-schema&quot;&gt;Cost #1: Loose connection between data and its schema&lt;/h3&gt;

&lt;p&gt;By definition, when we separate between data schema and data representation, the connection between data and its schema is &lt;strong&gt;looser&lt;/strong&gt; that when we represent data with classes. Moreover, the schema definition language (e.g. JSON schema) is not part of the programming language. It is up to the developer to decide where data validation is &lt;strong&gt;necessary&lt;/strong&gt; and where it is &lt;strong&gt;superfluous&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As the idiom says, with great &lt;strong&gt;power&lt;/strong&gt; comes great &lt;strong&gt;responsibility&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cost-2-light-performance-hit&quot;&gt;Cost #2: Light performance hit&lt;/h3&gt;

&lt;p&gt;As we mentioned earlier, there exist implementations of JSON schema validation in most programming languages. When data validation occurs at &lt;strong&gt;run time&lt;/strong&gt; it takes some time to run the data validation while in Object-Oriented programming, data validation occurs usually at &lt;strong&gt;compile time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This drawback is &lt;strong&gt;mitigated&lt;/strong&gt; by the fact that even in Object-Oriented programming some parts of the data validation occur at run time. For instance, the conversion of a request JSON payload into an object occurs at run time. Moreover, in Data-Oriented Programming, it is quite common to have some data validation parts enabled only during &lt;strong&gt;development&lt;/strong&gt; and to disable them when the system runs in &lt;strong&gt;production&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a consequence, the performance hit is not significant.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented Programming&lt;/a&gt;, data is represented with immutable generic data structures. When additional information about the shape of the data is required, we are free to define a data schema (e.g. in JSON Schema).&lt;/p&gt;

&lt;p&gt;Keeping the data schema separate from the data representation leaves the developer free to decide where and when data should be validated. Moreover, data validation occurs at run-time. As a consequence, we can express data validation conditions that go beyond the static data types (e.g. the string length).&lt;/p&gt;

&lt;p&gt;However, with great power comes great responsibility and it’s up to the developer to decide to validate data.&lt;/p&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js&quot; integrity=&quot;sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/ajv/6.12.6/ajv.bundle.js&quot; integrity=&quot;sha512-km2o1mynU1nR0HonrYrI0TA+QvRMtONwnfA/nl15hnd/WyjZ/FLV7NROHAbzzSjHxIeQPfiJRUSUzevO2Ut0Ng==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/json-schema-faker/0.5.0-rc9/json-schema-faker.min.js&quot; integrity=&quot;sha512-MigyB2SaiNKRt1O7yhf1CbLSUnhIopQfQQfzt4N8+JFa4cBizE+OxsfPy+rUUw5sQ2WootqG1kxHS1pvjcsPyA==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">According to the principles of Data-Oriented Programming, we should represent data with generic and immutable data structures, like immutable hash maps and immutable vectors. At first sight, it might seem that it means to live in the wild and not validate that data is conformed to an expected schema.</summary></entry><entry><title type="html">A new way of blogging about Golang</title><link href="/golang/2021/08/29/blog-go.html" rel="alternate" type="text/html" title="A new way of blogging about Golang" /><published>2021-08-29T01:11:22+00:00</published><updated>2021-08-29T01:11:22+00:00</updated><id>/golang/2021/08/29/blog-go</id><content type="html" xml:base="/golang/2021/08/29/blog-go.html">&lt;p&gt;This blog post is about to show a new way of blogging about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(programming_language)&quot;&gt;Go&lt;/a&gt; programming language.&lt;/p&gt;

&lt;p&gt;Look at a typical blog post or tutorial about any programming language: The article usually presents a couple of code snippets. As I see it, there are two pains with code snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;they contain the input and the output but not the actual evaluation of the input&lt;/li&gt;
  &lt;li&gt;it’s impossible for the reader to modify the output&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-forgotten-dream&quot;&gt;The forgotten dream&lt;/h1&gt;

&lt;p&gt;A long time ago, all the developers had a common dream. The dream was about interactivity, liveness, evaluation…&lt;/p&gt;

&lt;p&gt;But we put this dream aside - because the browser understands only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And after a while, we even forgot that we ever had this dream.&lt;/p&gt;

&lt;p&gt;Still, there are some people that didn’t forget this dream, like Alan Kay:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question: Well, look at Wikipedia — it’s a tremendous collaboration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alan Kay: It is, but go to the article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Logo_(programming_language)&quot;&gt;Logo&lt;/a&gt;, can you write and execute Logo programs? Are there examples? No. The Wikipedia people didn’t even imagine that, in spite of the fact that they’re on a computer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442?pgno=2&quot; target=&quot;_blank&quot;&gt;full interview of Alan Kay&lt;/a&gt;. (Thanks &lt;a href=&quot;https://twitter.com/fasihsignal&quot;&gt;@fasihsignal&lt;/a&gt; for bringing this quote to our awareness.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gopher.png&quot; alt=&quot;dream&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-klipse-plugin&quot;&gt;The klipse plugin&lt;/h1&gt;

&lt;p&gt;The klipse plugin is a small step toward this dream: it is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; tag that transforms static code snippets of an html page into live and interactive snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: The code is executed in your browser&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interactive&lt;/strong&gt;: You can modify the code and it is evaluated as you type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt; is written in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;The following languages are supported by &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt; - in any modern browser (including mobile): Clojure, Ruby, JavaScript, Python, Scheme, Go, Jsx, Brainfuck, C++ and Lua.&lt;/p&gt;

&lt;p&gt;In this article, we are going to demonstrate interactive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go&lt;/code&gt; code snippets that are evaluated by &lt;a href=&quot;https://github.com/traefik/yaegi&quot;&gt;Yaegi&lt;/a&gt; that was recently integrated in Klipse by &lt;a href=&quot;https://github.com/mliezun&quot;&gt;Miguel Liezun&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;klipsify-a-go-code-snippet&quot;&gt;Klipsify a Go code snippet&lt;/h1&gt;

&lt;p&gt;Let’s have on this page a small static code snippet:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(This blog is written with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kramdown&lt;/code&gt; plugin helps a lot in beautifying the code snippets.)&lt;/p&gt;

&lt;p&gt;And now, we are going to &lt;strong&gt;klipsify&lt;/strong&gt; this code snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-go&quot;&gt;import &quot;fmt&quot;

func main() {
  fmt.Println(&quot;Hello World!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to edit the code above: it’s interactive =&amp;gt; it evaluates as you type.&lt;/p&gt;

&lt;p&gt;All I had to do in order to &lt;strong&gt;klipsify&lt;/strong&gt; my code snippet, was to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language-eval-go&lt;/code&gt; class (configurable) to the appropriate html element.&lt;/p&gt;

&lt;p&gt;See it by yourself: here is the source of this page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;And now, we are going to &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;klipsify&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; this code snippet:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-klipse-go&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
import &quot;fmt&quot;

func main() {
  fmt.Println(&quot;Hello World!&quot;)
}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;live-demo&quot;&gt;Live demo&lt;/h1&gt;

&lt;p&gt;Before dealing about integration of the klipse plugin on a web page, let’s enjoy another klipse snippet for an implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FizzBuzz&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-go&quot;&gt;import &quot;fmt&quot;

func main() {
    i := 1
    for i &amp;lt;= 20 {
        if (i % 3 == 0 &amp;amp;&amp;amp; i % 5 == 0) {
            fmt.Println(&quot;Fizzbuzz&quot;)
        } else if (i % 3 == 0) {
            fmt.Println(&quot;Fizz&quot;)
        } else if (i % 5 == 0) {
            fmt.Println(&quot;Buzz&quot;)
        } else {
            fmt.Println(i)
        }
        i = i + 1
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead! modify the code snippet above, and it will evaluate as you type…&lt;/p&gt;

&lt;h1 id=&quot;evaluating-a-gist&quot;&gt;Evaluating a gist&lt;/h1&gt;

&lt;p&gt;We can also evaluate code from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, we could evaluate &lt;a href=&quot;https://gist.github.com/viebel/d9320214d88352533d3f81d3ff960312&quot;&gt;this gist&lt;/a&gt; that calculates the factorial of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;103&lt;/code&gt;, leveraging big integers to avoid integer overflow:&lt;/p&gt;

&lt;pre&gt;
&lt;div class=&quot;language-klipse-go&quot; data-gist-id=&quot;viebel/d9320214d88352533d3f81d3ff960312&quot;&gt;&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;Again, feel free to modify the code…&lt;/p&gt;

&lt;h1 id=&quot;integration&quot;&gt;Integration&lt;/h1&gt;

&lt;p&gt;All you need to do in order to integrate the klipse plugin to your blog (or any other web page), is to add this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; tag to your web page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://app.klipse.tech/css/codemirror.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;klipse_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;selector_go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.language-klipse-go&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// css selector for the html elements you want to klipsify&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://app.klipse.tech/plugin_prod/js/klipse_plugin.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By the way, this is exactly what we did on the page that you are currently reading.&lt;/p&gt;

&lt;h1 id=&quot;other-languages&quot;&gt;Other languages&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; is designed as a platform that could support any language that has a client-side evaluator, by writing modules to the Klipse plugin. Currently, there are modules available for the following languages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript: &lt;a href=&quot;http://blog.klipse.tech/javascript/2016/06/20/blog-javascript.html&quot;&gt;A new way of blogging about JavaScript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clojure[Script]: &lt;a href=&quot;http://blog.klipse.tech/clojure/2016/06/07/klipse-plugin-tuto.html&quot;&gt;How to klipsify a clojure[script] blog post&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python: &lt;a href=&quot;http://blog.klipse.tech/python/2017/01/04/python-turtle-fractal.html&quot;&gt;The python turtle in the browser&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brainfuck: &lt;a href=&quot;http://blog.klipse.tech/brainfuck/2016/12/17/brainfuck.html&quot;&gt;Brainfuck for dummies&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scheme: &lt;a href=&quot;http://blog.klipse.tech/scheme/2016/09/11/scheme-tutorial-1.html&quot;&gt;Interactive overview of Scheme’s semantics&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Go ahead!&lt;/p&gt;

&lt;p&gt;Write your own blog post with interactive snippets in your preferred language.&lt;/p&gt;

&lt;p&gt;It’s super simple to integrate the &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; on a blog bost: check the instructions on &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can get inspired by &lt;a href=&quot;https://github.com/viebel/klipse#community&quot;&gt;the work of the Klipse community&lt;/a&gt;…&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="golang" /><category term="klipse" /><category term="golang" /><summary type="html">This blog post is about to show a new way of blogging about the Go programming language.</summary></entry><entry><title type="html">On sameness in programming</title><link href="/dop/2021/04/22/sameness-in-programming.html" rel="alternate" type="text/html" title="On sameness in programming" /><published>2021-04-22T10:09:18+00:00</published><updated>2021-04-22T10:09:18+00:00</updated><id>/dop/2021/04/22/sameness-in-programming</id><content type="html" xml:base="/dop/2021/04/22/sameness-in-programming.html">&lt;p&gt;We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?&lt;/p&gt;

&lt;h1 id=&quot;ship-of-theseus&quot;&gt;Ship of Theseus&lt;/h1&gt;

&lt;p&gt;Do you know the story about the ship of Theseus? This Greek hero whose ship, according to legend, was preserved by the Athenians for centuries: they removed the worn planks from the ship and replaced them until no original planks remained.&lt;/p&gt;

&lt;p&gt;The question then arose as to whether it was still the same ship or whether the maintenance had made it a different ship.&lt;/p&gt;

&lt;p&gt;What do you think? And most importantly what does that have to do with programming?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/theseus.png&quot; alt=&quot;ship&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-math&quot;&gt;Sameness in math&lt;/h1&gt;

&lt;p&gt;Let’s start by exploring the concept of sameness in math and ask ourselves a question similar to the ship of Theseus in the realm of sets.&lt;/p&gt;

&lt;p&gt;Consider a set with three elements: the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;What happens when we replace a number from this set, for example: the number 3 by the number 4?&lt;/p&gt;

&lt;p&gt;Obviously, we get a set than is not the same as the original set!&lt;/p&gt;

&lt;p&gt;Now imagine that we have a set with the numbers 1, 2 and 10. What happens when we replace 10 with 3? Well, we get a set with the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;A set with the numbers 1, 2 and 3 like the one in the previous example? Is it the same set or another set with the same elements? Funny question, isn’t it?&lt;/p&gt;

&lt;p&gt;For mathematics, the answer is formal: two sets having the same elements are the same! This is one of the axioms of axiomatic set theory. This axiom even has a pretty name: it is called the axiom of extensionality&lt;sup id=&quot;fnref:extensionality&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:extensionality&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;According to mathematics, therefore, the ship of Theseus is no longer the same as soon as one of its planks is replaced&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-programming&quot;&gt;Sameness in programming&lt;/h1&gt;

&lt;p&gt;Let’s move on to programming now, if you don’t mind. Imagine a product sold on an e-commerce site, a pretty coffee mug, for instance. Let’s simplify it and say that a mug has only two attributes: a description and a price. What happens when you drop the price of a cup? Is this the same cup or is it a different cup?&lt;/p&gt;

&lt;p&gt;Obviously, this is the same cup! In programming, the identity of an object is more than the values ​​of its attributes.&lt;/p&gt;

&lt;p&gt;According to programming, therefore, the ship of Theseus remains the same, although all its planks have been replaced.&lt;/p&gt;

&lt;h1 id=&quot;functional-programming&quot;&gt;Functional programming&lt;/h1&gt;

&lt;p&gt;We are at the core of an obvious contradiction between the world of programming and the world of mathematics. As Bruce MacLennan so beautifully wrote in his beautiful article “Values ​​and Objects in Programming Languages”, in 1982&lt;sup id=&quot;fnref:paper&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paper&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math is value oriented programming.&lt;/p&gt;

  &lt;p&gt;Programming is object-oriented mathematics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What he means by an object is an entity having a set of attributes at a given time. Whereas a value is, by definition, an entity that never changes.&lt;/p&gt;

&lt;p&gt;In a way, it can be said that the fundamental divergences between functional programming and object-oriented programming revolve around the manipulation of the object/value cursor. Functional programming encourages developers to activate the cursor towards values ​​while object-oriented programming encourages developers to activate the cursor towards objects.&lt;/p&gt;

&lt;p&gt;One of the reasons why a program written in functional programming is less complex than an object-oriented program is because, as we have just seen, it is more complex to define the sameness of objects than the sameness of values.&lt;/p&gt;

&lt;h1 id=&quot;back-to-theseus&quot;&gt;Back to Theseus&lt;/h1&gt;

&lt;p&gt;Writing a program these days is sometimes as much of a challenge as finding a way out of Daedalus’ Labyrinth. According to legend, Theseus managed to find his way out of the Labyrinth with the help of Ariadne’s thread.
I am going to let you meditate on the following question: Could we consider functional programming as Ariadne’s thread that will allow us to find our way out of the maze of complexity created by our programs?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:extensionality&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Axiom_of_extensionality &lt;a href=&quot;#fnref:extensionality&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paper&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;MacLennan, Bruce. (1982). &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;. &lt;a href=&quot;#fnref:paper&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="maths" /><summary type="html">We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?</summary></entry><entry><title type="html">On sameness in programming</title><link href="/dop/2021/04/21/sameness-in-programming-2.html" rel="alternate" type="text/html" title="On sameness in programming" /><published>2021-04-21T02:09:18+00:00</published><updated>2021-04-21T02:09:18+00:00</updated><id>/dop/2021/04/21/sameness-in-programming-2</id><content type="html" xml:base="/dop/2021/04/21/sameness-in-programming-2.html">&lt;p&gt;We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?&lt;/p&gt;

&lt;h1 id=&quot;ship-of-theseus&quot;&gt;Ship of Theseus&lt;/h1&gt;

&lt;p&gt;Do you know the story about the ship of Theseus? This Greek hero whose ship, according to legend, was preserved by the Athenians for centuries: they removed the worn planks from the ship and replaced them until no original planks remained.&lt;/p&gt;

&lt;p&gt;The question then arose as to whether it was still the same ship or whether the maintenance had made it a different ship.&lt;/p&gt;

&lt;p&gt;What do you think? And most importantly what does that have to do with programming?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/theseus.png&quot; alt=&quot;ship&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-math&quot;&gt;Sameness in math&lt;/h1&gt;

&lt;p&gt;Let’s start by exploring the concept of sameness in math and ask ourselves a question similar to the ship of Theseus in the realm of sets.&lt;/p&gt;

&lt;p&gt;Consider a set with three elements: the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;What happens when we replace a number from this set, for example: the number 3 by the number 4?&lt;/p&gt;

&lt;p&gt;Obviously, we get a set than is not the same as the original set!&lt;/p&gt;

&lt;p&gt;Now imagine that we have a set with the numbers 1, 2 and 10. What happens when we replace 10 with 3? Well, we get a set with the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;A set with the numbers 1, 2 and 3 like the one in the previous example? Is it the same set or another set with the same elements? Funny question, isn’t it?&lt;/p&gt;

&lt;p&gt;For mathematics, the answer is formal: two sets having the same elements are the same! This is one of the axioms of axiomatic set theory. This axiom even has a pretty name: it is called the axiom of extensionality&lt;sup id=&quot;fnref:extensionality&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:extensionality&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;According to mathematics, therefore, the ship of Theseus is no longer the same as soon as one of its planks is replaced&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-programming&quot;&gt;Sameness in programming&lt;/h1&gt;

&lt;p&gt;Let’s move on to programming now, if you don’t mind. Imagine a product sold on an e-commerce site, a pretty coffee mug, for instance. Let’s simplify it and say that a mug has only two attributes: a description and a price. What happens when you drop the price of a cup? Is this the same cup or is it a different cup?&lt;/p&gt;

&lt;p&gt;Obviously, this is the same cup! In programming, the identity of an object is more than the values ​​of its attributes.&lt;/p&gt;

&lt;p&gt;According to programming, therefore, the ship of Theseus remains the same, although all its planks have been replaced.&lt;/p&gt;

&lt;h1 id=&quot;functional-programming&quot;&gt;Functional programming&lt;/h1&gt;

&lt;p&gt;We are at the core of an obvious contradiction between the world of programming and the world of mathematics. As Bruce MacLennan so beautifully wrote in his beautiful article “Values ​​and Objects in Programming Languages”, in 1982&lt;sup id=&quot;fnref:paper&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paper&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math is value oriented programming.&lt;/p&gt;

  &lt;p&gt;Programming is object-oriented mathematics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What he means by an object is an entity having a set of attributes at a given time. Whereas a value is, by definition, an entity that never changes.&lt;/p&gt;

&lt;p&gt;In a way, it can be said that the fundamental divergences between functional programming and object-oriented programming revolve around the manipulation of the object/value cursor. Functional programming encourages developers to activate the cursor towards values ​​while object-oriented programming encourages developers to activate the cursor towards objects.&lt;/p&gt;

&lt;p&gt;One of the reasons why a program written in functional programming is less complex than an object-oriented program is because, as we have just seen, it is more complex to define the sameness of objects than the sameness of values.&lt;/p&gt;

&lt;h1 id=&quot;back-to-theseus&quot;&gt;Back to Theseus&lt;/h1&gt;

&lt;p&gt;Writing a program these days is sometimes as much of a challenge as finding a way out of Daedalus’ Labyrinth. According to legend, Theseus managed to find his way out of the Labyrinth with the help of Ariadne’s thread.
I am going to let you meditate on the following question: Could we consider functional programming as Ariadne’s thread that will allow us to find our way out of the maze of complexity created by our programs?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:extensionality&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Axiom_of_extensionality &lt;a href=&quot;#fnref:extensionality&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paper&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;MacLennan, Bruce. (1982). &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;. &lt;a href=&quot;#fnref:paper&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="maths" /><summary type="html">We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?</summary></entry><entry><title type="html">La notion de mêmeté en programmation</title><link href="/dop/2021/04/18/memete-programmation.html" rel="alternate" type="text/html" title="La notion de mêmeté en programmation" /><published>2021-04-18T15:04:28+00:00</published><updated>2021-04-18T15:04:28+00:00</updated><id>/dop/2021/04/18/memete-programmation</id><content type="html" xml:base="/dop/2021/04/18/memete-programmation.html">&lt;p&gt;On parle souvent de l’importance d’écrire notre code en termes de fonctions pures qui, comme les fonctions mathématiques, n’ont pas d’effets de bords et retournent les mêmes valeurs pour les mêmes arguments. Dans cet article, je vous propose d’explorer un autre aspect fondamental de la différence entre la programmation fonctionnelle et la programmation orientée objet: la notion de mêmeté, c’est-à-dire: comment définit-on que deux “choses” sont les mêmes?&lt;/p&gt;

&lt;h1 id=&quot;une-histoire-un-peu-bateau&quot;&gt;Une histoire un peu bateau&lt;/h1&gt;

&lt;p&gt;Connaissez-vous l’histoire du bateau de Thésée? Ce héros grec dont le bateau, selon la légende, aurait été préservé par les Athéniens durant des siècles: ils retiraient les planches usées du bateau et les remplaçaient jusq’au point où il ne restait plus aucune planche d’origine.&lt;/p&gt;

&lt;p&gt;Se posa alors la question de savoir s’il s’agissait encore du même bateau ou bien si l’entretien en avait fait un tout autre bateau.&lt;/p&gt;

&lt;p&gt;Qu’en pensez-vous? Et surtout qu’est-ce que cela a à voir avec les maths et la programmation?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/theseus.png&quot; alt=&quot;ship&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;la-mêmeté-en-maths&quot;&gt;La mêmeté en maths&lt;/h1&gt;

&lt;p&gt;Commençons par les maths en nous posant une question similaire concernant le concept le plus fondamental des mathématiques: le concept d’ensemble.&lt;/p&gt;

&lt;p&gt;Prenons un ensemble avec trois éléments: les nombres 1, 2 et 3.&lt;/p&gt;

&lt;p&gt;Que se passe-t-il quand on remplace un nombre de cet ensemble, par exemple: le nombre 3 par le nombre 4?&lt;/p&gt;

&lt;p&gt;Bien évidemment, nous obtenons un ensemble différent de l’ensemble d’origine!&lt;/p&gt;

&lt;p&gt;Maintenant imaginons que nous ayons un ensemble avec les nombres 1, 2 et 10. Que se passe-t-il quand on remplace 10 par 3? Et bien, me direz-vous nous obtenons un ensemble avec les nombres 1, 2 et 3.&lt;/p&gt;

&lt;p&gt;Un ensemble avec les nombres 1, 2 et 3 comme celui de l’exemple précédent? S’agit-il du même ensemble ou bien d’un autre ensemble avec les mêmes éléments? Drôle de question, non?&lt;/p&gt;

&lt;p&gt;Et bien pour les mathématiques, la réponse est formelle: deux ensembles ayant les mêmes éléments sont les mêmes! C’est l’un des axiomes de la théorie axiomatique des ensembles. Cet axiome porte même un joli nom: on l’appelle l’axiome de l’extensionnalité&lt;sup id=&quot;fnref:extensionality&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:extensionality&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Selon les mathématiques donc, le bateau de Thésée n’est plus le même dès que l’on remplace une de ses planches.&lt;/p&gt;

&lt;h1 id=&quot;la-mêmeté-en-programmation&quot;&gt;La mêmeté en programmation&lt;/h1&gt;

&lt;p&gt;Passons à la programmation maintenant, si vous le voulez bien. Imaginons un produit vendu sur un site e-commerce, une jolie tasse à café, par exemple. Simplifions les choses et disons qu’une tasse ne possède que deux attributs: un descriptif et un prix. Que se passe-t-il quand on baisse le prix d’une tasse? S’agit-il de la même tasse ou bien d’une autre tasse?&lt;/p&gt;

&lt;p&gt;Bien évidemment, il s’agit de la même tasse! En programmation, l’identité d’un objet ne se résume pas à la valeurs de ses attributs.&lt;/p&gt;

&lt;p&gt;Selon la programmation donc, le bateau de Thésée reste le même, bien que toutes ses planches aient été remplacées.&lt;/p&gt;

&lt;h1 id=&quot;la-programmation-fonctionnelle&quot;&gt;La programmation fonctionnelle&lt;/h1&gt;

&lt;p&gt;Nous sommes ici au coeur d’une contradiction manifeste entre le monde de la programmation et le monde des mathématiques. Comme l’a si joliment écrit Bruce MacLennan dans son très bel article “Values and Objects in Programming Languages”, en 1982&lt;sup id=&quot;fnref:paper&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paper&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Les mathématiques, c’est de la programmation orientée valeur.&lt;/p&gt;

  &lt;p&gt;La programmation, c’est des mathématiques orientées objet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ce qu’il entend par un objet, c’est une entité ayant un ensemble d’attributs à un moment donné. Alors qu’une valeur est, par définition, une entité qui ne change jamais.&lt;/p&gt;

&lt;p&gt;D’une certaine façon, on peut dire que les divergences fondamentales entre la programmation fonctionnelle et la programmation orientée objet tournent autour de la manipulation du curseur objet/valeur. La programmation fonctionnelle encourage le développeurs à activer le curseur vers les valeurs alors que la programmation orientée objet encourage les développeurs à activer le curseur vers les objets.&lt;/p&gt;

&lt;p&gt;Une des raisons pour lesquelles un programme écrit en programmation fonctionnelle est moins complexe qu’un programme orienté objet, c’est car comme on vient de le voir il est plus complexe de définir la mêmeté des objets que la mêmeté des valeurs.&lt;/p&gt;

&lt;h1 id=&quot;retour-à-thésée&quot;&gt;Retour à Thésée&lt;/h1&gt;

&lt;p&gt;Écrire un programme de nos jours représente parfois un défi aussi grand que trouver la sortie du labyrinthe de Dédale. Selon la légende, Thésée parvint à sortir du labyrinthe de Dédale grâce à une pelote de fil qu’Ariane lui avait fournit en entrant dans le labyrinthe. Je vous laisse méditer sur la question suivante: Pouvons-nous espérer que la programmation fonctionnelle représente le file d’Ariane qui nous permettra de nous sortir des dédales des programmes que nous écrivons?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:extensionality&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Axiom_of_extensionality &lt;a href=&quot;#fnref:extensionality&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paper&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;MacLennan, Bruce. (1982). &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;. &lt;a href=&quot;#fnref:paper&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="maths" /><summary type="html">On parle souvent de l’importance d’écrire notre code en termes de fonctions pures qui, comme les fonctions mathématiques, n’ont pas d’effets de bords et retournent les mêmes valeurs pour les mêmes arguments. Dans cet article, je vous propose d’explorer un autre aspect fondamental de la différence entre la programmation fonctionnelle et la programmation orientée objet: la notion de mêmeté, c’est-à-dire: comment définit-on que deux “choses” sont les mêmes?</summary></entry><entry><title type="html">Data-Oriented programming simplicity illustrated by coding challenges</title><link href="/dop/2021/04/01/dop-challenges.html" rel="alternate" type="text/html" title="Data-Oriented programming simplicity illustrated by coding challenges" /><published>2021-04-01T12:38:15+00:00</published><updated>2021-04-01T12:38:15+00:00</updated><id>/dop/2021/04/01/dop-challenges</id><content type="html" xml:base="/dop/2021/04/01/dop-challenges.html">&lt;p&gt;According to Data-Oriented programming, the best way to reduce complexity of information systems is to follow three basic principles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Separate code from data&lt;/li&gt;
  &lt;li&gt;Keep data immutable&lt;/li&gt;
  &lt;li&gt;Represent data with generic data structures&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are a series of 6 short programming challenges and their solutions written in JavaScript according to the principles of Data-Oriented programming. The purpose is to illustrate the simplicity of Data-Oriented programming.&lt;/p&gt;

&lt;p&gt;If you agree with DOP principles, please implement your solutions in the programming language of your choice, according to DOP principles. I’m sure you’ll enjoy!&lt;/p&gt;

&lt;p&gt;If you disagree with one or more DOP principles, feel free to implement the solutions by breaking one or more principles (e.g. use data types, classes or records instead of maps), and explain why you think that your solution is simpler than the ones that I wrote.&lt;/p&gt;

&lt;h1 id=&quot;rules&quot;&gt;Rules&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;You are allowed to choose any programming language&lt;/li&gt;
  &lt;li&gt;You are allowed to use any third-party library&lt;/li&gt;
  &lt;li&gt;You are allowed to use reflection&lt;/li&gt;
  &lt;li&gt;In the context of the challenges, simplicity is more important than performances.&lt;/li&gt;
  &lt;li&gt;Submit your code snippets as a pull request to the official book source code &lt;a href=&quot;https://github.com/viebel/data-oriented-programming&quot;&gt;Github repository&lt;/a&gt;, under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenges&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;In case you disagree with DOP, please add a few words as comments in your code that explain why you think that your solution is simpler than the ones that I wrote.&lt;/li&gt;
  &lt;li&gt;Four copies of &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; will be given away among the folks that submit a correct solution to at least 4 of the challenges.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;data-model&quot;&gt;Data model&lt;/h1&gt;

&lt;p&gt;Here is the library data model in an informal way:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-data-mindmap.png&quot; alt=&quot;mindmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More formally, here is a UML diagram that describes the relationships between the data entities of the library:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-data-diagram.png&quot; alt=&quot;diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of library data in JavaScript that we are going to use through this article:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var libraryData = {
    &quot;name&quot;: &quot;The smallest library on earth&quot;,
    &quot;address&quot;: &quot;Here and now&quot;,
    &quot;catalog&quot;: {
        &quot;booksByIsbn&quot;: {
            &quot;978-1779501127&quot;: {
                &quot;isbn&quot;: &quot;978-1779501127&quot;,
                &quot;title&quot;: &quot;Watchmen&quot;,
                &quot;publicationYear&quot;: 1987,
                &quot;authorIds&quot;: [&quot;alan-moore&quot;,
                              &quot;dave-gibbons&quot;],
                &quot;bookItems&quot;: [
                    {
                        &quot;id&quot;: &quot;book-item-1&quot;,
                        &quot;rackId&quot;: &quot;rack-17&quot;,
                    },
                    {
                        &quot;id&quot;: &quot;book-item-2&quot;,
                        &quot;rackId&quot;: &quot;rack-17&quot;,
                    }
                ]
            }
        },
        &quot;authorsById&quot;: {
            &quot;alan-moore&quot;: {
                &quot;name&quot;: &quot;Alan Moore&quot;,
                &quot;bookIsbns&quot;: [&quot;978-1779501127&quot;]
            },
            &quot;dave-gibbons&quot;: {
                &quot;name&quot;: &quot;Dave Gibbons&quot;,
                &quot;bookIsbns&quot;: [&quot;978-1779501127&quot;]
            }
        }
    },
  &quot;userManagement&quot;: {
    &quot;librarians&quot;: {
      &quot;franck@gmail.com&quot; : {
        &quot;email&quot;: &quot;franck@gmail.com&quot;,
        &quot;encryptedPassword&quot;: &quot;bXlwYXNzd29yZA==&quot;
      }
    },
    &quot;members&quot;: {
      &quot;samantha@gmail.com&quot;: {
        &quot;email&quot;: &quot;samantha@gmail.com&quot;,
        &quot;encryptedPassword&quot;: &quot;c2VjcmV0&quot;,
        &quot;isBlocked&quot;: false,
      }
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;warm-up&quot;&gt;Warm up&lt;/h1&gt;

&lt;p&gt;What’s the title of the book whose ISBN is “978-1779501127” in upper case?&lt;/p&gt;

&lt;p&gt;In this article, I am using &lt;a href=&quot;https://github.com/lodash/lodash/wiki/FP-Guide&quot;&gt;Lodash FP&lt;/a&gt; configured so that it never mutates data in place. Instead of mutating data in place, functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.set()&lt;/code&gt; create a new version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var informationPath = [&quot;catalog&quot;, &quot;booksByIsbn&quot;, &quot;978-1779501127&quot;, &quot;title&quot;]; 
_.get(libraryData, informationPath).toUpperCase();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, each piece of information has an information path. As you’ll see through the upcoming challenges, this unusual approach has many benefits.&lt;/p&gt;

&lt;h1 id=&quot;challenge-1-retrieve-a-piece-of-information&quot;&gt;Challenge #1: Retrieve a piece of information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge ‍&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBookProperty&lt;/code&gt; that receives library data and ISBN and a field name and returns the value of the field for the book with the given ISBN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function getBookProperty(libraryData, isbn, fieldName) {
  var informationPath = [&quot;catalog&quot;, &quot;booksByIsbn&quot;, isbn, fieldName]; 
  return _.get(libraryData, informationPath);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;getBookProperty(libraryData, &quot;978-1779501127&quot;, &quot;title&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, data fields are first-class citizens. We are free to create and combine field names dynamically in our program.&lt;/p&gt;

&lt;h1 id=&quot;challenge-2-search-information&quot;&gt;Challenge #2: Search information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge ‍&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookInfo&lt;/code&gt; that receives library data and a string and returns a JSON string that contains book information about the books whose title contains the given string, in a case insensitive way. Book information is made of: title, isbn, author full names.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt;: You are not allowed to extract author names from author ids. Assume that author ids are opaque strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function authorNames(catalogData, book) {
  return _.map(_.get(book, &quot;authorIds&quot;),
               function(authorId) {
    return _.get(catalogData, [&quot;authorsById&quot;, authorId, &quot;name&quot;]);
    });
}

function bookInfo(catalogData, book) {
  return  {
    &quot;title&quot;: _.get(book, &quot;title&quot;),
    &quot;isbn&quot;: _.get(book, &quot;isbn&quot;),
    &quot;authorNames&quot;: authorNames(catalogData, book)
  };
}

function searchBooksByTitle(libraryData, query) {
  var catalogData = _.get(libraryData, &quot;catalog&quot;);
  var allBooks = _.get(catalogData, &quot;booksByIsbn&quot;);
  var matchingBooks = _.filter(allBooks, function(book) { 
    return _.get(book, &quot;title&quot;).toLowerCase()
      .includes(query.toLowerCase());
  });
  return JSON.stringify(_.map(matchingBooks, function(book) {
    return bookInfo(catalogData, book);
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;searchBooksByTitle(libraryData, &quot;watCH&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the main benefits are the power of expression of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; combined with the freedom of creating on the fly a book info structure and serialize it for free.&lt;/p&gt;

&lt;h1 id=&quot;challenge-3-add-a-piece-of-information&quot;&gt;Challenge #3: Add a piece of information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockMember&lt;/code&gt; that receives library data and an email address and returns a new version of library data &lt;strong&gt;without altering the original version&lt;/strong&gt;, where the user with the given email is blocked.&lt;/p&gt;

&lt;p&gt;Remember that I am using a version of Lodash that, instead of mutating data in place, creates a new version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function blockMember(libraryData, email) {
  var informationPath = [&quot;userManagement&quot;, &quot;members&quot;, email, &quot;isBlocked&quot;]; 
  return _.set(libraryData, informationPath, true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var updatedLibraryData = blockMember(libraryData, &quot;samantha@gmail.com&quot;);

var informationPath = [&quot;userManagement&quot;, &quot;members&quot;, &quot;samantha@gmail.com&quot;, &quot;isBlocked&quot;]; 
[_.get(updatedLibraryData, informationPath), _.get(libraryData, informationPath)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, data is immutable. Functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.set()_&lt;/code&gt; make it efficient (both in terms of memory and computation) to create modified versions of data.&lt;/p&gt;

&lt;h1 id=&quot;challenge-4-rename-keys-in-a-data-entity&quot;&gt;Challenge #4: Rename keys in a data entity&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKeys&lt;/code&gt; that receives a data entity and a key mappings and returns a new data entity, without altering the original entity, where the fields are renamed according to the key mappings&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function renameKeys(map, keyMap) {
  return _.reduce(keyMap,
                  function(res, newKey, oldKey) {
                    var value = _.get(map, oldKey);
                    var resWithNewKey = _.set(res, newKey, value);
                    var resWithoutOldKey = _.omit(resWithNewKey, oldKey);
                    return resWithoutOldKey;
                  },
                  map);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKeys&lt;/code&gt; works with author entities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var alanMoore = {
  &quot;name&quot;: &quot;Alan Moore&quot;,
  &quot;bookIsbns&quot;: [&quot;978-1779501127&quot;]
};
renameKeys(alanMoore, {&quot;bookIsbns&quot;: &quot;books&quot;}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKeys&lt;/code&gt; works also with book item entities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var bookItem = {
  &quot;id&quot;: &quot;book-item-1&quot;,
  &quot;rackId&quot;: &quot;rack-17&quot;,
  &quot;isLent&quot;: true
};

renameKeys(bookItem, {&quot;rackId&quot;: &quot;id&quot;,
                     &quot;id&quot;: &quot;bookItemId&quot;}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, data entities are represented with generic data structures that can be manipulated with generic functions that work with any data entity.&lt;/p&gt;

&lt;h1 id=&quot;challenge-5-merge-pieces-of-information&quot;&gt;Challenge #5: Merge pieces of information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergeAndSerialize&lt;/code&gt; that receives two pieces of book information, one from the database and one from an external service like &lt;a href=&quot;https://openlibrary.org/dev/docs/api/books&quot;&gt;Open Library Books API&lt;/a&gt; and returns a JSON string with information from both sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var watchmenFromDB = {
        &quot;isbn&quot;: &quot;978-1779501127&quot;,
        &quot;title&quot;: &quot;Watchmen&quot;,
        &quot;publicationYear&quot;: 1987,
        &quot;authorIds&quot;: [&quot;alan-moore&quot;,
                      &quot;dave-gibbons&quot;],
        &quot;bookItems&quot;: [
          {
            &quot;id&quot;: &quot;book-item-1&quot;,
            &quot;rackId&quot;: &quot;rack-17&quot;,
            &quot;isLent&quot;: true
          },
          {
            &quot;id&quot;: &quot;book-item-2&quot;,
            &quot;rackId&quot;: &quot;rack-17&quot;,
            &quot;isLent&quot;: false
          }
        ]
      };

var watchmenFromOpenLib = {
  &quot;publishers&quot;: [
    &quot;DC Comics&quot;
  ],
  &quot;number_of_pages&quot;: 334,
  &quot;weight&quot;: &quot;1.4 pounds&quot;,
  &quot;physical_format&quot;: &quot;Paperback&quot;,
  &quot;subjects&quot;: [
    &quot;Graphic Novels&quot;,
    &quot;Comics &amp;amp; Graphic Novels&quot;,
    &quot;Fiction&quot;,
    &quot;Fantastic fiction&quot;
  ],
  &quot;isbn_13&quot;: [
    &quot;9780930289232&quot;
  ],
  &quot;title&quot;: &quot;Watchmen&quot;,
  &quot;isbn_10&quot;: [
    &quot;0930289234&quot;
  ],
  &quot;publish_date&quot;: &quot;April 1, 1995&quot;,
  &quot;physical_dimensions&quot;: &quot;10.1 x 6.6 x 0.8 inches&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We simply merge the two maps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;_.merge(watchmenFromDB, watchmenFromOpenLib);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we JSON serialize the result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function mergeAndSerialize(a, b) {
  return JSON.stringify(_.merge(a, b));
}

mergeAndSerialize(watchmenFromDB, watchmenFromOpenLib);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we represent data with generic data structures, we benefit from many well defined functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt;, implemented either in the programming language itself or in third-party libraries like `Lodash.js.&lt;/p&gt;

&lt;h1 id=&quot;challenge-6-compare-versions-of-data&quot;&gt;Challenge #6: Compare versions of data&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff&lt;/code&gt; that receives two versions of library data and returns an object that contains the diff between the two versions, in the format of your choice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function diffObjects(data1, data2) {
  var emptyObject = _.isArray(data1) ? [] : {};
  if(data1 == data2) {
    return emptyObject;
  }
  var keys = _.union(_.keys(data1), _.keys(data2));
  return _.reduce(keys,
                  function (acc, k) {
    var res = diff(_.get(data1, k),
                   _.get(data2, k));
    if((_.isObject(res) &amp;amp;&amp;amp; _.isEmpty(res)) ||
       (res == &quot;data-diff:no-diff&quot;)) {
      return acc;
    }
    return _.set(acc, [k], res);
  },
                  emptyObject);
}

function diff(data1, data2) {
  if(_.isObject(data1) &amp;amp;&amp;amp; _.isObject(data2)) {
    return diffObjects(data1, data2);
  }
  if(data1 !== data2) {
    return data2;
  }
  return &quot;data-diff:no-diff&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;diff(libraryData, updatedLibraryData);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;diff(libraryData, libraryData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When every piece of data in the system is represented with generic data structures, it is quite easy to compare recursively different data versions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Do you like 😃 DOP or do you hate 😡 it?&lt;/p&gt;

&lt;p&gt;Anyway, it’s time to show off your coding skills 🧑‍💻!&lt;/p&gt;

&lt;p&gt;Submit your code snippets as a pull request to the official book source code &lt;a href=&quot;https://github.com/viebel/data-oriented-programming&quot;&gt;Github repository&lt;/a&gt;, under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenges&lt;/code&gt; folder.
In case you disagree with DOP, please add a few words as comments in your code that explain why you think that your solution is simpler than the ones that I wrote.&lt;/p&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/g/lodash@4(lodash.min.js+lodash.fp.min.js)&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var fp = _.noConflict();
var _ = fp.convert({
  // Specify capping iteratee arguments.
  'cap': false,
  // Specify currying.
  'curry': false,
  // Specify fixed arity.
  'fixed': false,
  // Specify immutable operations.
  'immutable': true,
  // Specify rearranging arguments.
  'rearg': false
});
&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="javascript" /><summary type="html">According to Data-Oriented programming, the best way to reduce complexity of information systems is to follow three basic principles:</summary></entry><entry><title type="html">How to access data dynamically in Java without losing type safety</title><link href="/java/2021/03/28/dynamic-data-access-in-java.html" rel="alternate" type="text/html" title="How to access data dynamically in Java without losing type safety" /><published>2021-03-28T12:11:42+00:00</published><updated>2021-03-28T12:11:42+00:00</updated><id>/java/2021/03/28/dynamic-data-access-in-java</id><content type="html" xml:base="/java/2021/03/28/dynamic-data-access-in-java.html">&lt;p&gt;An interesting question in the context of information systems is:&lt;/p&gt;

&lt;p&gt;To what extent &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; is applicable in a statically-typed language like Java?&lt;/p&gt;

&lt;p&gt;The first two principles of Data-Oriented programming (DOP) seem to be in the spirit of the newest additions to Java (e.g data records in Java 14):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Principle #1: Code is &lt;strong&gt;separated&lt;/strong&gt; from data&lt;/li&gt;
  &lt;li&gt;Principle #2: Data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, when it comes to Principle #3, it causes discomfort to many Java developers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Principle #3: Data access is &lt;strong&gt;flexible&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By flexible data access, we mean that it should be possible inside our programs to access dynamically a data field, given its name.&lt;/p&gt;

&lt;p&gt;There are two ways to provide &lt;strong&gt;dynamic data access&lt;/strong&gt; in Java:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Represent data with &lt;strong&gt;classes&lt;/strong&gt; (or records in Java 14) and use &lt;strong&gt;reflection&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Represent data with &lt;strong&gt;string maps&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The purpose of this article is to illustrate various ways to &lt;strong&gt;access data dynamically&lt;/strong&gt; in Java, both with classes and maps. Towards the end of the article, we suggest how to keep a bit of &lt;strong&gt;type safety&lt;/strong&gt; even when data access is dynamic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/freedom.jpg&quot; alt=&quot;freedom&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;data-in-json&quot;&gt;Data in JSON&lt;/h1&gt;

&lt;p&gt;Let’s take as an example data from a library catalog with a single book.&lt;/p&gt;

&lt;p&gt;Here is an example of a catalog data in JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some pieces of data in our catalog are &lt;strong&gt;homogeneous maps of unknown size&lt;/strong&gt; (e.g. the book index, the author index)&lt;/p&gt;

&lt;p&gt;Other pieces of data are &lt;strong&gt;heterogeneous maps of fixed size&lt;/strong&gt; (e.g. a book, a author).&lt;/p&gt;

&lt;p&gt;Homogeneous maps of unknown size are usually represented by &lt;strong&gt;hash maps&lt;/strong&gt;, while heterogeneous maps of fixed sized are usually represented with &lt;strong&gt;classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The example that we are going to use again and again throughout the article, is accessing the title of watchmen inside the catalog and convert it to upper case.&lt;/p&gt;

&lt;h1 id=&quot;representing-data-with-records&quot;&gt;Representing data with records&lt;/h1&gt;

&lt;p&gt;Java 14 introduced the concept of a &lt;strong&gt;data record&lt;/strong&gt; that provides a first-class means for modelling data-only aggregates.&lt;/p&gt;

&lt;p&gt;Here is how our data model would look like with records:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicationYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CatalogData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorByIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Records are instantiated like classes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Conceptually, the title of Watchmen, like any other piece of information has an &lt;em&gt;information path&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when we navigate the information path we encounter both records and hash maps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The natural way to access data in a record is via the dot notation&lt;/li&gt;
  &lt;li&gt;The natural way to access data in a hash map is via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how we access the title of watchmen and convert it to upper case.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This lack of uniformity between data access in a record and in a map is not only annoying from a theoretic perspective. It also has practical drawbacks. For instance, we cannot store the information path in a variable or in a function argument. In fact, we don’t have a &lt;strong&gt;dynamic access to information&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;accessing-data-in-a-record-via-reflection&quot;&gt;Accessing data in a record via reflection&lt;/h1&gt;

&lt;p&gt;We can overcome the drawbacks exposed in the previous section and provide a &lt;strong&gt;dynamic access to information&lt;/strong&gt; in a record or in a class, via &lt;strong&gt;reflection&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now, we are able to access data in a record via a string that holds the name of a field. For instance:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Watchmen&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can easily modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess.get()&lt;/code&gt; so that it works both with records and maps:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now, we can write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getIn()&lt;/code&gt; method that receives an object and an information path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is how we access the title of watchmen in the catalog, via its &lt;strong&gt;information path&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;watchmen&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem that remains to be solved is the type of the value that we retrieve via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess.get()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess.getIn()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The most cumbersome way is to cast explicitly:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another option is to add two specific methods to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess&lt;/code&gt; that return a string:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It makes data access a bit less verbose:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;representing-data-with-hash-maps&quot;&gt;Representing data with hash maps&lt;/h1&gt;

&lt;p&gt;Another approach to providing a &lt;strong&gt;dynamic data access&lt;/strong&gt; is to represent every piece of data with hash maps. The benefits of this approach is that we don’t need to use reflection. The drawback is that all our maps are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt; and it means that we have lost &lt;strong&gt;type safety&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like before, we are free to access any piece of information via its information path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;typed-getters&quot;&gt;Typed getters&lt;/h1&gt;

&lt;p&gt;We could move one step further and try to make it easier to specify the type of a value associated with a key, by making &lt;strong&gt;field names first-class citizens&lt;/strong&gt; in our program.&lt;/p&gt;

&lt;p&gt;Let’s start with a non-nested key in a map or a record.&lt;/p&gt;

&lt;p&gt;We create a generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Getter&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can create a &lt;strong&gt;typed getter&lt;/strong&gt; that contains both:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the name of the field&lt;/li&gt;
  &lt;li&gt;the type of its value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For instance, here is how we create a typed getter for the title of a book:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is how we use the typed getter to access the field value:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;watchmen&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The getter is typed, therefore we can access the value as a string without any casting:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can extend the typed getter approach to nested keys:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetterIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetterIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is how we access a piece of information via its information path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;nc&quot;&gt;GetterIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NESTED_TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetterIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NESTED_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Providing a &lt;strong&gt;dynamic data access&lt;/strong&gt; in a &lt;strong&gt;statically-typed&lt;/strong&gt; language like Java is challenging. When data is represented with classes or records, we need to use reflection and when data is represented with string maps, we loose the information about types.&lt;/p&gt;

&lt;p&gt;Maybe an approach like the typed getters, presented at the end of the article, could open the door to the Java community for a &lt;strong&gt;dynamic data access&lt;/strong&gt; that doesn’t compromise &lt;strong&gt;type safety&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="java" /><category term="java" /><summary type="html">An interesting question in the context of information systems is:</summary></entry><entry><title type="html">The concepts behind Data-Oriented programming</title><link href="/clojure/2021/03/15/rich-hickey-concepts.html" rel="alternate" type="text/html" title="The concepts behind Data-Oriented programming" /><published>2021-03-15T04:03:52+00:00</published><updated>2021-03-15T04:03:52+00:00</updated><id>/clojure/2021/03/15/rich-hickey-concepts</id><content type="html" xml:base="/clojure/2021/03/15/rich-hickey-concepts.html">&lt;p&gt;Here are 9 fundamental general concepts about programming.&lt;/p&gt;

&lt;p&gt;In my opinion, &lt;strong&gt;Data-Oriented programming&lt;/strong&gt; as a language-agnostic paradigm is founded on a certain understanding (interpretation?) of those concepts.&lt;/p&gt;

&lt;p&gt;My understanding of those concepts has been highly influenced by &lt;strong&gt;Rich Hickey&lt;/strong&gt;’s talks where he shares his unique approach to &lt;strong&gt;effective information systems&lt;/strong&gt; and the rationale behind &lt;strong&gt;Clojure&lt;/strong&gt; as a &lt;strong&gt;Data-Oriented&lt;/strong&gt; programming language.&lt;/p&gt;

&lt;p&gt;This glossary is my attempt to make Data-Oriented programming better understood in the global community of developers and explains how DOP differs from Object-Oriented programming and functional programming.&lt;/p&gt;

&lt;p&gt;The concepts are presented in alphabetical order.&lt;/p&gt;

&lt;h2 id=&quot;1-abstraction&quot;&gt;1. Abstraction&lt;/h2&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; is about drawing from a set of &lt;strong&gt;exemplars&lt;/strong&gt; some &lt;strong&gt;essential&lt;/strong&gt; thing.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Relational algebra&lt;/strong&gt; is an example of &lt;strong&gt;data abstraction&lt;/strong&gt;. Modelling data as relations gives us lot of power:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We express advanced data manipulation operations with well-defined relational algebra operators&lt;/li&gt;
  &lt;li&gt;An implementation of relational algebra operators is applicable to all exemplars of data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;in-clojure&quot;&gt;In Clojure&lt;/h3&gt;
&lt;p&gt;Representing data with &lt;strong&gt;maps&lt;/strong&gt; (“just use maps”) is a &lt;strong&gt;data abstraction&lt;/strong&gt;. The only required knowledge in order to access data is the field name, represented with a generic entity (e.g. a string or a keyword).&lt;/p&gt;

&lt;p&gt;Moreover, there is a well-defined algebra of maps  applicable to any data represented with maps.&lt;/p&gt;

&lt;h3 id=&quot;see-also&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;Concretion&lt;/p&gt;

&lt;h2 id=&quot;2-concretion&quot;&gt;2. Concretion&lt;/h2&gt;
&lt;h3 id=&quot;definition-1&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Concretion&lt;/strong&gt; is when in order to use something we need a &lt;strong&gt;concrete&lt;/strong&gt; knowledge about the thing.&lt;/p&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Dependency Inversion Principle&lt;/a&gt;: Entities must depend on &lt;strong&gt;abstractions&lt;/strong&gt;, not on &lt;strong&gt;concretions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The common way to apply DIP to Object-Oriented programming is that when a class depends on another class, it should not depend on concrete instances of the other class. Rather, it should depend on an &lt;strong&gt;abstract interface&lt;/strong&gt; implemented by that class.&lt;/p&gt;

&lt;p&gt;A more abstract way to handle dependency between entities is to invoke code by &lt;strong&gt;sending a message&lt;/strong&gt; to an object. The only required knowledge is the name of the message, represented with a generic entity (e.g. a string).&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-1&quot;&gt;In Clojure&lt;/h3&gt;

&lt;p&gt;In a sense, Clojure idiom &lt;em&gt;just use maps&lt;/em&gt; is an application of the Dependency Inversion Principle to &lt;strong&gt;data&lt;/strong&gt;. Representing data with a data class or a data record is a &lt;strong&gt;concretion&lt;/strong&gt;: The only way to access data is via the class methods or record members.&lt;/p&gt;

&lt;p&gt;When we access data through the methods of an interface, it’s a bit less concrete. But still, we can access data only through the methods defined in the interface.&lt;/p&gt;

&lt;p&gt;A more abstract (less concrete) way to represent data is with generic maps. In order to access data in a map, the only required knowledge is the field name, represented with generic entities like strings (or Clojure keywords).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Concrete&lt;/td&gt;
      &lt;td&gt;Concrete class&lt;/td&gt;
      &lt;td&gt;Concrete record&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Less concrete&lt;/td&gt;
      &lt;td&gt;Abstract class&lt;/td&gt;
      &lt;td&gt;Abstract class with getters&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Most abstract&lt;/td&gt;
      &lt;td&gt;Message passing&lt;/td&gt;
      &lt;td&gt;Generic map&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;see-also-1&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;Abstraction&lt;/p&gt;

&lt;h2 id=&quot;3-identity&quot;&gt;3. Identity&lt;/h2&gt;
&lt;h3 id=&quot;definition-2&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Identity&lt;/strong&gt; is a &lt;strong&gt;stable&lt;/strong&gt; logical entity that humans or programs associate with a series of different &lt;strong&gt;values&lt;/strong&gt; over &lt;strong&gt;time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An identity is not the same as a name.&lt;/p&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example&lt;/h3&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan-state-on-march-2021&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; No kidding!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:firstName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yehonathan&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lastName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sharvit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan-state-on-march-2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s describe exactly what happens in this code snippet in terms of name, identity, state and value:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yehonathan&lt;/code&gt; is a name that refers to an identity&lt;/li&gt;
  &lt;li&gt;The identity is represented as an &lt;a href=&quot;https://clojuredocs.org/clojure.core/atom&quot;&gt;atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The map with the fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age=42&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName=&quot;Yehonathan&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName=&quot;Sharvit&quot;&lt;/code&gt; is a value&lt;/li&gt;
  &lt;li&gt;After calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(reset! yehonathan ...)&lt;/code&gt;, the state of the identity referred by the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yehonathan&lt;/code&gt; is the map with the fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age=42&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName=&quot;Yehonathan&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName=&quot;Sharvit&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;see-also-2&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;State, Value&lt;/p&gt;

&lt;h2 id=&quot;4-information&quot;&gt;4. Information&lt;/h2&gt;
&lt;h3 id=&quot;definition-3&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Information&lt;/strong&gt; is what you &lt;strong&gt;know&lt;/strong&gt; about something that happened in the &lt;strong&gt;world&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Information is inherently &lt;strong&gt;sparse&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Information is &lt;strong&gt;open&lt;/strong&gt; in the sense that it could contain pieces that you don’t care about in some context.&lt;/p&gt;

&lt;p&gt;Information &lt;strong&gt;accretes&lt;/strong&gt;, it just keeps accumulating.&lt;/p&gt;

&lt;p&gt;The best way to grapple information is by using names.&lt;/p&gt;

&lt;h2 id=&quot;5-loose-coupling&quot;&gt;5. Loose coupling&lt;/h2&gt;
&lt;h3 id=&quot;definition-4&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;A system is &lt;strong&gt;loosely coupled&lt;/strong&gt; when its components have little knowledge of the internals of other components.&lt;/p&gt;

&lt;p&gt;Components A is loosely coupled with component B if A communicates with B without &lt;strong&gt;concrete knowledge&lt;/strong&gt; about the internals of B.&lt;/p&gt;

&lt;h3 id=&quot;example-3&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Web services that communicate via JSON are loosely coupled.&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-2&quot;&gt;In Clojure&lt;/h3&gt;

&lt;p&gt;In Clojure, inside a program we “&lt;strong&gt;just use maps&lt;/strong&gt;” to communicate. This is based on the principle that
“we should program the &lt;strong&gt;insides&lt;/strong&gt; of our systems like we program the &lt;strong&gt;outsides&lt;/strong&gt;”.
Outside, we have loose coupling everywhere: over the wire we communicate via data (e.g. JSON).
Let’s do the same inside and communicate via data (e.g. hash maps).&lt;/p&gt;

&lt;p&gt;Compare that with functions that receive a record (or a data class) as an argument. In order to call those functions, we need to import the definition of the record. That’s not loose coupling!&lt;/p&gt;

&lt;h3 id=&quot;see-also-3&quot;&gt;See also&lt;/h3&gt;

&lt;p&gt;Abstraction, Concretion&lt;/p&gt;

&lt;h2 id=&quot;6-maybe&quot;&gt;6. Maybe&lt;/h2&gt;
&lt;h3 id=&quot;definition-5&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;Nothing is of type &lt;em&gt;maybe&lt;/em&gt; something.&lt;/p&gt;

&lt;p&gt;Maybe is a property of the aggregate not of the field.&lt;/p&gt;

&lt;h3 id=&quot;example-4&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;It makes no sense to say that the type of the social security number of a person is &lt;em&gt;maybe&lt;/em&gt; a string.&lt;/p&gt;

&lt;p&gt;What makes sense is to say: in this map (that aggregates data about a person), the social security number is maybe a string (it could also be absent from the map).&lt;/p&gt;

&lt;p&gt;Even more precise: this function receives as an argument a map where the social security number is maybe a string.&lt;/p&gt;

&lt;h2 id=&quot;7-names&quot;&gt;7. Names&lt;/h2&gt;
&lt;h3 id=&quot;definition-6&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Names&lt;/strong&gt; are a fundamental property of information. However, in statically-typed languages, names compile away. There exist at compile time but not a run time.&lt;/p&gt;

&lt;p&gt;At run time, a field cannot be access &lt;strong&gt;dynamically&lt;/strong&gt; by its name. In order to access data, we are required to import the definition of the class that contains the data.&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-3&quot;&gt;In Clojure&lt;/h3&gt;
&lt;p&gt;In a map, field names are first-class.&lt;/p&gt;

&lt;h3 id=&quot;see-also-4&quot;&gt;See also&lt;/h3&gt;

&lt;p&gt;Concretion, Loose-coupling&lt;/p&gt;

&lt;h2 id=&quot;8-state&quot;&gt;8. State&lt;/h2&gt;
&lt;h3 id=&quot;definition-7&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; of an identity is the value &lt;strong&gt;currently&lt;/strong&gt; associated with this identity.&lt;/p&gt;

&lt;p&gt;State never changes. At different times, different values are associated with an identity. We say that an identity can be in different states at different times.&lt;/p&gt;

&lt;p&gt;An identity is not a state. An identity has a state at any point in time.&lt;/p&gt;

&lt;h3 id=&quot;see-also-5&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;Identity, Value&lt;/p&gt;

&lt;h2 id=&quot;9-value&quot;&gt;9. Value&lt;/h2&gt;
&lt;h3 id=&quot;definition-8&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;value&lt;/strong&gt; is something that doesn’t change. A value is inherently &lt;strong&gt;immutable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Values are part of the world, not part of our programs or our mental models.&lt;/p&gt;

&lt;h3 id=&quot;example-5&quot;&gt;Example&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In all programming languages, numbers are values.&lt;/li&gt;
  &lt;li&gt;In most programming languages, strings are values.&lt;/li&gt;
  &lt;li&gt;In functional programming languages, data collections are values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;see-also-6&quot;&gt;See also&lt;/h3&gt;

&lt;p&gt;Identity, State&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-4&quot;&gt;In Clojure&lt;/h3&gt;
&lt;p&gt;In Clojure, every piece of data is a value: numbers, strings, maps, vectors, sets, lists.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’ll leave you with the following questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What are the fundamental differences between Clojure and Object-Oriented programming?&lt;/li&gt;
  &lt;li&gt;What are the fundamental differences between Clojure and functional Oriented programming?&lt;/li&gt;
  &lt;li&gt;What are the main benefits of Data-Oriented programming as evangelised by Clojure when building information systems?&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><category term="clojure" /><category term="dop" /><category term="clojure" /><category term="theory" /><summary type="html">Here are 9 fundamental general concepts about programming.</summary></entry><entry><title type="html">Data-Oriented programming in Java</title><link href="/java/2021/03/05/data-oriented-programming-in-java.html" rel="alternate" type="text/html" title="Data-Oriented programming in Java" /><published>2021-03-05T04:03:52+00:00</published><updated>2021-03-05T04:03:52+00:00</updated><id>/java/2021/03/05/data-oriented-programming-in-java</id><content type="html" xml:base="/java/2021/03/05/data-oriented-programming-in-java.html">&lt;h1 id=&quot;the-principles-of-data-oriented-programming&quot;&gt;The principles of Data-Oriented programming&lt;/h1&gt;

&lt;p&gt;The purpose of Data-Oriented programming (DOP) is to &lt;strong&gt;reduce the complexity&lt;/strong&gt; of software systems, by promoting the treatment of data as a first-class citizen.&lt;/p&gt;

&lt;p&gt;Concretely, it comes down to the application of 3 principles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code is &lt;strong&gt;separated&lt;/strong&gt; from data&lt;/li&gt;
  &lt;li&gt;Data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Data access is &lt;strong&gt;flexible&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those principles are not new: They have been adopted in one way or another by the Java community over the years through various design patterns (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity_component_system&quot;&gt;Entity component system&lt;/a&gt;) and smart libraries that leverage Java annotations (e.g. Project Lombok).&lt;/p&gt;

&lt;p&gt;However, I believe that the combination of those 3 principles makes &lt;strong&gt;a whole that is greater that the sum of its parts&lt;/strong&gt;, in the sense that software systems built on top of DOP principles tend to be less complex. In my book &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt;, I am exploring in greater details how to apply the principles of DOP in the context of a &lt;strong&gt;production software system&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the present article, I am going to illustrate how to apply the principles of DOP in Java.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dop-in-java.png&quot; alt=&quot;Data-Oriented Programming in Java&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;separating-code-from-data-in-java&quot;&gt;Separating code from data in Java&lt;/h1&gt;

&lt;p&gt;Suppose we want to build a library management system with the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Two kinds of &lt;em&gt;users&lt;/em&gt;: library members and librarians&lt;/li&gt;
  &lt;li&gt;Users &lt;em&gt;log in&lt;/em&gt; to the system via email and password.&lt;/li&gt;
  &lt;li&gt;Members can &lt;em&gt;borrow&lt;/em&gt; books&lt;/li&gt;
  &lt;li&gt;Members and librarians can &lt;em&gt;search&lt;/em&gt; books by title or by author&lt;/li&gt;
  &lt;li&gt;Librarians can &lt;em&gt;block&lt;/em&gt; and &lt;em&gt;unblock&lt;/em&gt; members (e.g. when they are late in returning a book)&lt;/li&gt;
  &lt;li&gt;Librarians can &lt;em&gt;list the books&lt;/em&gt; currently lent by a member&lt;/li&gt;
  &lt;li&gt;There could be &lt;em&gt;several copies&lt;/em&gt; of a book&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A possible (naive) classic Java design for such a system would be made of the following classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Library&lt;/code&gt;: The central part for which the system is designed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt;: A book&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BookItem&lt;/code&gt;: A book can have multiple copies, each copy is considered as a book item&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BookLending&lt;/code&gt;: When a book is lent, a book lending object is created&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Member&lt;/code&gt;: A member of the library&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Librarian&lt;/code&gt;: A librarian&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;: A base class for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Librarian&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Member&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Catalog&lt;/code&gt;: Contains list of books&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt;: A book author&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A possible class diagram (eluding the details about members and methods) would be something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-uml-diagram.png&quot; alt=&quot;Library management class diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, a Java expert would probably comes up with a smarter design, leveraging some smart &lt;strong&gt;design patterns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, I’d like to illustrate how the application of DOP Principle #1 naturally leads to a simpler design, without involving any design patterns. We are going to split each class of our system in two classes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A code class with &lt;strong&gt;static methods&lt;/strong&gt; only&lt;/li&gt;
  &lt;li&gt;A data class with &lt;strong&gt;members&lt;/strong&gt; only&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result is a diagram made of two disjoint diagrams:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Data classes on the left&lt;/li&gt;
  &lt;li&gt;Code classes on the right&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-separate-code-from-data.png&quot; alt=&quot;Separating code from data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t you agree that the resulting diagram is less complex than the previous one?&lt;/p&gt;

&lt;p&gt;The cool think is that applying Principle #1 doesn’t require being a Java expert. Of course, the combination of smart design patterns and DOP Principle #1 would lead to an even better design.&lt;/p&gt;

&lt;h1 id=&quot;how-to-represent-immutable-data-in-java&quot;&gt;How to represent immutable data in Java&lt;/h1&gt;

&lt;p&gt;The benefits of applying DOP Principle #2 about &lt;strong&gt;data immutability&lt;/strong&gt; in Java have been widely discussed. Basically, it comes down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread safety&lt;/li&gt;
  &lt;li&gt;Absence of hidden side-effects&lt;/li&gt;
  &lt;li&gt;Ease of caching&lt;/li&gt;
  &lt;li&gt;Prevention of identity mutation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interesting question is: How do we represent immutable data in Java. There are mainly, three approaches:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Immutable classes (boilerplate code avoided via Java annotations)&lt;/li&gt;
  &lt;li&gt;Data records (available since Java 14)&lt;/li&gt;
  &lt;li&gt;Persistent hash maps&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;representing-data-with-immutable-classes&quot;&gt;Representing data with immutable classes&lt;/h2&gt;

&lt;p&gt;Immutable classes, have no methods and the members cannot be modified.&lt;/p&gt;

&lt;p&gt;Writing manually for each immutable class of our system the appropriate constructors, getters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashCode()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt; involves lot of boilerplate code. We could avoid the boilerplate code using a Java annotation like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@value&lt;/code&gt; annotation from &lt;a href=&quot;https://projectlombok.org/features/Value&quot;&gt;Project Lombok&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how we could represent the catalog data of our library management system using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@value&lt;/code&gt; annotation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicationYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorByIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As an example, here is how we would instantiate data of a catalog with a single book: Watchmen.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we display in upper case the id of the first author of Watchmen like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;representing-data-with-records&quot;&gt;Representing data with records&lt;/h2&gt;

&lt;p&gt;Java language maintainers acknowledge the need to provide immutable data representation at the language level. Java 14 introduced the concept of a record that provides a first-class means for modelling data-only aggregates.&lt;/p&gt;

&lt;p&gt;Here is how our data model would look like with records:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicationYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CatalogData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorByIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Records are instantiated like immutable classes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we display in upper case the id of the first author of Watchmen like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read more about Java records in this &lt;a href=&quot;https://blogs.oracle.com/javamagazine/records-come-to-java&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;persistent-string-maps&quot;&gt;Persistent string maps&lt;/h2&gt;

&lt;p&gt;Now comes the esoteric part that might cause you to feel uncomfortable as a Java developer.&lt;/p&gt;

&lt;p&gt;Instead of representing data with a layout that is statically defined in our code base, we could represent data with hash maps without specifying data layout at all.&lt;/p&gt;

&lt;p&gt;The advantage of this approach is that it makes data access and data manipulation flexible. Of course, it has to trade off &lt;strong&gt;flexibility&lt;/strong&gt; for &lt;strong&gt;type safety&lt;/strong&gt;. My purpose here is not to convince you that this is the way you should represent data in Java. My humble purpose is to suggest that a &lt;strong&gt;dynamic approach&lt;/strong&gt; to data is applicable in Java. Hopefully, it will motivate Java experts to explore if it makes sense to promote the dynamic data approach in Java.&lt;/p&gt;

&lt;p&gt;Let’s see first how we could instantiate our catalog data using native Java immutable string maps and lists:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The limitation of Java immutable maps is that we cannot update them efficiently. Creating a new version of the catalog data (e.g. updating the publication year of a book) would require to copy the whole map. Fortunately, there is this computer science thing called &lt;strong&gt;persistent data structures&lt;/strong&gt; that makes it possible to update immutable data structures &lt;strong&gt;efficiently&lt;/strong&gt; both in terms of memory and computation.&lt;/p&gt;

&lt;p&gt;There is a Java library named &lt;a href=&quot;https://github.com/GlenKPeterson/Paguro&quot;&gt;Paguro&lt;/a&gt; that provides efficient persistent data structures in Java.&lt;/p&gt;

&lt;p&gt;Instantiating our catalog with Paguro is a bit more verbose as we have to wrap key-values pairs in maps with tuples:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With string maps (both Paguro and Java), we cannot easily access nested data in our catalog:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127j&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// throws an exception&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that inside the catalog map, we have values of different types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items&lt;/code&gt; is a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;booksByIsbn&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorByIds&lt;/code&gt; are maps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to be able to access the value associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;booksByIsbn&lt;/code&gt; as a map, we have to do a static cast:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns a map&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we have to do it multiple times until we get to the value we are interested in:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I told you it would be esoteric!&lt;/p&gt;

&lt;p&gt;We could alleviate a bit the awkwardness of this approach by adding getter methods in our map for each type of value (similar to Apache Wicket &lt;a href=&quot;https://ci.apache.org/projects/wicket/apidocs/9.x/org/apache/wicket/util/value/ValueMap.html&quot;&gt;value maps&lt;/a&gt;). Then it would look a bit less awkward to access a value in a nested map, as the casting is hidden in the getter:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could move one step further and implement nested value getters (similar to &lt;a href=&quot;https://clojuredocs.org/clojure.core/get-in&quot;&gt;get-in&lt;/a&gt; in Clojure or &lt;a href=&quot;https://lodash.com/docs/4.17.15#get&quot;&gt;Lodash get&lt;/a&gt; in JavaScript). Then, we could access a nested value in a very concise way:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN_MOORE&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me conclude this article by mentioning &lt;strong&gt;potential benefits&lt;/strong&gt; that the dynamic data approach would provide if it is adopted by the Java community.&lt;/p&gt;

&lt;h1 id=&quot;potential-benefits-of-a-dynamic-data-approach&quot;&gt;Potential benefits of a dynamic data approach&lt;/h1&gt;
&lt;h2 id=&quot;weak-dependency-between-code-and-data&quot;&gt;Weak dependency between code and data&lt;/h2&gt;

&lt;p&gt;When a piece of code manipulates data represented in a generic way it doesn’t have to include the class that defines the layout of the data. The only information that is required is the name of the fields to be manipulated.&lt;/p&gt;

&lt;h2 id=&quot;information-path&quot;&gt;Information path&lt;/h2&gt;

&lt;p&gt;When we represent the whole data of the system in a generic way, each piece of information of the system is accessible via its information bath: A list of keys and indexes that describe the path to the information.&lt;/p&gt;

&lt;h2 id=&quot;serialization-without-reflection&quot;&gt;Serialization without reflection&lt;/h2&gt;

&lt;p&gt;When data is represented with hash maps and lists, we can serialize it (e.g. JSON serialization) in a natural way without using reflection or any custom annotation.&lt;/p&gt;

&lt;h2 id=&quot;manipulate-data-with-general-purpose-functions&quot;&gt;Manipulate data with general-purpose functions&lt;/h2&gt;

&lt;p&gt;When data is represented in a generic way, we are free to manipulate it with a rich set of general-purpose functions. Let me mention two quick examples:&lt;/p&gt;

&lt;h3 id=&quot;rename-keys&quot;&gt;Rename keys&lt;/h3&gt;

&lt;p&gt;Suppose we want to send book information over the wire with a slight modification: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; field should be renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookTitle&lt;/code&gt;. In a non-dynamic approach to data, we would have to create another class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BookWithBookTitle&lt;/code&gt; (it would be hard to come up with a good name!).&lt;/p&gt;

&lt;p&gt;In a dynamic data approach, we could write a general purpose function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKey()&lt;/code&gt;. The cool thing is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKey()&lt;/code&gt; wouldn’t be coupled to book data. As a consequence, we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKey()&lt;/code&gt; to rename the field of author data.&lt;/p&gt;

&lt;h3 id=&quot;merge-data&quot;&gt;Merge data&lt;/h3&gt;

&lt;p&gt;Suppose, we’d like to enrich book information with data from Amazon and GoodReads. In a non-dynamic approach we’d probably need to create classes or records for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AmazonBookInfo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodReadsBookInfo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnrichedBookInfo&lt;/code&gt;. Anyway, we’d have to write custom code that merges information from Amazon and GoodReads.&lt;/p&gt;

&lt;p&gt;In a dynamic data approach, we could leverage a general purpose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; function that works on an arbitrary map.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This article suggested that it would be possible to apply the principles of Data-Oriented programming in Java.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code is &lt;strong&gt;separated&lt;/strong&gt; code from data&lt;/li&gt;
  &lt;li&gt;Data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Data access is &lt;strong&gt;flexible&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Principles #1 and #2 feel quite natural to Java developers (especially with the addition of Java records). However, Principle #3 feels much less natural.&lt;/p&gt;

&lt;p&gt;I hope that by having illustrated the benefits of a dynamic data approach, I have motivated a bit the Java community. Now it’s time for Java experts to take it from there and discover (&lt;em&gt;hopefully in the near future&lt;/em&gt;) what is the best way to embrace &lt;strong&gt;Data-Oriented programming in Java&lt;/strong&gt;.&lt;/p&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><category term="java" /><category term="dop" /><category term="java" /><summary type="html">The principles of Data-Oriented programming</summary></entry></feed>