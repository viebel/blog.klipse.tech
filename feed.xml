<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-03-14T11:10:26+00:00</updated><id>/feed.xml</id><title type="html">Yehonathan Sharvit</title><subtitle>Developer. Author. Speaker.</subtitle><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><entry><title type="html">Reading the present moment</title><link href="/databook/2022/01/17/reading-the-present-moment.html" rel="alternate" type="text/html" title="Reading the present moment" /><published>2022-01-16T23:45:32+00:00</published><updated>2022-01-16T23:45:32+00:00</updated><id>/databook/2022/01/17/reading-the-present-moment</id><content type="html" xml:base="/databook/2022/01/17/reading-the-present-moment.html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;This is an experiment I am doing about introducing a bit of self-referential stuff in  Chapter 13 of &quot;Data-Oriented Programming.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;I was inspired by the &quot;Gödel, Escher, Bach&quot; masterpiece. Not sure yet, if it will make it into the official version of the book though. It depends on your feedback.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Throughout the book, Joe&amp;#8201;&amp;#8212;&amp;#8201;a senior Clojure developer&amp;#8201;&amp;#8212;&amp;#8201;reveals the secrets of Data-Oriented Programming to Theo and Dave&amp;#8201;&amp;#8212;&amp;#8201;two fellow developers&amp;#8201;&amp;#8212;&amp;#8201;who get quite excited about this new paradigm.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;In Chapter 13, Dave tests a piece of code he wrote using as a example the book &quot;Data-Oriented Programming&quot; written by your servant.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;yehonathan&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;Yehonathan Sharvit&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;bookIsbns&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;9781617298578&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;tok-nx&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;yehonathan&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;tok-c1&quot;&gt;// → &amp;quot;&amp;lt;i&amp;gt;Yehonathan Sharvit&amp;lt;/i&amp;gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;And that&amp;#8217;s how the self-referential fun begins&amp;#8230;&amp;#8203;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Please read this article on a device with a wide screen, like a desktop or a tablet. I don&amp;#8217;t think it renders well on a mobile phone.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Theo comes to Dave&amp;#8217;s desk to review his implementation of the &quot;list of authors&quot; feature, he asks him about the author that appears in the test of &lt;code&gt;Author.myName&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Who is Yehonathan Sharvit?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I don&amp;#8217;t really know. The name appeared when I googled for &quot;Data-Oriented Programming&quot; yesterday. He wrote a book on the topic. I thought it would be cool to use its ISBN in my test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Does his book present DOP in a similar way to what Joe taught us?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I don&amp;#8217;t know. I guess I&amp;#8217;ll discover when I receive the print book I ordered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few days later, Dave walks to Theo&amp;#8217;s cube holding a package. Dave opens the package and they take a look at the cover together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Wow, that&amp;#8217;s-- that&amp;#8217;s&amp;#8230;&amp;#8203; odd. The woman on the cover - she&amp;#8217;s so familiar. I could swear she&amp;#8217;s the girl my grandparents knew from this Greek island called Santorini. My grandparents were born there, speak often of their childhood friend and have a photo of her. But how could a girl from their little island wind up on the cover of this book?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: That&amp;#8217;s so cool!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave opens the book with Theo looking over his shoulder. They scan the table of contents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: It looks like this books covers all the same topics Joe taught us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This is great!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave leafs through a few random sections. Hi attention is caught by a bit of dialog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Theo, this is so strange!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: The characters in Sharvit&amp;#8217;s book have the same names as ours!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Let me see&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theo turns to a page from the first chapter. He and Dave read this passage side by side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 1&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Hey Dave! How&amp;#8217;s it going?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Today? Not great. I&amp;#8217;m trying to fix a bug in my code! I can&amp;#8217;t understand why the state of my objects always changes. I&amp;#8217;ll figure it out though, I&amp;#8217;m sure. How&amp;#8217;s your day going?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I just finished the design of a system for a new customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Cool! Would it be OK for me to see it? I&amp;#8217;m trying to improve my design skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Sure! I have the diagram on my desk. We can take a look now if you like.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I remember this situation. It was around a year ago just a few weeks after I had joined Albatross.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theo&amp;#8217;s face turns pale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I don&amp;#8217;t feel well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theo gets up to splash cold water on his face. When he comes back, still pale, but in better control of his emotions, he tries to remember the situation described in the first chapter of the book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Was it when I showed you my design for Klafim prototype?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Exactly! I was quite impressed by your class hierachy diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Oh no! Don&amp;#8217;t remind me of that time. The long hours of work on such a complex OOP system gave me nightmares.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I remember it as a fun period. Every week I was learning a new technology: GraphQL, Elasticsearch, DataDog, Bigtable, Spring, Express&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Luckily, I met Joe a few days later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Apropos Joe, you never told me  exactly how you met him.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Well now you&amp;#8217;ll know everything. The meeting is told quite accurately at the beginning of Chapter 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave reads a few lines in the beginning of Chapter 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 2&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next morning, Theo asks on Hacker News and on Reddit for ways to reduce system complexity and build flexible systems. Some folks mention using different programming languages, others talk about advanced design patterns. Finally, Theo&amp;#8217;s attention gets captured by a comment from a user named Joe who mentions &quot;Data-Oriented programming&quot; and claims that its main goal is to reduce system complexity. Theo has never heard this term before. Out of curiosity he decides to contact Joe by email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What a coincidence! Joe lives in San Francisco too. Theo invites him to a meeting in his office.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Joe is a 40-year old developer. He&amp;#8217;d been a Java developer for nearly decade before adopting Clojure around 7 years ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Theo tells Joe about the Library Management System he designed and built, and about his struggles to adapt to changing requirements, Joe is not surprised.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: The book doesn&amp;#8217;t say if it was on Hacker News or on Reddit that Joe you exchanged with Joe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I remember it very well: It was on Reddit. In the &quot;r/clojure&quot; community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While they talk, Dave leafs through the pages of the book, when he comes across a curious passage from Chapter 15&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 15&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I get that. But what happens if the code of the function modifies the data that we are writing. Will we write the original data to the file, or the modified data?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I&amp;#8217;ll let you think about that while I get a cup of coffee at the &lt;strong&gt;museum&lt;/strong&gt; coffee shop. Would you like one?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Yes, an espresso please.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I have a weird sensation of &lt;em&gt;déjà lu&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Me too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Do you know what &lt;em&gt;déjà lu&lt;/em&gt; means?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: No. But it sounds like it&amp;#8217;s related to déjà vu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave and Theo sit quietly, pondering the meaning of &quot;déjà lu&quot; and the bigger puzzle of this weird book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: That&amp;#8217;s it! I think I got the hang of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave shows Theo the result from Google translate with the &quot;Detect language&quot; option activated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: In French, &quot;déjà lu&quot; means &quot;already read&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Do you think that the author is French?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Probably. That would explain some odd turns of phrases I&amp;#8217;ve noticed here and there in the way the characters express themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: But of course! At least we have found a point on which we are not identical to the characters in this book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Anyway, A &lt;em&gt;déjà lu&lt;/em&gt; must be when you live a situation that you have already read in a book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: But I don&amp;#8217;t think we&amp;#8217;ve ever been together at a museum!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Me neither. Could this book be telling not only the past but also the future?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: A future that we will already know when it will happen since we are now reading it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave and Theo together:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8201;&amp;#8212;&amp;#8201;A déjà lu!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 13&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 13&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 9.0909%;&quot;&gt;
&lt;col style=&quot;width: 90.9091%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 13&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Dave! This is freaking me out! I think we should close this book immediately and forget all about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I can&amp;#8217;t. I&amp;#8217;m too curious to discover my future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: You&amp;#8217;ll have to do it without me. Joe told us many times we should never mess up with the state of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Wait! It&amp;#8217;s true that Joe taught us the merits of immutability. But that only concerns the past state of a system. He never said we didn&amp;#8217;t have the right to mutate our future!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: You mean that reading beyond Chapter 13 won&amp;#8217;t necessarily lock us in a predefined scenario?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I hope so!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hoping to stay in control of their destiny, Theo and Dave start reading Chapter 14 of &quot;Data-Oriented Programming&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Please share your thoughts about this self-referential stuff by replying to this &lt;a href=&quot;https://twitter.com/viebel/status/1482899756791836674&quot;&gt;tweet&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy this self-referential stuff in Chapter 13?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Do you think it&amp;#8217;s a good idea to include this self-referential stuff in the book?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;How would you make it better?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">This is an experiment I am doing about introducing a bit of self-referential stuff in Chapter 13 of &quot;Data-Oriented Programming.</summary></entry><entry><title type="html">A hundred things I learned writing my first technical book “Data-Oriented Programming”</title><link href="/book/2021/12/19/100-things-I-learned-with-data-oriented-programming.html" rel="alternate" type="text/html" title="A hundred things I learned writing my first technical book “Data-Oriented Programming”" /><published>2021-12-19T04:01:22+00:00</published><updated>2021-12-19T04:01:22+00:00</updated><id>/book/2021/12/19/100-things-I-learned-with-data-oriented-programming</id><content type="html" xml:base="/book/2021/12/19/100-things-I-learned-with-data-oriented-programming.html">&lt;ol&gt;
  &lt;li&gt;Writing a technical book is much harder than writing blog posts.&lt;/li&gt;
  &lt;li&gt;Writing a blog post is like running a sprint while writing a book is like running a marathon.&lt;/li&gt;
  &lt;li&gt;Writing my first technical book without a publisher would have been a MISSION: IMPOSSIBLE!&lt;/li&gt;
  &lt;li&gt;Each piece of the book content must be clear and interesting. Each part, each chapter, each section, each paragraph, each sentence.&lt;/li&gt;
  &lt;li&gt;“Clear” is more important that “interesting”. If something is not clear to your reader, it cannot be interesting for them.&lt;/li&gt;
  &lt;li&gt;A possible way to make things clear is to go from concrete to abstract.&lt;/li&gt;
  &lt;li&gt;A possible way to make things interesting is to teach the material as a story with fiction characters and a bit of drama.&lt;/li&gt;
  &lt;li&gt;The “why” is more important than the “what”.&lt;/li&gt;
  &lt;li&gt;The “what” is more important than the “how”.&lt;/li&gt;
  &lt;li&gt;An average writer makes the reader think the author is smart. A good writer makes the reader think the reader is smart.&lt;/li&gt;
  &lt;li&gt;A technical book is written for MQRs (Minimal Qualified Readers).&lt;/li&gt;
  &lt;li&gt;Figuring out the qualifications of your MQRs (Minimal Qualified Readers) is important as it allows you to assume what knowledge your readers already have.&lt;/li&gt;
  &lt;li&gt;It’s hard to figure out the qualifications of your MQRs (Minimal Qualified Readers).&lt;/li&gt;
  &lt;li&gt;Checking book sales could be addictive.&lt;/li&gt;
  &lt;li&gt;Making a good Table of Contents is crucial as it is the first part of the book potential readers will encounter.&lt;/li&gt;
  &lt;li&gt;Making a good Table of Contents is hard as you need to figure out what you really want to talk about.&lt;/li&gt;
  &lt;li&gt;The Table of Contents might evolve a bit as you write your book.&lt;/li&gt;
  &lt;li&gt;You should resist the temptation to write the first chapter before the Table of Contents is ready.&lt;/li&gt;
  &lt;li&gt;It’s not necessary to write chapters in order. But it’s easier.&lt;/li&gt;
  &lt;li&gt;Never assume that your readers will read the next chapter only because they have enjoyed the previous chapter.&lt;/li&gt;
  &lt;li&gt;You should always convince your readers why what you are teaching is important and relevant for them.&lt;/li&gt;
  &lt;li&gt;Before writing a chapter, you should formulate to yourself what is the main objective of the chapter.&lt;/li&gt;
  &lt;li&gt;If a chapter has two main objectives, it’s a sign that you should split it into two chapters.&lt;/li&gt;
  &lt;li&gt;A chapter should be treated like a piece of software. You should resist the temptation of writing the chapter contents without a plan.&lt;/li&gt;
  &lt;li&gt;A possible way to make things interesting is to use concrete examples.&lt;/li&gt;
  &lt;li&gt;A possible way to make things clear inside a chapter is to start with the easy stuff and increase the level of difficulty as the chapter goes on.&lt;/li&gt;
  &lt;li&gt;Do not hesitate to highlight sentences that convey an important message.&lt;/li&gt;
  &lt;li&gt;It’s OK to engage in writing a technical book without mastering every topic you want to cover in your book.&lt;/li&gt;
  &lt;li&gt;Writing technical book involves a decent amount of research even if you consider yourself as an expert in the field.&lt;/li&gt;
  &lt;li&gt;Finding attractive but accurate titles to book chapters is an art.&lt;/li&gt;
  &lt;li&gt;You can learn a lot from a failed attempt to write a book, provided that you put your ego aside.&lt;/li&gt;
  &lt;li&gt;If you try to write a Wikipedia article about the topic of your book before it is mentioned by other sources, it will be rejected.&lt;/li&gt;
  &lt;li&gt;It’s possible to write a technical book while keeping your day job as a programmer, provided that you are willing to wake up early or sleep late.&lt;/li&gt;
  &lt;li&gt;Writing a technical book takes between a year and two.&lt;/li&gt;
  &lt;li&gt;Don’t rush! Enjoy the journey…&lt;/li&gt;
  &lt;li&gt;It makes lot of sense to use a source control software for your manuscript.&lt;/li&gt;
  &lt;li&gt;AsciiDoc rocks!&lt;/li&gt;
  &lt;li&gt;PlantUML rocks!&lt;/li&gt;
  &lt;li&gt;NeoVim rocks!&lt;/li&gt;
  &lt;li&gt;Using a tool - like PlantUML - that generates diagrams from text makes it easy to refactor multiple diagrams at once (e.g rename a label, change a color).&lt;/li&gt;
  &lt;li&gt;People on Reddit could feel hurt by opinions that take them out of their comfort zone.&lt;/li&gt;
  &lt;li&gt;On Reddit, when people feel hurt, they could become violent.&lt;/li&gt;
  &lt;li&gt;Being mentored by an experienced writer is a blessing.&lt;/li&gt;
  &lt;li&gt;If you are lucky enough to be mentored by an experienced writer, ask them to be hard with you. That’s how you are going to improve your book!&lt;/li&gt;
  &lt;li&gt;A good technical reviewer is a representative of your MQRs (Minimal Qualified Readers). They can tell you upfront is something is going to be unclear to your readers.&lt;/li&gt;
  &lt;li&gt;You should make sure your readers will never frown while reading your book.&lt;/li&gt;
  &lt;li&gt;A project manager that pays attention to the details is important.&lt;/li&gt;
  &lt;li&gt;Your publisher is your partner.&lt;/li&gt;
  &lt;li&gt;You could make more dollars per copy by self-publishing but you’d probably sell much less copies.&lt;/li&gt;
  &lt;li&gt;Asking early feedback from external reviewers is a great source of improvement.&lt;/li&gt;
  &lt;li&gt;Releasing an early version of the book (approx. when the first third is ready) allows you to find out if the topic of your book is interesting.&lt;/li&gt;
  &lt;li&gt;Finding a good book title is hard.&lt;/li&gt;
  &lt;li&gt;Finding a good book subtitle is even harder.&lt;/li&gt;
  &lt;li&gt;You need to be very careful not to hurt the sensitivity of any of your readers.&lt;/li&gt;
  &lt;li&gt;Having your book featured on HackerNews home page does not mean selling lots of copies.&lt;/li&gt;
  &lt;li&gt;Twitter is a great medium to share ideas from your book.&lt;/li&gt;
  &lt;li&gt;Writing a book could sometimes take you to flow.&lt;/li&gt;
  &lt;li&gt;My real motivation for writing a book was neither to be famous nor to be rich. I only wanted to accomplish a child’s dream.&lt;/li&gt;
  &lt;li&gt;It’s hard to find your voice.&lt;/li&gt;
  &lt;li&gt;Once you have found the your voice, the writing flows much better.&lt;/li&gt;
  &lt;li&gt;Usually readers stop reading after reading the middle of the book. If you want them to read the second half of your book, you need to find a way to hook them.&lt;/li&gt;
  &lt;li&gt;A possible way to hook your readers is to tell a story.&lt;/li&gt;
  &lt;li&gt;Inspiration is not linear. It’s OK to stop writing for a couple of hours.&lt;/li&gt;
  &lt;li&gt;Motivation is not linear. It’s OK to stop writing for a couple of weeks.&lt;/li&gt;
  &lt;li&gt;Be open to critics - even when they hurt your ego.&lt;/li&gt;
  &lt;li&gt;The more you write, the more you like it.&lt;/li&gt;
  &lt;li&gt;It’s safe to assume that every developer can read JavaScript.&lt;/li&gt;
  &lt;li&gt;It’s a great feeling to mention the work of other authors.&lt;/li&gt;
  &lt;li&gt;You should make sure that each and every code snippet - that appears in your book - runs as expected.&lt;/li&gt;
  &lt;li&gt;Invoking “it’s so obvious I don’t need to explain it” is not an acceptable argument.&lt;/li&gt;
  &lt;li&gt;Writing your teaching materials as a dialogue between an imaginary expert and a imaginary novice is a very useful process in order to figure out what questions your materials might raise in your reader’s mind.&lt;/li&gt;
  &lt;li&gt;Sometimes the questions that an imaginary novice would ask about the stuff you teach would be tough. Don’t ignore them. It’s an opportunity to make your book better.&lt;/li&gt;
  &lt;li&gt;Rewriting a chapter from scratch because you forgot to save your work could be a blessing as writing from scratch might lead to a material of higher quality.&lt;/li&gt;
  &lt;li&gt;Writing in a coffee shop makes me feel like a famous author, but in fact I am much more productive at home.&lt;/li&gt;
  &lt;li&gt;Writing a preface - after the whole manuscript is ready - is really a pleasure!&lt;/li&gt;
  &lt;li&gt;You should think about the way your contents is going to appear on the paper. Use headlines, highlights, call outs and diagrams to make sure it doesn’t look boring.&lt;/li&gt;
  &lt;li&gt;Resist the temptation to impress your readers with “cool stuff” if you think it might confuse them.&lt;/li&gt;
  &lt;li&gt;Working on your book is a good reason to wake up early. Sometimes, before sunrise (even in summer!).&lt;/li&gt;
  &lt;li&gt;Include at least 2 or 3 diagrams in every chapter. It makes the material fun to read and easier to grasp.&lt;/li&gt;
  &lt;li&gt;Draw your diagrams on a sheet of paper before using drawing software.&lt;/li&gt;
  &lt;li&gt;It’s OK to use colors in diagrams for the online version of the book. But remember that the print version of the book will be not be in color.&lt;/li&gt;
  &lt;li&gt;Mind maps are a great visualization tool. Use them smartly.&lt;/li&gt;
  &lt;li&gt;When a section is more difficult to read than the others, let your readers know about it.&lt;/li&gt;
  &lt;li&gt;When a section is more difficult to read than the others, make it skippable.&lt;/li&gt;
  &lt;li&gt;It’s OK - from time to time - to copy-paste a diagram in order to save from your readers the need to flip back.&lt;/li&gt;
  &lt;li&gt;Asking a friend or a colleague to read your work in progress is not a productive idea. The best feedback comes from people you don’t know.&lt;/li&gt;
  &lt;li&gt;Brainstorming with a friend or a colleague about a difficulty you encounter might be a productive idea.&lt;/li&gt;
  &lt;li&gt;Throwing away some (good) ideas is sometimes necessary. Not easy but necessary.&lt;/li&gt;
  &lt;li&gt;When you are blocked in the middle of a chapter, it might be a sign that you need to rethink the chapter.&lt;/li&gt;
  &lt;li&gt;When you are blocked in the middle of a chapter, it might be a sign that you need to rest and come back later.&lt;/li&gt;
  &lt;li&gt;Adapting parts of your book to blog posts could be a good idea. But you need to resist the temptation of copy-pasting verbatim as the blog posts will be without the context of the book.&lt;/li&gt;
  &lt;li&gt;It feels great when someone with lots of followers tweets about the fun they had reading your book.&lt;/li&gt;
  &lt;li&gt;Don’t worry if your English is not perfect. Your manuscript will be proofread later.&lt;/li&gt;
  &lt;li&gt;“Not being a native English speaker” is not an excuse for your lack of clarity.&lt;/li&gt;
  &lt;li&gt;Writing an appendix is much easier than writing a chapter.&lt;/li&gt;
  &lt;li&gt;Using humour in a technical book is possible. Hopefully, it’s well appreciated.&lt;/li&gt;
  &lt;li&gt;You should write the chapter introduction after all the other parts of the chapter are written.&lt;/li&gt;
  &lt;li&gt;Getting positive feedback - even from people who are easily enthusiastic - feels good.&lt;/li&gt;
  &lt;li&gt;Front matter is the last part an author writes.&lt;/li&gt;
  &lt;li&gt;Writing a hundred things you learned from writing a technical book is not as difficult as it may seem.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><category term="book" /><category term="dop" /><category term="theory" /><summary type="html">Writing a technical book is much harder than writing blog posts. Writing a blog post is like running a sprint while writing a book is like running a marathon. Writing my first technical book without a publisher would have been a MISSION: IMPOSSIBLE! Each piece of the book content must be clear and interesting. Each part, each chapter, each section, each paragraph, each sentence. “Clear” is more important that “interesting”. If something is not clear to your reader, it cannot be interesting for them. A possible way to make things clear is to go from concrete to abstract. A possible way to make things interesting is to teach the material as a story with fiction characters and a bit of drama. The “why” is more important than the “what”. The “what” is more important than the “how”. An average writer makes the reader think the author is smart. A good writer makes the reader think the reader is smart. A technical book is written for MQRs (Minimal Qualified Readers). Figuring out the qualifications of your MQRs (Minimal Qualified Readers) is important as it allows you to assume what knowledge your readers already have. It’s hard to figure out the qualifications of your MQRs (Minimal Qualified Readers). Checking book sales could be addictive. Making a good Table of Contents is crucial as it is the first part of the book potential readers will encounter. Making a good Table of Contents is hard as you need to figure out what you really want to talk about. The Table of Contents might evolve a bit as you write your book. You should resist the temptation to write the first chapter before the Table of Contents is ready. It’s not necessary to write chapters in order. But it’s easier. Never assume that your readers will read the next chapter only because they have enjoyed the previous chapter. You should always convince your readers why what you are teaching is important and relevant for them. Before writing a chapter, you should formulate to yourself what is the main objective of the chapter. If a chapter has two main objectives, it’s a sign that you should split it into two chapters. A chapter should be treated like a piece of software. You should resist the temptation of writing the chapter contents without a plan. A possible way to make things interesting is to use concrete examples. A possible way to make things clear inside a chapter is to start with the easy stuff and increase the level of difficulty as the chapter goes on. Do not hesitate to highlight sentences that convey an important message. It’s OK to engage in writing a technical book without mastering every topic you want to cover in your book. Writing technical book involves a decent amount of research even if you consider yourself as an expert in the field. Finding attractive but accurate titles to book chapters is an art. You can learn a lot from a failed attempt to write a book, provided that you put your ego aside. If you try to write a Wikipedia article about the topic of your book before it is mentioned by other sources, it will be rejected. It’s possible to write a technical book while keeping your day job as a programmer, provided that you are willing to wake up early or sleep late. Writing a technical book takes between a year and two. Don’t rush! Enjoy the journey… It makes lot of sense to use a source control software for your manuscript. AsciiDoc rocks! PlantUML rocks! NeoVim rocks! Using a tool - like PlantUML - that generates diagrams from text makes it easy to refactor multiple diagrams at once (e.g rename a label, change a color). People on Reddit could feel hurt by opinions that take them out of their comfort zone. On Reddit, when people feel hurt, they could become violent. Being mentored by an experienced writer is a blessing. If you are lucky enough to be mentored by an experienced writer, ask them to be hard with you. That’s how you are going to improve your book! A good technical reviewer is a representative of your MQRs (Minimal Qualified Readers). They can tell you upfront is something is going to be unclear to your readers. You should make sure your readers will never frown while reading your book. A project manager that pays attention to the details is important. Your publisher is your partner. You could make more dollars per copy by self-publishing but you’d probably sell much less copies. Asking early feedback from external reviewers is a great source of improvement. Releasing an early version of the book (approx. when the first third is ready) allows you to find out if the topic of your book is interesting. Finding a good book title is hard. Finding a good book subtitle is even harder. You need to be very careful not to hurt the sensitivity of any of your readers. Having your book featured on HackerNews home page does not mean selling lots of copies. Twitter is a great medium to share ideas from your book. Writing a book could sometimes take you to flow. My real motivation for writing a book was neither to be famous nor to be rich. I only wanted to accomplish a child’s dream. It’s hard to find your voice. Once you have found the your voice, the writing flows much better. Usually readers stop reading after reading the middle of the book. If you want them to read the second half of your book, you need to find a way to hook them. A possible way to hook your readers is to tell a story. Inspiration is not linear. It’s OK to stop writing for a couple of hours. Motivation is not linear. It’s OK to stop writing for a couple of weeks. Be open to critics - even when they hurt your ego. The more you write, the more you like it. It’s safe to assume that every developer can read JavaScript. It’s a great feeling to mention the work of other authors. You should make sure that each and every code snippet - that appears in your book - runs as expected. Invoking “it’s so obvious I don’t need to explain it” is not an acceptable argument. Writing your teaching materials as a dialogue between an imaginary expert and a imaginary novice is a very useful process in order to figure out what questions your materials might raise in your reader’s mind. Sometimes the questions that an imaginary novice would ask about the stuff you teach would be tough. Don’t ignore them. It’s an opportunity to make your book better. Rewriting a chapter from scratch because you forgot to save your work could be a blessing as writing from scratch might lead to a material of higher quality. Writing in a coffee shop makes me feel like a famous author, but in fact I am much more productive at home. Writing a preface - after the whole manuscript is ready - is really a pleasure! You should think about the way your contents is going to appear on the paper. Use headlines, highlights, call outs and diagrams to make sure it doesn’t look boring. Resist the temptation to impress your readers with “cool stuff” if you think it might confuse them. Working on your book is a good reason to wake up early. Sometimes, before sunrise (even in summer!). Include at least 2 or 3 diagrams in every chapter. It makes the material fun to read and easier to grasp. Draw your diagrams on a sheet of paper before using drawing software. It’s OK to use colors in diagrams for the online version of the book. But remember that the print version of the book will be not be in color. Mind maps are a great visualization tool. Use them smartly. When a section is more difficult to read than the others, let your readers know about it. When a section is more difficult to read than the others, make it skippable. It’s OK - from time to time - to copy-paste a diagram in order to save from your readers the need to flip back. Asking a friend or a colleague to read your work in progress is not a productive idea. The best feedback comes from people you don’t know. Brainstorming with a friend or a colleague about a difficulty you encounter might be a productive idea. Throwing away some (good) ideas is sometimes necessary. Not easy but necessary. When you are blocked in the middle of a chapter, it might be a sign that you need to rethink the chapter. When you are blocked in the middle of a chapter, it might be a sign that you need to rest and come back later. Adapting parts of your book to blog posts could be a good idea. But you need to resist the temptation of copy-pasting verbatim as the blog posts will be without the context of the book. It feels great when someone with lots of followers tweets about the fun they had reading your book. Don’t worry if your English is not perfect. Your manuscript will be proofread later. “Not being a native English speaker” is not an excuse for your lack of clarity. Writing an appendix is much easier than writing a chapter. Using humour in a technical book is possible. Hopefully, it’s well appreciated. You should write the chapter introduction after all the other parts of the chapter are written. Getting positive feedback - even from people who are easily enthusiastic - feels good. Front matter is the last part an author writes. Writing a hundred things you learned from writing a technical book is not as difficult as it may seem.</summary></entry><entry><title type="html">Data-Oriented Programming: A link in the chain of programming paradigms</title><link href="/databook/2021/12/10/dop-link.html" rel="alternate" type="text/html" title="Data-Oriented Programming: A link in the chain of programming paradigms" /><published>2021-12-10T04:45:32+00:00</published><updated>2021-12-10T04:45:32+00:00</updated><id>/databook/2021/12/10/dop-link</id><content type="html" xml:base="/databook/2021/12/10/dop-link.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data-Oriented Programming is not an invention. It has its &lt;strong&gt;origins&lt;/strong&gt; in the 1950s and the invention of LISP and is based on a set of &lt;strong&gt;best practices&lt;/strong&gt; that can be found in both Functional Programming and Object-Oriented Programming. However, this paradigm has only been applicable in production systems at scale since the 2010s and the implementation of &lt;strong&gt;efficient&lt;/strong&gt; persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article traces the major &lt;strong&gt;ideas&lt;/strong&gt; and &lt;strong&gt;discoveries&lt;/strong&gt; which, over the years, have allowed the emergence of DOP.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/dop-timeline.png&quot; alt=&quot;dop timeline&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1958-lisp&quot;&gt;1958: LISP&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In LISP, John McCarthy has the ingenious idea to represent &lt;strong&gt;data&lt;/strong&gt; as &lt;strong&gt;generic immutable lists&lt;/strong&gt; and to invent a language that makes it very &lt;strong&gt;natural&lt;/strong&gt; to create lists and to access any part of a list. That&amp;#8217;s the reason why LISP stands for LISt Processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In as sense, LISP lists are the ancestors of JavaScript object literals. The idea that it makes sense to represent data with generic data structures (DOP Principle #2) definitely comes from LISP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main limitation of LISP lists is that when we update a list, we need to create a new version of it by cloning it and it has a negative impact on &lt;strong&gt;performances&lt;/strong&gt; both in terms of CPU and memory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1981-values-and-objects&quot;&gt;1981: Values and Objects&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a beautiful, short and easy-to-read paper named &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;, Bruce MacLennan clarifies the distinction between &lt;strong&gt;values&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. In a nutshell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Values are &lt;strong&gt;timeless&lt;/strong&gt; abstractions for which the concepts of &lt;strong&gt;updating&lt;/strong&gt;, &lt;strong&gt;sharing&lt;/strong&gt; and &lt;strong&gt;instantiation&lt;/strong&gt; have no meaning. For instance, numbers are values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects exist in &lt;strong&gt;time&lt;/strong&gt; and hence can be &lt;strong&gt;created&lt;/strong&gt;, &lt;strong&gt;destroyed&lt;/strong&gt;, &lt;strong&gt;copied&lt;/strong&gt;, &lt;strong&gt;shared&lt;/strong&gt; and &lt;strong&gt;updated&lt;/strong&gt;. For instance, an employee in a human resource software system is an object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The meaning of the term &lt;em&gt;object&lt;/em&gt; in this paper is not exactly the same as in the context of Object-Oriented Programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The author explains why it&amp;#8217;s much simpler to write code that deals with values than code that deals with objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This paper has been a source of inspiration for Data-Oriented Programming as it encourages us to implement our systems in such a way that most of our code deals with values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2000-ideal-hash-trees&quot;&gt;2000: Ideal Hash Trees&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Phil Bagwell invented a data structure called Hash Array Mapped Trie (HAMT). In his paper &lt;a href=&quot;https://lampwww.epfl.ch/papers/idealhashtrees.pdf&quot;&gt;Ideal Hash trees&lt;/a&gt;, he used HAMT to implement hash maps with nearly ideal characteristics both in terms of &lt;strong&gt;computation&lt;/strong&gt; and &lt;strong&gt;memory&lt;/strong&gt; usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HAMT and Ideal hash trees are the foundation of &lt;strong&gt;efficient persistent data structures&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2006-out-of-the-tar-pit&quot;&gt;2006: Out of the Tar Pit&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.semanticscholar.org/paper/Out-of-the-Tar-Pit-Moseley-Marks/41dc590506528e9f9d7650c235b718014836a39d&quot;&gt;Out of the Tar Pit&lt;/a&gt;, Ben Moseley and Peter Marks claim that &lt;strong&gt;complexity&lt;/strong&gt; is the single major difficulty in the development of large-scale software systems. In the context of their paper, complexity means what make a system &lt;strong&gt;hard to understand&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main insight of the authors is that most of the complexity of software systems in not essential but &lt;strong&gt;accidental&lt;/strong&gt;: the complexity doesn&amp;#8217;t come from the problem we have to solve but from the software constructs we use to solve the problem. They suggest various ways to &lt;strong&gt;reduce complexity&lt;/strong&gt; of software systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a sense, Data-Oriented Programming is a way to get us out of the tar pit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2007-clojure&quot;&gt;2007: Clojure&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rich Hickey, an &lt;strong&gt;Object-Oriented&lt;/strong&gt; Programming expert, invented &lt;strong&gt;Clojure&lt;/strong&gt; to make it easier to develop information systems at scale. Rich Hickey likes to summarize Clojure core value with the phrase: &lt;strong&gt;&quot;Just use maps!&quot;&lt;/strong&gt;. By maps, he means &lt;strong&gt;immutable&lt;/strong&gt; maps to be manipulated &lt;strong&gt;efficiently&lt;/strong&gt; by &lt;strong&gt;generic&lt;/strong&gt; functions. Those maps were implemented using the data structures presented by Phil Bagwell in &quot;Ideal Hash Trees&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure has been the main source of inspiration for Data-Oriented Programming. In a sense, Data-Oriented Programming is a formalization of the underlying principles of Clojure and how to apply them in other programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2009-immutability-for-all&quot;&gt;2009: Immutability for all&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure&amp;#8217;s &lt;strong&gt;efficient&lt;/strong&gt; implementation of &lt;strong&gt;persistent data structures&lt;/strong&gt; has been attractive for developers from other programming languages. In 2009, there were ported to Scala. Over the years, they have been &lt;strong&gt;ported&lt;/strong&gt; to other &lt;strong&gt;programming languages&lt;/strong&gt; either by organizations (like Facebook for Immutable.js) or by individual contributors (like Glen Peterson for Paguro in Java).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays, DOP is applicable in virtually any programming language!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dop-principles-as-best-practices&quot;&gt;DOP principles as best practices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;/databook/2020/09/29/do-principles.html&quot;&gt;principles of Data-Oriented programming are not new&lt;/a&gt;. They come from &lt;strong&gt;best practices&lt;/strong&gt; that are well-known among software developers from various programming languages. The &lt;em&gt;innovation&lt;/em&gt; of Data-Oriented programming is the combination of those principles into a cohesive whole.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section, we put each one of the 4 DOP principles into its broader scope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-1-separate-code-from-data&quot;&gt;Principle #1: Separate code from data&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating code from data used to be the main point of &lt;strong&gt;tension&lt;/strong&gt; between &lt;strong&gt;Object-Oriented&lt;/strong&gt; Programming (OOP) and &lt;strong&gt;Functional&lt;/strong&gt; Programming (FP). Traditionally, in OOP we &lt;strong&gt;encapsulate&lt;/strong&gt; data together with code in &lt;strong&gt;stateful&lt;/strong&gt; objects, while in FP we write &lt;strong&gt;stateless&lt;/strong&gt; functions that receive data they manipulate as an &lt;strong&gt;explicit&lt;/strong&gt; argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tension has been reduced over the years as it is possible in FP to write stateful functions with data encapsulated in their &lt;a href=&quot;https://en.wikipedia.org/wiki/Scope_computer_science&quot;&gt;lexical scope&lt;/a&gt;. Moreover, OOP languages like Java and C# have added support for &lt;strong&gt;anonymous functions&lt;/strong&gt; (lambdas).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-2-represent-data-with-generic-data-structures&quot;&gt;Principle #2: Represent data with generic data structures&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the main innovation of &lt;strong&gt;JavaScript&lt;/strong&gt; when it was released in December 1995 was the &lt;strong&gt;easiness&lt;/strong&gt; to create and manipulate hash maps via &lt;strong&gt;object literals&lt;/strong&gt;. The increasing &lt;strong&gt;popularity&lt;/strong&gt; of JavaScript over the years as a language used everywhere (frontend, backend, desktop) has influenced the developer community to represent data with hash maps when possible. It feels more natural in &lt;strong&gt;dynamically-typed&lt;/strong&gt; programming languages, it is applicable also in &lt;strong&gt;statically-typed&lt;/strong&gt; programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-3-data-is-immutable&quot;&gt;Principle #3: Data is immutable&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data immutability is considered as a best practice as it makes the behaviour of our program more &lt;strong&gt;predictable&lt;/strong&gt;. For instance, in &lt;a href=&quot;https://www.oreilly.com/library/view/effective-java/9780134686097&quot;&gt;Effective Java&lt;/a&gt;, Joshua Block mentions &quot;Minimize mutability&quot; as one of Java best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a famous quote from Alan Kay - who is considered by many as the inventor of Object-Oriented Programming - about the value of immutability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing you wanted any programmer to do is mess with internal state even if presented figuratively. Instead, the objects should be presented as site of higher level behaviors more appropriate for use as dynamic components. (&amp;#8230;&amp;#8203;) It is unfortunate that much of what is called &quot;object-oriented programming&quot; today is simply old style programming with fancier constructs. Many programs are loaded with &quot;assignment-style&quot; operations now done by more expensive attached procedures.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, until 2007 and the implementation of efficient persistent data structures in Clojure, immutability was not applicable for production applications at scale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays, efficient persistent data structures are available in most programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Language&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Library&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/GlenKPeterson/Paguro&quot;&gt;Paguro&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;C#&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/archive/msdn-magazine/2017/march/net-framework-immutable-collections&quot;&gt;Provided by the language&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JavaScript&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://immutable-js.com/&quot;&gt;Immutable.js&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Python&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/tobgu/pyrsistent&quot;&gt;Pyrsistent&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ruby&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/hamstergem/hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that, many languages provide support for &lt;strong&gt;read-only&lt;/strong&gt; objects natively. Java added  &lt;a href=&quot;https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Record.html&quot;&gt;record classes&lt;/a&gt; in Java 14. C# introduced a &lt;code&gt;record&lt;/code&gt; type in C# 9. There is a (&lt;a href=&quot;https://github.com/tc39/proposal-record-tuple)&quot;&gt;ECMAScript proposal) for supporting immutable records and tuples in JavaScript . Python 3.7 introduced https://docs.python.org/3/library/dataclasses.html[Immutable data classes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-4-separate-data-schema-from-data-representation&quot;&gt;Principle #4: Separate data schema from data representation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the more virulent &lt;strong&gt;critics&lt;/strong&gt; against dynamically-typed programming languages used to be related to the lack of data validation. The answer that dynamically-typed languages used to give to this critics was that you trade data &lt;strong&gt;safety&lt;/strong&gt; for data &lt;strong&gt;flexibility&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the development of &lt;strong&gt;data schema&lt;/strong&gt; languages like &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt;, it is natural to validate data even when data is represented as hash maps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we have explored the &lt;strong&gt;ideas&lt;/strong&gt; that inspired Data-Oriented Programming and the &lt;strong&gt;discoveries&lt;/strong&gt; that made it applicable in production systems at &lt;strong&gt;scale&lt;/strong&gt; in most programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">This article is an excerpt from my book about Data-Oriented Programming. More excerpts are available on my blog.</summary></entry><entry><title type="html">Polymorphism without objects via multimethods</title><link href="/javascript/2021/10/03/multimethod.html" rel="alternate" type="text/html" title="Polymorphism without objects via multimethods" /><published>2021-10-03T23:54:21+00:00</published><updated>2021-10-03T23:54:21+00:00</updated><id>/javascript/2021/10/03/multimethod</id><content type="html" xml:base="/javascript/2021/10/03/multimethod.html">&lt;p&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt; is well known for allowing different classes to be called with the same interface, via a mechanism called &lt;strong&gt;polymorphism&lt;/strong&gt;. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have &lt;strong&gt;polymorphism without objects&lt;/strong&gt; via &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, multimethods provide more advanced polymorphism than OOP polymorphism as they support cases where the chosen implementation depends on several argument types (multiple dispatch) and even on the dynamic value of the arguments (dynamic dispatch).&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mimicking objects with multimethods (Single dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend on several argument types (Multiple dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend dynamically on several arguments (Dynamic dispatch)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-essence-of-polymorphism&quot;&gt;The essence of polymorphism&lt;/h1&gt;

&lt;p&gt;In OOP, &lt;strong&gt;polymorphism&lt;/strong&gt; is about defining an &lt;strong&gt;interface&lt;/strong&gt; and having &lt;strong&gt;different classes&lt;/strong&gt; that implement the same interface in different ways.&lt;/p&gt;

&lt;p&gt;Let’s illustrate polymorphism with an adaptation of the classic OOP polymorphism example: animal greetings. Let’s say that our animals are &lt;strong&gt;anthropomorphic&lt;/strong&gt; and each of them has its own way to greet, by emitting its preferred sound and telling its name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anthropomorphism&lt;/em&gt; is our first word that comes from the Greek: it comes from the Greek &lt;em&gt;ánthrōpos&lt;/em&gt; that means &lt;em&gt;human&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it’s our second word that comes from the Greek. The first one was &lt;em&gt;polymorphism&lt;/em&gt; coming from the Greek &lt;em&gt;polús&lt;/em&gt; that means &lt;em&gt;many&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;. Polymorphism is the ability of different objects to implement in different ways the same method.&lt;/p&gt;

&lt;p&gt;In Java, for instance, we’d define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAnimal&lt;/code&gt; interface with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; method and each animal class would implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; in its own way, like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Woof woof! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Meow! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cow&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Moo! Call me &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s ask ourselves: what is the &lt;strong&gt;fundamental&lt;/strong&gt; difference between OOP polymorphism and a &lt;strong&gt;naive switch statement&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Let me tell you what I mean by a naive switch statement. We could, as &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; recommends, represent an animal with a &lt;strong&gt;map&lt;/strong&gt; having two &lt;strong&gt;fields&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and call a different piece of code depending on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
break;
case &quot;cat&quot;:
console.log(&quot;Meow! I am: &quot; + animal.name);
break;
case &quot;cow&quot;:
console.log(&quot;Moo! Call me &quot; + animal.name);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes me think that we have not yet met our animals. For no further due, I am happy to present our heroes: Fido, Milo and Clarabelle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fido-milo-clarabelle.jpg&quot; alt=&quot;Fido&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myDog = {
&quot;type&quot;: &quot;dog&quot;,
&quot;name&quot;: &quot;Fido&quot;
};
var myCat = {
&quot;type&quot;: &quot;cat&quot;,
&quot;name&quot;: &quot;Milo&quot;
};
var myCow = {
&quot;type&quot;: &quot;cow&quot;,
&quot;name&quot;: &quot;Clarabelle&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first difference between &lt;strong&gt;OOP polymorphism&lt;/strong&gt; and our &lt;strong&gt;switch statement&lt;/strong&gt; is that, if we pass an invalid map to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; function, bad things will happen.&lt;/p&gt;

&lt;p&gt;We could easily fix that by validating input data using &lt;a href=&quot;/javascript/2021/09/30/data-validation-with-json-schema.html&quot;&gt;JSON Schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another drawback of the switch statement approach is that when you want to &lt;strong&gt;modify&lt;/strong&gt; the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; for a specific animal, you have to change the code that deals with all the animals, While in the OOP approach, we have to change only a specific animal class.&lt;/p&gt;

&lt;p&gt;This could also be easily fixed by having a &lt;strong&gt;separate function&lt;/strong&gt; for each animal, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am: &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
greetDog(animal);
break;
case &quot;cat&quot;:
greetCat(animal);
break;
case &quot;cow&quot;:
greetCow(animal);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you want to &lt;strong&gt;extend&lt;/strong&gt; the functionality of greet and add a new animal?&lt;/p&gt;

&lt;p&gt;Now, we got to the &lt;strong&gt;essence&lt;/strong&gt; of polymorphism! With a switch statement, we cannot add a new animal without modifying the original code, while in OOP we can add a new class without having to modify the original code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main benefit of polymorphism is that it makes the code easily extensible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I have a surprise for you: We don’t need objects to make our code easily extensible. This is what we call: &lt;strong&gt;polymorphism without objects&lt;/strong&gt;. And it is possible with &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;multimethods-with-single-dispatch&quot;&gt;Multimethods with single dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethod&lt;/strong&gt; is a software construct that provides &lt;strong&gt;polymorphism&lt;/strong&gt; without the need for objects.&lt;/p&gt;

&lt;p&gt;Multimethods are made of two pieces:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a &lt;strong&gt;dispatched value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A set of &lt;strong&gt;methods&lt;/strong&gt; that provide an &lt;strong&gt;implementation&lt;/strong&gt; for each dispatched value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dispatch function is similar to an interface in the sense that it defines the way the function needs to be called. But it goes beyond that as it also dispatches a value that differentiates between the different implementations.&lt;/p&gt;

&lt;p&gt;Let me show illustrate how I would implement the animal greeting capabilities using a multimethod called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. We need a dispatch function and 3 methods. Let’s call the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it dispatches the animal type, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And each dispatch value is handled by a specific method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram, there is an arrow between animal and the methods in addition to the arrow between animal and the dispatch function because the arguments of a multimethod are passed to the dispatch function and to the methods.&lt;/p&gt;

&lt;p&gt;For now, our multimethod receives a single argument. But in the next section, it will receive several arguments.&lt;/p&gt;

&lt;p&gt;Let’s see how a multimethod looks like in terms of code. For that, we need a library. For instance, in JavaScript using a library named &lt;a href=&quot;https://github.com/caderek/arrows/tree/master/packages/multimethod&quot;&gt;arrows/multimethod&lt;/a&gt;, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi&lt;/code&gt; to create a multimethod and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; to create a method.&lt;/p&gt;

&lt;p&gt;We start the definition of a multimethod by declaring its &lt;strong&gt;dispatch function&lt;/strong&gt;. In our case, the dispatch function emits the type of the animal as the dispatched value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greet = multi(animal =&amp;gt; animal.type);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we need a method for each dispatch value. In our case, we’ll have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt; for dogs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt; for cats and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt; for cows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
greet = method(&quot;dog&quot;, greetDog)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetCat(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
greet = method(&quot;cat&quot;, greetCat)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
greet = method(&quot;cow&quot;, greetCow)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important to notice that each method declaration could live in its own file. That’s how multimethods provide &lt;strong&gt;extensibility&lt;/strong&gt;: We are free to add new methods without having to modify the original implementation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Method declarations are decoupled from the multimethod initialization&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under the hood, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrows/multimethod&lt;/code&gt; library maintains a &lt;strong&gt;hash map&lt;/strong&gt;, where the keys correspond to the values emitted by the dispatch function and the values are the methods. When you call the multimethod, the library queries the hash map to find the implementation that corresponds to the dispatched value.&lt;/p&gt;

&lt;p&gt;In terms of usage, we call a multimethod as a regular function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myCow);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if by mistake we pass an animal that doesn’t have a corresponding method, we get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt; exception:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myHorse = {
&quot;type&quot;: &quot;horse&quot;,
&quot;name&quot;: &quot;Horace&quot;
};
greet(myHorse);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless you can declare a &lt;strong&gt;default method&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function defaultGreet(animal) {
    console.log(&quot;My name is &quot; + animal.name);
}
greet = method(defaultGreet)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our horse can greet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myHorse);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-multiple-dispatch&quot;&gt;Multimethods with multiple dispatch&lt;/h1&gt;

&lt;p&gt;So far, we have mimicked OOP by having as a dispatch value the type of the multimethod argument. But if you think again about the flow of a multimethod, you will discover something interesting: in fact the dispatch function could emit any value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod.png&quot; alt=&quot;multi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, we could emit the type of two arguments!&lt;/p&gt;

&lt;p&gt;Imagine that our animals are &lt;strong&gt;polyglot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Polyglot&lt;/em&gt; comes from the Greek &lt;em&gt;polús&lt;/em&gt; meaning &lt;em&gt;much&lt;/em&gt; and &lt;em&gt;glôssa&lt;/em&gt; meaning &lt;em&gt;language&lt;/em&gt;. A polyglot is a person speaking many languages.&lt;/p&gt;

&lt;p&gt;Let’s say our animals speak English and French.&lt;/p&gt;

&lt;p&gt;We represent a language like we represent an animal, with a map having two fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var french = {
&quot;type&quot;: &quot;fr&quot;,
&quot;name&quot;: &quot;Français&quot;
};
var english = {
&quot;type&quot;: &quot;en&quot;,
&quot;name&quot;: &quot;English&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s write the code for the &lt;strong&gt;dispatch function&lt;/strong&gt; and the &lt;strong&gt;methods&lt;/strong&gt; for our polyglot animals. Let’s call our multimethod: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetLang&lt;/code&gt;. We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one dispatch function&lt;/li&gt;
  &lt;li&gt;6 methods: 3 animals (dog, cat, cow) times 2 languages (en, fr).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before the implementation I’d like to draw a flow diagram. It will help me to make things crystal clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal-polyglot.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I omitted the arrow between the arguments and the methods in order to keep the diagram readable. Otherwise there would be too many arrows.&lt;/p&gt;

&lt;p&gt;The dispatch function is going to return an array with two elements: the type of the animal and the type of the language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greetLang = multi((animal, language) =&amp;gt; [animal.type, language.type]);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A dispatch function could emit any value. It gives us more flexibility than with OOP polymorphism&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The order of the elements in the array It doesn’t matter but it needs to be consistent with the wiring of the methods.&lt;/p&gt;

&lt;p&gt;Now, let’s implement the 6 methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogEn(animal, language) {
console.log(&quot;Woof woof! My name is &quot; + animal.name + &quot; and I speak &quot; +
language.name);
}
greetLang = method([&quot;dog&quot;, &quot;en&quot;], greetLangDogEn)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogFr(animal, language) {
console.log(&quot;Ouaf Ouaf! Mon nom est &quot; + animal.name + &quot; et je parle &quot; +
language.name);
}
greetLang = method([&quot;dog&quot;, &quot;fr&quot;], greetLangDogFr)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCatEn(animal, language) {
console.log(&quot;Meow! I am &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
greetLang = method([&quot;cat&quot;, &quot;en&quot;], greetLangCatEn)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCatFr(animal, language) {
console.log(&quot;Miaou! Je m'appelle &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
greetLang = method([&quot;cat&quot;, &quot;fr&quot;], greetLangCatFr)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCowEn(animal, language) {
console.log(&quot;Moo! Call me &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
greetLang = method([&quot;cow&quot;, &quot;en&quot;], greetLangCowEn)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCowFr(animal, language) {
console.log(&quot;Meuh! Appelle moi &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
greetLang = method([&quot;cow&quot;, &quot;fr&quot;], greetLangCowFr)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a closer look at the code for the methods that deal with French and tell me if you are surprised to see “Ouaf Ouaf”
instead of “Woof Woof” for dogs, “Miaou” instead of “Meow” for cats and “Meuh” instead of “Moo” for cows. I find it funny that that animal &lt;strong&gt;onomatopoeia&lt;/strong&gt; are different in French than in English!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Onomatopoeia&lt;/em&gt; comes also from the Greek: &lt;em&gt;ónoma&lt;/em&gt; means &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;poiéō&lt;/em&gt; means &lt;em&gt;to produce&lt;/em&gt;. It is the property of words that sound like what they represent. For instance, Woof, Meow and Moo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple dispatch&lt;/strong&gt; is when a dispatch function emits a value that depends on more than one argument.&lt;/p&gt;

&lt;p&gt;Let’s see our multimethod in action and ask our dog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fido&lt;/code&gt; to greet in French:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greetLang(myDog, french);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-dynamic-dispatch&quot;&gt;Multimethods with dynamic dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Dynamic dispatch&lt;/strong&gt; is when the dispatch function of a multimethod returns a value that goes &lt;strong&gt;beyond the static type&lt;/strong&gt; of its arguments, like for instance a number or a boolean.&lt;/p&gt;

&lt;p&gt;Imagine that instead of being polyglot our animals would suffer from &lt;strong&gt;dysmakrylexia&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dysmakrylexia&lt;/em&gt; comes from the Greek &lt;em&gt;dus&lt;/em&gt; expressing the idea of &lt;em&gt;difficulty&lt;/em&gt;, &lt;em&gt;makrýs&lt;/em&gt; meaning &lt;em&gt;long&lt;/em&gt; and &lt;em&gt;léxis&lt;/em&gt; that means &lt;em&gt;diction&lt;/em&gt;. Therefore, dysmakrilexia is a difficulty to pronounce long words.&lt;/p&gt;

&lt;p&gt;It’s not a real word, I invented it for the purpose of this article!&lt;/p&gt;

&lt;p&gt;Let’s say that when their name has more than 5 letters an animal is not able to tell it.&lt;/p&gt;

&lt;p&gt;Let’s call our multimethod &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dysGreet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-dys.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its dispatch function returns an array with two elements: the animal type and a boolean about whether the name is long or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var dysGreet = multi(animal =&amp;gt; [animal.type, animal.name.length &amp;gt; 5]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogShort(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
dysGreet = method([&quot;dog&quot;, false], dysGreetDogShort)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogLong(animal) {
console.log(&quot;Woof woof!&quot;);
}
dysGreet = method([&quot;dog&quot;, true], dysGreetDogLong)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCatShort(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
dysGreet = method([&quot;cat&quot;, false], dysGreetCatShort)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCatLong(animal) {
console.log(&quot;Meow!&quot;);
}
dysGreet = method([&quot;cat&quot;, true], dysGreetCatLong)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCowShort(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
dysGreet = method([&quot;cow&quot;, false], dysGreetCowShort)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCowLong(animal) {
console.log(&quot;Moo!&quot;);
}
dysGreet = method([&quot;cow&quot;, true], dysGreetCowLong)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, if we ask Clarabelle to greet, she omits her name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;dysGreet(myCow)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-in-other-languages&quot;&gt;Multimethods in other languages&lt;/h1&gt;

&lt;p&gt;Multimethods are available in many languages, beside JavaScript. In Common LISP and Clojure, they are part of the language. In Python, there is a library called &lt;a href=&quot;https://github.com/weissjeffm/multimethods&quot;&gt;multimethods&lt;/a&gt; and in Ruby there is &lt;a href=&quot;https://github.com/psantacl/ruby-multimethods&quot;&gt;Ruby multimethods&lt;/a&gt;. Both work quite like JavaScript arrows/multimethod.&lt;/p&gt;

&lt;p&gt;In Java, there is the &lt;a href=&quot;http://igm.univ-mlv.fr/~forax/works/jmmf/&quot;&gt;Java Multimethod Framework&lt;/a&gt; and C# supports multimethods natively via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; keyword. However, in both cases, it works only with static data types and not with generic data structures. Also, dynamic dispatch is not supported.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethods&lt;/strong&gt; make it possible to benefit from &lt;strong&gt;polymorphism&lt;/strong&gt; when &lt;strong&gt;data&lt;/strong&gt; is represented with &lt;strong&gt;generic maps&lt;/strong&gt;. Multimethods are made of a &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a dispatch value and &lt;strong&gt;methods&lt;/strong&gt; that provide implementations for the dispatch values.&lt;/p&gt;

&lt;p&gt;In the simplest case (&lt;strong&gt;single dispatch&lt;/strong&gt;), the multimethod receives a single map that contains a type field and the dispatch function of the multimethod emits the value of the type field. In more advanced cases (&lt;strong&gt;multiple dispatch&lt;/strong&gt; and &lt;strong&gt;dynamic dispatch&lt;/strong&gt;), the dispatch function emits an arbitrary value that depends on several arguments.&lt;/p&gt;

&lt;script src=&quot;https://viebel.github.io/klipse/repo/js/multimethod.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;var {multi, method, fromMulti} = window.multimethod;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">Object-Oriented Programming is well known for allowing different classes to be called with the same interface, via a mechanism called polymorphism. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have polymorphism without objects via multimethods.</summary></entry><entry><title type="html">Polymorphism without objects via multimethods</title><link href="/javascript/2021/10/02/multimethod.html" rel="alternate" type="text/html" title="Polymorphism without objects via multimethods" /><published>2021-10-02T20:12:21+00:00</published><updated>2021-10-02T20:12:21+00:00</updated><id>/javascript/2021/10/02/multimethod</id><content type="html" xml:base="/javascript/2021/10/02/multimethod.html">&lt;p&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt; is well known for allowing different classes to be called with the same interface, via a mechanism called &lt;strong&gt;polymorphism&lt;/strong&gt;. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have &lt;strong&gt;polymorphism without objects&lt;/strong&gt; via &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article has been revised and improved. The revised version is available &lt;a href=&quot;/javascript/2021/10/03/multimethod.html&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moreover, multimethods provide more advanced polymorphism than OOP polymorphism as they support cases where the chosen implementation depends on several argument types (multiple dispatch) and even on the dynamic value of the arguments (dynamic dispatch).&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mimicking objects with multimethods (Single dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend on several argument types (Multiple dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend dynamically on several arguments (Dynamic dispatch)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-essence-of-polymorphism&quot;&gt;The essence of polymorphism&lt;/h1&gt;

&lt;p&gt;In OOP, &lt;strong&gt;polymorphism&lt;/strong&gt; is about defining an &lt;strong&gt;interface&lt;/strong&gt; and having &lt;strong&gt;different classes&lt;/strong&gt; that implement the same interface in different ways.&lt;/p&gt;

&lt;p&gt;Let’s illustrate polymorphism with an adaptation of the classic OOP polymorphism example: animal greetings. Let’s say that our animals are &lt;strong&gt;anthropomorphic&lt;/strong&gt; and each of them has its own way to greet, by emitting its preferred sound and telling its name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anthropomorphism&lt;/em&gt; is our first word that comes from the Greek: it comes from the Greek &lt;em&gt;ánthrōpos&lt;/em&gt; that means &lt;em&gt;human&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it’s our second word that comes from the Greek. The first one was &lt;em&gt;polymorphism&lt;/em&gt; coming from the Greek &lt;em&gt;polús&lt;/em&gt; that means &lt;em&gt;many&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;. Polymorphism is the ability of different objects to implement in different ways the same method.&lt;/p&gt;

&lt;p&gt;In Java, for instance, we’d define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAnimal&lt;/code&gt; interface with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; method and each animal class would implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; in its own way, like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Woof woof! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Meow! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cow&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Moo! Call me &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s ask ourselves: what is the &lt;strong&gt;fundamental&lt;/strong&gt; difference between OOP polymorphism and a &lt;strong&gt;naive switch statement&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Let me tell you what I mean by a naive switch statement. We could, as &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; recommends, represent an animal with a &lt;strong&gt;map&lt;/strong&gt; having two &lt;strong&gt;fields&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and call a different piece of code depending on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
break;
case &quot;cat&quot;:
console.log(&quot;Meow! I am: &quot; + animal.name);
break;
case &quot;cow&quot;:
console.log(&quot;Moo! Call me &quot; + animal.name);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes me think that we have not yet met our animals. For no further due, I am happy to present our heroes: Fido, Milo and Clarabelle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fido-milo-clarabelle.jpg&quot; alt=&quot;Fido&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myDog = {
&quot;type&quot;: &quot;dog&quot;,
&quot;name&quot;: &quot;Fido&quot;
};
var myCat = {
&quot;type&quot;: &quot;cat&quot;,
&quot;name&quot;: &quot;Milo&quot;
};
var myCow = {
&quot;type&quot;: &quot;cow&quot;,
&quot;name&quot;: &quot;Clarabelle&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first difference between &lt;strong&gt;OOP polymorphism&lt;/strong&gt; and our &lt;strong&gt;switch statement&lt;/strong&gt; is that, if we pass an invalid map to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; function, bad things will happen.&lt;/p&gt;

&lt;p&gt;We could easily fix that by validating input data using &lt;a href=&quot;/javascript/2021/09/30/data-validation-with-json-schema.html&quot;&gt;JSON Schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another drawback of the switch statement approach is that when you want to &lt;strong&gt;modify&lt;/strong&gt; the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; for a specific animal, you have to change the code that deals with all the animals, While in the OOP approach, we have to change only a specific animal class.&lt;/p&gt;

&lt;p&gt;This could also be easily fixed by having a &lt;strong&gt;separate function&lt;/strong&gt; for each animal, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am: &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
greetDog(animal);
break;
case &quot;cat&quot;:
greetCat(animal);
break;
case &quot;cow&quot;:
greetCow(animal);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you want to &lt;strong&gt;extend&lt;/strong&gt; the functionality of greet and add a new animal?&lt;/p&gt;

&lt;p&gt;Now, we got to the &lt;strong&gt;essence&lt;/strong&gt; of polymorphism! With a switch statement, we cannot add a new animal without modifying the original code, while in OOP we can add a new class without having to modify the original code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main benefit of polymorphism is that it makes the code easily extensible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I have a surprise for you: We don’t need objects to make our code easily extensible. This is what we call: &lt;strong&gt;polymorphism without objects&lt;/strong&gt;. And it is possible with &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;multimethods-with-single-dispatch&quot;&gt;Multimethods with single dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethod&lt;/strong&gt; is a software construct that provides &lt;strong&gt;polymorphism&lt;/strong&gt; without the need for objects.&lt;/p&gt;

&lt;p&gt;Multimethods are made of two pieces:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a &lt;strong&gt;dispatched value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A set of &lt;strong&gt;methods&lt;/strong&gt; that provide an &lt;strong&gt;implementation&lt;/strong&gt; for each dispatched value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dispatch function is similar to an interface in the sense that it defines the way the function needs to be called. But it goes beyond that as it also dispatches a value that differentiates between the different implementations.&lt;/p&gt;

&lt;p&gt;Let me show illustrate how I would implement the animal greeting capabilities using a multimethod called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. We need a dispatch function and 3 methods. Let’s call the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it dispatches the animal type, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And each dispatch value is handled by a specific method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram, there is an arrow between animal and the methods in addition to the arrow between animal and the dispatch function because the arguments of a multimethod are passed to the dispatch function and to the methods.&lt;/p&gt;

&lt;p&gt;For now, our multimethod receives a single argument. But in the next section, it will receive several arguments.&lt;/p&gt;

&lt;p&gt;Let’s see how a multimethod looks like in terms of code.&lt;/p&gt;

&lt;p&gt;We start with the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it defines the signature of the multimethod and emits the type of the animal as the dispatched value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDispatch(animal) {
return animal.type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need a method for each dispatch value. In our case, we’ll have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt; for dogs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt; for cats and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt; for cows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the context of multimethods, a method is a function that provides an implementation for a dispatch value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the one hand we have the greet dispatch function and on the other hand we have the different greet implementations. How do you &lt;strong&gt;wire&lt;/strong&gt; everything together?&lt;/p&gt;

&lt;p&gt;For that, we need a library. For instance, in JavaScript using a library named &lt;a href=&quot;https://github.com/caderek/arrows/tree/master/packages/multimethod&quot;&gt;arrows/multimethod&lt;/a&gt;, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi&lt;/code&gt; to create a multimethod and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; to create a method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greet = multi(
greetDispatch,
method(&quot;dog&quot;, greetDog),
method(&quot;cat&quot;, greetCat),
method(&quot;cow&quot;, greetCow)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names of the dispatch function and the methods are not really important. But I like to follow a simple &lt;strong&gt;naming convention&lt;/strong&gt;: use the name of the multimethod as a &lt;strong&gt;prefix&lt;/strong&gt; for the dispatch function and the methods and have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch&lt;/code&gt; &lt;strong&gt;suffix&lt;/strong&gt; for the dispatch function and a specific &lt;strong&gt;suffix&lt;/strong&gt; for each method.&lt;/p&gt;

&lt;p&gt;Under the hood, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrows/multimethod&lt;/code&gt; library maintains a &lt;strong&gt;hash map&lt;/strong&gt;, where the keys are the values emitted by the dispatch function and the values are the methods. When you call method, the library adds an entry to the hash map and when you call the multimethod it queries the hash map to find the implementation that corresponds to the dispatch value.&lt;/p&gt;

&lt;p&gt;In terms of usage, we call a multimethod as a regular function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myCow);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-multiple-dispatch&quot;&gt;Multimethods with multiple dispatch&lt;/h1&gt;

&lt;p&gt;So far, we have mimicked OOP by having as a dispatch value the type of the multimethod argument. But if you think again about the flow of a multimethod, you will discover something interesting: in fact the dispatch function could emit any value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod.png&quot; alt=&quot;multi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, we could emit the type of two arguments!&lt;/p&gt;

&lt;p&gt;Imagine that our animals are &lt;strong&gt;polyglot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Polyglot&lt;/em&gt; comes from the Greek &lt;em&gt;polús&lt;/em&gt; meaning &lt;em&gt;much&lt;/em&gt; and &lt;em&gt;glôssa&lt;/em&gt; meaning &lt;em&gt;language&lt;/em&gt;. A polyglot is a person speaking many languages.&lt;/p&gt;

&lt;p&gt;Let’s say our animals speak English and French.&lt;/p&gt;

&lt;p&gt;We represent a language like we represent an animal, with a map having two fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var french = {
&quot;type&quot;: &quot;fr&quot;,
&quot;name&quot;: &quot;Français&quot;
};
var english = {
&quot;type&quot;: &quot;en&quot;,
&quot;name&quot;: &quot;English&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s write the code for the &lt;strong&gt;dispatch function&lt;/strong&gt; and the &lt;strong&gt;methods&lt;/strong&gt; for our polyglot animals. Let’s call our multimethod: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetLang&lt;/code&gt;. We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one dispatch function&lt;/li&gt;
  &lt;li&gt;6 methods: 3 animals (dog, cat, cow) times 2 languages (en, fr).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before the implementation I’d like to draw a flow diagram. It will help me to make things crystal clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal-polyglot.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I omitted the arrow between the arguments and the methods in order to keep the diagram readable. Otherwise there would be too many arrows.&lt;/p&gt;

&lt;p&gt;The dispatch function is going to return an array with two elements: the type of the animal and the type of the language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDispatch(animal, language) {
return [animal.type, language.type];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The order of the elements in the array It doesn’t matter but it needs to be consistent with the wiring of the methods.&lt;/p&gt;

&lt;p&gt;Now, let’s implement the 6 methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogEn(animal, language) {
console.log(&quot;Woof woof! My name is &quot; + animal.name + &quot; and I speak &quot; +
language.name);
}
function greetLangDogFr(animal, language) {
console.log(&quot;Ouaf Ouaf! Mon nom est &quot; + animal.name + &quot; et je parle &quot; +
language.name);
}
function greetLangCatEn(animal, language) {
console.log(&quot;Meow! I am &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
function greetLangCatFr(animal, language) {
console.log(&quot;Miaou! Je m'appelle &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
function greetLangCowEn(animal, language) {
console.log(&quot;Moo! Call me &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
function greetLangCowFr(animal, language) {
console.log(&quot;Meuh! Appelle moi &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a closer look at the code for the methods that deal with French and tell me if you are surprised to see “Ouaf Ouaf”
instead of “Woof Woof” for dogs, “Miaou” instead of “Meow” for cats and “Meuh” instead of “Moo” for cows. I find it funny that that animal &lt;strong&gt;onomatopoeia&lt;/strong&gt; are different in French than in English!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Onomatopoeia&lt;/em&gt; comes also from the Greek: &lt;em&gt;ónoma&lt;/em&gt; means &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;poiéō&lt;/em&gt; means &lt;em&gt;to produce&lt;/em&gt;. It is the property of words that sound like what they represent. For instance, Woof, Meow and Moo.&lt;/p&gt;

&lt;p&gt;Anyway, after we have defined our &lt;strong&gt;dispatch function&lt;/strong&gt; and our &lt;strong&gt;methods&lt;/strong&gt;, we need to &lt;strong&gt;wire&lt;/strong&gt; them altogether in a multimethod, like we did with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. The only difference that the dispatch values are arrays of strings instead of strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greetLang = multi(
  greetLangDispatch,
  method([&quot;dog&quot;, &quot;en&quot;], greetLangDogEn),
  method([&quot;dog&quot;, &quot;fr&quot;], greetLangDogFr),
  method([&quot;cat&quot;, &quot;en&quot;], greetLangCatEn),
  method([&quot;cat&quot;, &quot;fr&quot;], greetLangCatFr),
  method([&quot;cow&quot;, &quot;en&quot;], greetLangCowEn),
  method([&quot;cow&quot;, &quot;fr&quot;], greetLangCowFr)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Multiple dispatch&lt;/strong&gt; is when a dispatch function emits a value that depends on more than one argument.&lt;/p&gt;

&lt;p&gt;Let’s see our multimethod in action and ask our dog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fido&lt;/code&gt; to greet in French:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greetLang(myDog, french);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-dynamic-dispatch&quot;&gt;Multimethods with dynamic dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Dynamic dispatch&lt;/strong&gt; is when the dispatch function of a multimethod returns a value that goes &lt;strong&gt;beyond the static type&lt;/strong&gt; of its arguments, like for instance a number or a boolean.&lt;/p&gt;

&lt;p&gt;Imagine that instead of being polyglot our animals would suffer from &lt;strong&gt;dysmakrylexia&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dysmakrylexia&lt;/em&gt; comes from the Greek &lt;em&gt;dus&lt;/em&gt; expressing the idea of &lt;em&gt;difficulty&lt;/em&gt;, &lt;em&gt;makrýs&lt;/em&gt; meaning &lt;em&gt;long&lt;/em&gt; and &lt;em&gt;léxis&lt;/em&gt; that means &lt;em&gt;diction&lt;/em&gt;. Therefore, dysmakrilexia is a difficulty to pronounce long words.&lt;/p&gt;

&lt;p&gt;It’s not a real word, I invented it for the purpose of this article!&lt;/p&gt;

&lt;p&gt;Let’s say that when their name has more than 5 letters an animal is not able to tell it.&lt;/p&gt;

&lt;p&gt;Let’s call our multimethod &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dysGreet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-dys.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its dispatch function returns an array with two elements: the animal type and a boolean about whether the name is long or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDispatch(animal) {
var hasLongName = animal.name.length &amp;gt; 5;
return [animal.type, hasLongName];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogShort(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
function dysGreetDogLong(animal) {
console.log(&quot;Woof woof!&quot;);
}
function dysGreetCatShort(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
function dysGreetCatLong(animal) {
console.log(&quot;Meow!&quot;);
}
function dysGreetCowShort(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function dysGreetCowLong(animal) {
console.log(&quot;Moo!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As surprising as it may sound, wiring a multimethod with dynamic dispatch is as simple as wiring a multimethod with static dispatch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var dysGreet = multi(
dysGreetDispatch,
method([&quot;dog&quot;, false], dysGreetDogShort),
method([&quot;dog&quot;, true], dysGreetDogLong),
method([&quot;cat&quot;, false], dysGreetCatShort),
method([&quot;cat&quot;, true], dysGreetCatLong),
method([&quot;cow&quot;, false], dysGreetCowShort),
method([&quot;cow&quot;, true], dysGreetCowLong)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, if we ask Clarabelle to greet, she omits her name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;dysGreet(myCow)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-in-other-languages&quot;&gt;Multimethods in other languages&lt;/h1&gt;

&lt;p&gt;Multimethods are available in many languages, beside JavaScript. In Common LISP and Clojure, they are part of the language. In Python, there is a library called &lt;a href=&quot;https://github.com/weissjeffm/multimethods&quot;&gt;multimethods&lt;/a&gt; and in Ruby there is &lt;a href=&quot;https://github.com/psantacl/ruby-multimethods&quot;&gt;Ruby multimethods&lt;/a&gt;. Both work quite like JavaScript arrows/multimethod.&lt;/p&gt;

&lt;p&gt;In Java, there is the &lt;a href=&quot;http://igm.univ-mlv.fr/~forax/works/jmmf/&quot;&gt;Java Multimethod Framework&lt;/a&gt; and C# supports multimethods natively via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; keyword. However, in both cases, it works only with static data types and not with generic data structures. Also, dynamic dispatch is not supported.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethods&lt;/strong&gt; make it possible to benefit from &lt;strong&gt;polymorphism&lt;/strong&gt; when &lt;strong&gt;data&lt;/strong&gt; is represented with &lt;strong&gt;generic maps&lt;/strong&gt;. Multimethods are made of a &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a dispatch value and &lt;strong&gt;methods&lt;/strong&gt; that provide implementations for the dispatch values.&lt;/p&gt;

&lt;p&gt;In the simplest case (&lt;strong&gt;single dispatch&lt;/strong&gt;), the multimethod receives a single map that contains a type field and the dispatch function of the multimethod emits the value of the type field. In more advanced cases (&lt;strong&gt;multiple dispatch&lt;/strong&gt; and &lt;strong&gt;dynamic dispatch&lt;/strong&gt;), the dispatch function emits an arbitrary value that depends on several arguments.&lt;/p&gt;

&lt;script src=&quot;https://viebel.github.io/klipse/repo/js/multimethod.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;var {multi, method, fromMulti} = window.multimethod;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">Object-Oriented Programming is well known for allowing different classes to be called with the same interface, via a mechanism called polymorphism. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have polymorphism without objects via multimethods.</summary></entry><entry><title type="html">Data validation with JSON Schema</title><link href="/javascript/2021/09/30/data-validation-with-json-schema.html" rel="alternate" type="text/html" title="Data validation with JSON Schema" /><published>2021-09-30T00:15:28+00:00</published><updated>2021-09-30T00:15:28+00:00</updated><id>/javascript/2021/09/30/data-validation-with-json-schema</id><content type="html" xml:base="/javascript/2021/09/30/data-validation-with-json-schema.html">&lt;p&gt;According to the principles of &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented Programming&lt;/a&gt;, we should represent data with &lt;strong&gt;generic&lt;/strong&gt; and &lt;strong&gt;immutable&lt;/strong&gt; data structures, like immutable hash maps and immutable vectors. At first sight, it might seem that it means to &lt;em&gt;live in the wild&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it is possible – and advised – to maintain a data schema in Data-Oriented Programming.&lt;/p&gt;

&lt;p&gt;The major difference between this kind of data validation and the way data is validated with static types is that &lt;strong&gt;data schema&lt;/strong&gt; should be &lt;strong&gt;separated&lt;/strong&gt; from &lt;strong&gt;data representation&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We should separate data schema from data representation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of this article is to explain the rationale behind this data validation approach.&lt;/p&gt;

&lt;p&gt;This article is made of 4 parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How to express a data schema using &lt;strong&gt;JSON Schema&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;How to &lt;strong&gt;validate&lt;/strong&gt; data against a JSON Schema&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;benefits&lt;/strong&gt; of separating between data schema and data representation&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;costs&lt;/strong&gt; of separating between data schema and data representation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article is an interactive version of the article published on &lt;a href=&quot;https://javascript.works-hub.com/learn/data-validation-without-objects-78fcc&quot;&gt;JavaScript Works&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/freedom-2.jpg&quot; alt=&quot;Freedom&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;json-schema&quot;&gt;JSON Schema&lt;/h2&gt;

&lt;p&gt;Think about handling a request in a library management system for the addition of an author to the system. To keep things simple, imagine that such a request contains only basic information about the author:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Their first name&lt;/li&gt;
  &lt;li&gt;Their last name&lt;/li&gt;
  &lt;li&gt;Optionally, the number of books they have written&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Data-Oriented Programming, we represent the request data in our program as a string map that is expected to have three fields:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; - a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; - a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; - a number (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;, we represent the data schema of the request with the following map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var addAuthorRequestSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;], 
  &quot;properties&quot;: {
    &quot;firstName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;lastName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;books&quot;: {&quot;type&quot;: &quot;integer&quot;}
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of remarks regarding the syntax of this JSON Schema:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data is expected to be a map (in JSON, a map is called an object)&lt;/li&gt;
  &lt;li&gt;Only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; fields are required&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; must be a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; must be a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; must be an integer (when it is provided)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-validation-against-a-schema&quot;&gt;Data validation against a schema&lt;/h2&gt;

&lt;p&gt;In order to check whether a piece of data conforms to a data schema, we use a &lt;strong&gt;data validation library&lt;/strong&gt; for our preferred programming language.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Language&lt;/th&gt;
      &lt;th&gt;Data validation Library&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;JavaScript&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ajv-validator/ajv&quot;&gt;Ajv&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clojure&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/juxt/jinx&quot;&gt;jinx&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/ssilverman/snowy-json&quot;&gt;Snow&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C#&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.newtonsoft.com/jsonschema&quot;&gt;JSON.net Schema&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/marksparkza/jschon&quot;&gt;jschon&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/davishmcclurg/json_schemer&quot;&gt;JSONSchemer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The complete list of data validation libraries is available &lt;a href=&quot;http://json-schema.org/implementations.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For instance, in JavaScript, using &lt;a href=&quot;https://ajv.js.org/&quot;&gt;Ajv JSON Schema validator&lt;/a&gt;, we validate a piece of data using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; function. As you might expect, when a piece of data is valid, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var ajv = new Ajv({allErrors: true}); 

var validAuthorData = {
  firstName: &quot;Isaac&quot;,
  lastName: &quot;Asimov&quot;,
  books: 500
};

ajv.validate(addAuthorRequestSchema, validAuthorData); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a piece of data is invalid (e.g. using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastNam&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validate&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var invalidAuthorData = {
  firstName: &quot;Isaac&quot;,
  lastNam: &quot;Asimov&quot;,
  books: &quot;five hundred&quot;
};

ajv.validate(addAuthorRequestSchema, invalidAuthorData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a piece of data is invalid, we can easily get details about data validation failures in a human readable format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var invalidAuthorData = {
  firstName: &quot;Isaac&quot;,
  lastNam: &quot;Asimov&quot;,
  books: &quot;five hundred&quot;
};

ajv.validate(addAuthorRequestSchema, invalidAuthorData);
ajv.errorsText(ajv.errors);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A couple of remarks regarding validation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ajv&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By default, Ajv stores only the first data validation error. We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allErrors: true&lt;/code&gt; to store all errors.&lt;/li&gt;
  &lt;li&gt;Data validation errors are stored internally as an array. In order to get a human readable string, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errorsText&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-benefits-of-separating-between-data-schema-and-data-representation&quot;&gt;The benefits of separating between data schema and data representation&lt;/h2&gt;

&lt;p&gt;When we separate data schema from data representation in our programs, our programs benefit from:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Freedom&lt;/strong&gt; to choose what data should be validated&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Optional&lt;/strong&gt; fields&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Advanced&lt;/strong&gt; data validation conditions&lt;/li&gt;
  &lt;li&gt;Automatic generation of data model &lt;strong&gt;visualization&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Automatic generation of &lt;strong&gt;unit tests&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;benefit-1-freedom-to-choose-what-data-should-be-validated&quot;&gt;Benefit #1: Freedom to choose what data should be validated&lt;/h3&gt;

&lt;p&gt;When data schema is separated from data representation we are free to instantiate data without specifying its expected shape. Such a &lt;em&gt;freedom&lt;/em&gt; is useful in various situations. For example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We want to experiment with code quickly&lt;/li&gt;
  &lt;li&gt;Data has already been validated&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;rapid-prototyping&quot;&gt;Rapid prototyping&lt;/h4&gt;

&lt;p&gt;In classic Object-Oriented Programming and in some statically typed Functional Programming, each and every piece of data must have a predefined shape (either a class or a data type). During the &lt;strong&gt;exploration phase&lt;/strong&gt; of coding, where we don’t know yet what is the exact shape of our data, being forced to update the type definition each time we update our data model &lt;em&gt;slows us down&lt;/em&gt;. In Data-Oriented Programming, we can develop at a &lt;em&gt;fast pace&lt;/em&gt; during the exploration phase, by &lt;strong&gt;delaying&lt;/strong&gt; the data schema definition to a later phase.&lt;/p&gt;

&lt;h4 id=&quot;code-refactoring&quot;&gt;Code refactoring&lt;/h4&gt;

&lt;p&gt;One common refactoring pattern is the &lt;strong&gt;split phase refactoring&lt;/strong&gt; where you basically split a single large function into multiple smaller functions, with a private scope. Those functions are called with data that has already been validated by the large function. In Data-Oriented Programming, we are free to not specify the shape of the arguments of the inner functions, relying on the data validation that has already occurred.&lt;/p&gt;

&lt;p&gt;Suppose we want to display some information about an author, like their full name and whether they are considered as prolific or not.&lt;/p&gt;

&lt;p&gt;First, we define the data schema for the author data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;],
  &quot;properties&quot;: {
    &quot;firstName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;lastName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;books&quot;: {&quot;type&quot;: &quot;integer&quot;}
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; function that first check whether data is valid and then displays the information about he author:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function displayAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &quot;displayAuthorInfo called with invalid data&quot;;
  };
  console.log(&quot;Author full name is: &quot;, authorData.firstName + &quot; &quot; + authorData.lastName);
  if(authorData.books == null) {
    console.log(&quot;Author has not written any book&quot;);
  } else {
    if (authorData.books &amp;gt; 100) {
      console.log(&quot;Author is prolific&quot;);
    } else {
      console.log(&quot;Author is not prolific&quot;);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the first thing we do inside the body of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; is to validate that the argument passed to the function is valid.&lt;/p&gt;

&lt;p&gt;Now, let’s apply the split phase refactoring pattern to this simplistic example and split the body of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; in two inner functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayFullName&lt;/code&gt;: Display the author full name&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayProlificity&lt;/code&gt;: Display whether the author is prolific or not&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;
function displayFullName(authorData) {
  console.log(&quot;Author full name is: &quot;, authorData.firstName + &quot; &quot; + authorData.lastName);
}

function displayProlificity(authorData) {
  if(authorData.books == null) {
    console.log(&quot;Author has not written any book&quot;);
  } else {
    if (authorData.books &amp;gt; 100) {
      console.log(&quot;Author is prolific&quot;);
    } else {
      console.log(&quot;Author is not prolific&quot;);
    }
  }
}

function displayAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &quot;displayAuthorInfo called with invalid data&quot;;
  };
  displayFullName(authorData);
  displayProlificity(authorData);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having the data schema separated from the data representation allows us not to specify a data schema for the arguments of the inner functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayFullName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayProlificity&lt;/code&gt;. It makes the refactoring process a bit &lt;em&gt;smoother&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In some cases, the inner functions are more complicated and it makes sense to specify a data schema for their arguments. Data-Oriented Programming gives us the freedom to choose!&lt;/p&gt;

&lt;h3 id=&quot;benefit-2-optional-fields&quot;&gt;Benefit #2: Optional fields&lt;/h3&gt;

&lt;p&gt;In Object-Oriented Programming, allowing a class member to be &lt;em&gt;optional&lt;/em&gt; is not easy. For instance, in Java one needs a special construct like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Optional&lt;/code&gt; class &lt;a href=&quot;https://www.oracle.com/technical-resources/articles/java/java8-optional.html&quot;&gt;introduced in Java 8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Data-Oriented Programming, it is natural to declare a field as optional in a map. In fact in JSON Schema, &lt;strong&gt;by default&lt;/strong&gt; every field is optional. In order to make a field non-optional, we have to include its name in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required&lt;/code&gt; array as for instance in the author schema in the following code snippet where only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; are required while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; is optional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;], // `books` is not included in `required`, as it is an optional field
  &quot;properties&quot;: {
    &quot;firstName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;lastName&quot;: {&quot;type&quot;: &quot;string&quot;},
    &quot;books&quot;: {&quot;type&quot;: &quot;integer&quot;} // when present, `books` must be an integer
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s illustrate how the validation function deals with optional fields: A map without a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; field is considered to be valid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorDataNoBooks = {
  &quot;firstName&quot;: &quot;Yehonathan&quot;,
  &quot;lastName&quot;: &quot;Sharvit&quot;
};

ajv.validate(authorSchema, authorDataNoBooks) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, a map with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; field where the value is not an interger is considered to be invalid:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorDataInvalidBooks = {
  &quot;firstName&quot;: &quot;Albert&quot;,
  &quot;lastName&quot;: &quot;Einstein&quot;,
  &quot;books&quot;: &quot;Five&quot;
};

ajv.validate(authorSchema, authorDataInvalidBooks)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;benefit-3-advanced-data-validation-conditions&quot;&gt;Benefit #3: Advanced data validation conditions&lt;/h3&gt;

&lt;p&gt;In Data-Oriented Programming, data validation occurs at &lt;strong&gt;run time&lt;/strong&gt;. It allows us to define data validation conditions that go beyond the &lt;strong&gt;type&lt;/strong&gt; of a field. For instance, we might want to make sure that a field is not only a string but a string with a maximal number of characters or a number comprised in a range of numbers.&lt;/p&gt;

&lt;p&gt;For instance, here is a JSON Schema that expects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName&lt;/code&gt; to be strings of less than 100 characters and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;books&lt;/code&gt; to be a number between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10,000&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var authorComplexSchema = {
  &quot;type&quot;: &quot;object&quot;,
  &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;],
  &quot;properties&quot;: {
    &quot;firstName&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;maxLength&quot;: 100
    },
    &quot;lastName&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;maxLength&quot;: 100
    },
    &quot;books&quot;: {
      &quot;type&quot;: &quot;integer&quot;,
      &quot;minimum&quot;: 0,
      &quot;maximum&quot;: 10000
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON Schema supports many other advanced data validation conditions, like regular expression validation for string fields or number fields that should be a multiple of a given number.&lt;/p&gt;

&lt;h3 id=&quot;benefit-4-automatic-generation-of-data-model-visualization&quot;&gt;Benefit #4: Automatic generation of data model visualization&lt;/h3&gt;

&lt;p&gt;When the data schema is defined as data, we can leverage tools that generate data model visualization: with tools like &lt;a href=&quot;https://navneethg.github.io/jsonschemaviewer/&quot;&gt;JSON Schema Viewer&lt;/a&gt; and &lt;a href=&quot;https://github.com/metosin/malli&quot;&gt;Malli&lt;/a&gt; we can generate a UML diagram out of a JSON Schema. For instance, the following JSON Schema defines the shape of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookList&lt;/code&gt; field that is an array of books where each book is a map.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;required&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lastName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bookList&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;array&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The tools we just mentioned can generate the following UML diagram from the JSON Schema:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/author-schema.png&quot; alt=&quot;author schema&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;benefit-5-automatic-generation-of-unit-tests&quot;&gt;Benefit #5: Automatic generation of unit tests&lt;/h3&gt;

&lt;p&gt;An interesting way to leverage data schema for function arguments is to automatically generate unit tests. Let’s change a bit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;displayAuthorInfo&lt;/code&gt; function into a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt; that – instead of displaying the author info – returns the author info as a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function calculateAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &quot;calculateAuthorInfo called with invalid data&quot;;
  };
  var fullName = &quot;Author full name is: &quot; + authorData.firstName + &quot; &quot; + authorData.lastName;
  var prolificity = &quot;&quot;;
  if(authorData.books == null) {
    prolificity = &quot;Author has not written any book&quot;;
  } else {
    if (authorData.books &amp;gt; 100) {
      prolificity = &quot;Author is prolific&quot;;
    } else {
      prolificity = &quot;Author is not prolific&quot;;
    }
  }
  return fullName + &quot;\n&quot; + prolificity;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to generate a unit test for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt; by generating random input data that conforms to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorSchema&lt;/code&gt;. For that purpose, we use a library like &lt;a href=&quot;https://github.com/json-schema-faker/json-schema-faker&quot;&gt;JSON Schema Faker&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;JSONSchemaFaker(authorSchema)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt; with the random data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;calculateAuthorInfo(JSONSchemaFaker(authorSchema))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on what the function does, we might expect different things. In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt;, we expect the output to be a string that starts with the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt;. Let’s create a schema for the return value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateAuthorInfo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var calculateAuthorInfoReturnValueSchema = {
&quot;type&quot;: &quot;string&quot;,
&quot;pattern&quot;: &quot;Author.*&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the code of our unit test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var res = calculateAuthorInfo(JSONSchemaFaker(authorSchema));
ajv.validate(calculateAuthorInfoReturnValueSchema, res)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-costs-of-separating-between-data-schema-and-data-representation&quot;&gt;The costs of separating between data schema and data representation&lt;/h2&gt;

&lt;p&gt;There is no such thing as a free lunch. Separating between data schema and data representation comes at a cost:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Loose connection&lt;/em&gt; between data and its schema&lt;/li&gt;
  &lt;li&gt;Light &lt;em&gt;performance&lt;/em&gt; hit&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cost-1-loose-connection-between-data-and-its-schema&quot;&gt;Cost #1: Loose connection between data and its schema&lt;/h3&gt;

&lt;p&gt;By definition, when we separate between data schema and data representation, the connection between data and its schema is &lt;strong&gt;looser&lt;/strong&gt; that when we represent data with classes. Moreover, the schema definition language (e.g. JSON Schema) is not part of the programming language. It is up to the developer to decide where data validation is &lt;strong&gt;necessary&lt;/strong&gt; and where it is &lt;strong&gt;superfluous&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As the idiom says, with great &lt;strong&gt;power&lt;/strong&gt; comes great &lt;strong&gt;responsibility&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cost-2-light-performance-hit&quot;&gt;Cost #2: Light performance hit&lt;/h3&gt;

&lt;p&gt;As we mentioned earlier, there exist implementations of JSON Schema validation in most programming languages. When data validation occurs at &lt;strong&gt;run time&lt;/strong&gt; it takes some time to run the data validation while in Object-Oriented programming, data validation occurs usually at &lt;strong&gt;compile time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This drawback is &lt;strong&gt;mitigated&lt;/strong&gt; by the fact that even in Object-Oriented programming some parts of the data validation occur at run time. For instance, the conversion of a request JSON payload into an object occurs at run time. Moreover, in Data-Oriented Programming, it is quite common to have some data validation parts enabled only during &lt;strong&gt;development&lt;/strong&gt; and to disable them when the system runs in &lt;strong&gt;production&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a consequence, the performance hit is not significant.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented Programming&lt;/a&gt;, data is represented with immutable generic data structures. When additional information about the shape of the data is required, we are free to define a data schema (e.g. in JSON Schema).&lt;/p&gt;

&lt;p&gt;Keeping the data schema separate from the data representation leaves the developer free to decide where and when data should be validated. Moreover, data validation occurs at run-time. As a consequence, we can express data validation conditions that go beyond the static data types (e.g. the string length).&lt;/p&gt;

&lt;p&gt;However, as the idiom says, with great power comes great responsibility. It’s up to the developer to decide what data should be validated.&lt;/p&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js&quot; integrity=&quot;sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww==&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/ajv/6.12.6/ajv.bundle.js&quot; integrity=&quot;sha512-km2o1mynU1nR0HonrYrI0TA+QvRMtONwnfA/nl15hnd/WyjZ/FLV7NROHAbzzSjHxIeQPfiJRUSUzevO2Ut0Ng==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/json-schema-faker/0.5.0-rc9/json-schema-faker.min.js&quot; integrity=&quot;sha512-MigyB2SaiNKRt1O7yhf1CbLSUnhIopQfQQfzt4N8+JFa4cBizE+OxsfPy+rUUw5sQ2WootqG1kxHS1pvjcsPyA==&quot; crossorigin=&quot;anonymous&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">According to the principles of Data-Oriented Programming, we should represent data with generic and immutable data structures, like immutable hash maps and immutable vectors. At first sight, it might seem that it means to live in the wild.</summary></entry><entry><title type="html">A new way of blogging about Golang</title><link href="/golang/2021/08/29/blog-go.html" rel="alternate" type="text/html" title="A new way of blogging about Golang" /><published>2021-08-29T01:11:22+00:00</published><updated>2021-08-29T01:11:22+00:00</updated><id>/golang/2021/08/29/blog-go</id><content type="html" xml:base="/golang/2021/08/29/blog-go.html">&lt;p&gt;This blog post is about to show a new way of blogging about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Go_(programming_language)&quot;&gt;Go&lt;/a&gt; programming language.&lt;/p&gt;

&lt;p&gt;Look at a typical blog post or tutorial about any programming language: The article usually presents a couple of code snippets. As I see it, there are two pains with code snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;they contain the input and the output but not the actual evaluation of the input&lt;/li&gt;
  &lt;li&gt;it’s impossible for the reader to modify the output&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-forgotten-dream&quot;&gt;The forgotten dream&lt;/h1&gt;

&lt;p&gt;A long time ago, all the developers had a common dream. The dream was about interactivity, liveness, evaluation…&lt;/p&gt;

&lt;p&gt;But we put this dream aside - because the browser understands only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And after a while, we even forgot that we ever had this dream.&lt;/p&gt;

&lt;p&gt;Still, there are some people that didn’t forget this dream, like Alan Kay:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question: Well, look at Wikipedia — it’s a tremendous collaboration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alan Kay: It is, but go to the article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Logo_(programming_language)&quot;&gt;Logo&lt;/a&gt;, can you write and execute Logo programs? Are there examples? No. The Wikipedia people didn’t even imagine that, in spite of the fact that they’re on a computer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442?pgno=2&quot; target=&quot;_blank&quot;&gt;full interview of Alan Kay&lt;/a&gt;. (Thanks &lt;a href=&quot;https://twitter.com/fasihsignal&quot;&gt;@fasihsignal&lt;/a&gt; for bringing this quote to our awareness.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gopher.png&quot; alt=&quot;dream&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-klipse-plugin&quot;&gt;The klipse plugin&lt;/h1&gt;

&lt;p&gt;The klipse plugin is a small step toward this dream: it is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; tag that transforms static code snippets of an html page into live and interactive snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: The code is executed in your browser&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interactive&lt;/strong&gt;: You can modify the code and it is evaluated as you type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt; is written in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;The following languages are supported by &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt; - in any modern browser (including mobile): Clojure, Ruby, JavaScript, Python, Scheme, Go, Jsx, Brainfuck, C++ and Lua.&lt;/p&gt;

&lt;p&gt;In this article, we are going to demonstrate interactive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go&lt;/code&gt; code snippets that are evaluated by &lt;a href=&quot;https://github.com/traefik/yaegi&quot;&gt;Yaegi&lt;/a&gt; that was recently integrated in Klipse by &lt;a href=&quot;https://github.com/mliezun&quot;&gt;Miguel Liezun&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;klipsify-a-go-code-snippet&quot;&gt;Klipsify a Go code snippet&lt;/h1&gt;

&lt;p&gt;Let’s have on this page a small static code snippet:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(This blog is written with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kramdown&lt;/code&gt; plugin helps a lot in beautifying the code snippets.)&lt;/p&gt;

&lt;p&gt;And now, we are going to &lt;strong&gt;klipsify&lt;/strong&gt; this code snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-go&quot;&gt;import &quot;fmt&quot;

func main() {
  fmt.Println(&quot;Hello World!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to edit the code above: it’s interactive =&amp;gt; it evaluates as you type.&lt;/p&gt;

&lt;p&gt;All I had to do in order to &lt;strong&gt;klipsify&lt;/strong&gt; my code snippet, was to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language-eval-go&lt;/code&gt; class (configurable) to the appropriate html element.&lt;/p&gt;

&lt;p&gt;See it by yourself: here is the source of this page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;And now, we are going to &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;klipsify&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; this code snippet:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-klipse-go&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
import &quot;fmt&quot;

func main() {
  fmt.Println(&quot;Hello World!&quot;)
}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;live-demo&quot;&gt;Live demo&lt;/h1&gt;

&lt;p&gt;Before dealing about integration of the klipse plugin on a web page, let’s enjoy another klipse snippet for an implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FizzBuzz&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-go&quot;&gt;import &quot;fmt&quot;

func main() {
    i := 1
    for i &amp;lt;= 20 {
        if (i % 3 == 0 &amp;amp;&amp;amp; i % 5 == 0) {
            fmt.Println(&quot;Fizzbuzz&quot;)
        } else if (i % 3 == 0) {
            fmt.Println(&quot;Fizz&quot;)
        } else if (i % 5 == 0) {
            fmt.Println(&quot;Buzz&quot;)
        } else {
            fmt.Println(i)
        }
        i = i + 1
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead! modify the code snippet above, and it will evaluate as you type…&lt;/p&gt;

&lt;h1 id=&quot;evaluating-a-gist&quot;&gt;Evaluating a gist&lt;/h1&gt;

&lt;p&gt;We can also evaluate code from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, we could evaluate &lt;a href=&quot;https://gist.github.com/viebel/d9320214d88352533d3f81d3ff960312&quot;&gt;this gist&lt;/a&gt; that calculates the factorial of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;103&lt;/code&gt;, leveraging big integers to avoid integer overflow:&lt;/p&gt;

&lt;pre&gt;
&lt;div class=&quot;language-klipse-go&quot; data-gist-id=&quot;viebel/d9320214d88352533d3f81d3ff960312&quot;&gt;&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;Again, feel free to modify the code…&lt;/p&gt;

&lt;h1 id=&quot;integration&quot;&gt;Integration&lt;/h1&gt;

&lt;p&gt;All you need to do in order to integrate the klipse plugin to your blog (or any other web page), is to add this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; tag to your web page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://app.klipse.tech/css/codemirror.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;klipse_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;selector_go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.language-klipse-go&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// css selector for the html elements you want to klipsify&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://app.klipse.tech/plugin_prod/js/klipse_plugin.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By the way, this is exactly what we did on the page that you are currently reading.&lt;/p&gt;

&lt;h1 id=&quot;other-languages&quot;&gt;Other languages&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; is designed as a platform that could support any language that has a client-side evaluator, by writing modules to the Klipse plugin. Currently, there are modules available for the following languages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript: &lt;a href=&quot;http://blog.klipse.tech/javascript/2016/06/20/blog-javascript.html&quot;&gt;A new way of blogging about JavaScript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clojure[Script]: &lt;a href=&quot;http://blog.klipse.tech/clojure/2016/06/07/klipse-plugin-tuto.html&quot;&gt;How to klipsify a clojure[script] blog post&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python: &lt;a href=&quot;http://blog.klipse.tech/python/2017/01/04/python-turtle-fractal.html&quot;&gt;The python turtle in the browser&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brainfuck: &lt;a href=&quot;http://blog.klipse.tech/brainfuck/2016/12/17/brainfuck.html&quot;&gt;Brainfuck for dummies&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scheme: &lt;a href=&quot;http://blog.klipse.tech/scheme/2016/09/11/scheme-tutorial-1.html&quot;&gt;Interactive overview of Scheme’s semantics&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Go ahead!&lt;/p&gt;

&lt;p&gt;Write your own blog post with interactive snippets in your preferred language.&lt;/p&gt;

&lt;p&gt;It’s super simple to integrate the &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; on a blog bost: check the instructions on &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can get inspired by &lt;a href=&quot;https://github.com/viebel/klipse#community&quot;&gt;the work of the Klipse community&lt;/a&gt;…&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="golang" /><category term="klipse" /><category term="golang" /><summary type="html">This blog post is about to show a new way of blogging about the Go programming language.</summary></entry><entry><title type="html">On sameness in programming</title><link href="/dop/2021/04/22/sameness-in-programming.html" rel="alternate" type="text/html" title="On sameness in programming" /><published>2021-04-22T10:09:18+00:00</published><updated>2021-04-22T10:09:18+00:00</updated><id>/dop/2021/04/22/sameness-in-programming</id><content type="html" xml:base="/dop/2021/04/22/sameness-in-programming.html">&lt;p&gt;We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?&lt;/p&gt;

&lt;h1 id=&quot;ship-of-theseus&quot;&gt;Ship of Theseus&lt;/h1&gt;

&lt;p&gt;Do you know the story about the ship of Theseus? This Greek hero whose ship, according to legend, was preserved by the Athenians for centuries: they removed the worn planks from the ship and replaced them until no original planks remained.&lt;/p&gt;

&lt;p&gt;The question then arose as to whether it was still the same ship or whether the maintenance had made it a different ship.&lt;/p&gt;

&lt;p&gt;What do you think? And most importantly what does that have to do with programming?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/theseus.png&quot; alt=&quot;ship&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-math&quot;&gt;Sameness in math&lt;/h1&gt;

&lt;p&gt;Let’s start by exploring the concept of sameness in math and ask ourselves a question similar to the ship of Theseus in the realm of sets.&lt;/p&gt;

&lt;p&gt;Consider a set with three elements: the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;What happens when we replace a number from this set, for example: the number 3 by the number 4?&lt;/p&gt;

&lt;p&gt;Obviously, we get a set than is not the same as the original set!&lt;/p&gt;

&lt;p&gt;Now imagine that we have a set with the numbers 1, 2 and 10. What happens when we replace 10 with 3? Well, we get a set with the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;A set with the numbers 1, 2 and 3 like the one in the previous example? Is it the same set or another set with the same elements? Funny question, isn’t it?&lt;/p&gt;

&lt;p&gt;For mathematics, the answer is formal: two sets having the same elements are the same! This is one of the axioms of axiomatic set theory. This axiom even has a pretty name: it is called the axiom of extensionality&lt;sup id=&quot;fnref:extensionality&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:extensionality&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;According to mathematics, therefore, the ship of Theseus is no longer the same as soon as one of its planks is replaced&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-programming&quot;&gt;Sameness in programming&lt;/h1&gt;

&lt;p&gt;Let’s move on to programming now, if you don’t mind. Imagine a product sold on an e-commerce site, a pretty coffee mug, for instance. Let’s simplify it and say that a mug has only two attributes: a description and a price. What happens when you drop the price of a cup? Is this the same cup or is it a different cup?&lt;/p&gt;

&lt;p&gt;Obviously, this is the same cup! In programming, the identity of an object is more than the values ​​of its attributes.&lt;/p&gt;

&lt;p&gt;According to programming, therefore, the ship of Theseus remains the same, although all its planks have been replaced.&lt;/p&gt;

&lt;h1 id=&quot;functional-programming&quot;&gt;Functional programming&lt;/h1&gt;

&lt;p&gt;We are at the core of an obvious contradiction between the world of programming and the world of mathematics. As Bruce MacLennan so beautifully wrote in his beautiful article “Values ​​and Objects in Programming Languages”, in 1982&lt;sup id=&quot;fnref:paper&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paper&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math is value oriented programming.&lt;/p&gt;

  &lt;p&gt;Programming is object-oriented mathematics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What he means by an object is an entity having a set of attributes at a given time. Whereas a value is, by definition, an entity that never changes.&lt;/p&gt;

&lt;p&gt;In a way, it can be said that the fundamental divergences between functional programming and object-oriented programming revolve around the manipulation of the object/value cursor. Functional programming encourages developers to activate the cursor towards values ​​while object-oriented programming encourages developers to activate the cursor towards objects.&lt;/p&gt;

&lt;p&gt;One of the reasons why a program written in functional programming is less complex than an object-oriented program is because, as we have just seen, it is more complex to define the sameness of objects than the sameness of values.&lt;/p&gt;

&lt;h1 id=&quot;back-to-theseus&quot;&gt;Back to Theseus&lt;/h1&gt;

&lt;p&gt;Writing a program these days is sometimes as much of a challenge as finding a way out of Daedalus’ Labyrinth. According to legend, Theseus managed to find his way out of the Labyrinth with the help of Ariadne’s thread.
I am going to let you meditate on the following question: Could we consider functional programming as Ariadne’s thread that will allow us to find our way out of the maze of complexity created by our programs?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:extensionality&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Axiom_of_extensionality &lt;a href=&quot;#fnref:extensionality&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paper&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;MacLennan, Bruce. (1982). &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;. &lt;a href=&quot;#fnref:paper&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="maths" /><summary type="html">We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?</summary></entry><entry><title type="html">On sameness in programming</title><link href="/dop/2021/04/21/sameness-in-programming-2.html" rel="alternate" type="text/html" title="On sameness in programming" /><published>2021-04-21T02:09:18+00:00</published><updated>2021-04-21T02:09:18+00:00</updated><id>/dop/2021/04/21/sameness-in-programming-2</id><content type="html" xml:base="/dop/2021/04/21/sameness-in-programming-2.html">&lt;p&gt;We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?&lt;/p&gt;

&lt;h1 id=&quot;ship-of-theseus&quot;&gt;Ship of Theseus&lt;/h1&gt;

&lt;p&gt;Do you know the story about the ship of Theseus? This Greek hero whose ship, according to legend, was preserved by the Athenians for centuries: they removed the worn planks from the ship and replaced them until no original planks remained.&lt;/p&gt;

&lt;p&gt;The question then arose as to whether it was still the same ship or whether the maintenance had made it a different ship.&lt;/p&gt;

&lt;p&gt;What do you think? And most importantly what does that have to do with programming?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/theseus.png&quot; alt=&quot;ship&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-math&quot;&gt;Sameness in math&lt;/h1&gt;

&lt;p&gt;Let’s start by exploring the concept of sameness in math and ask ourselves a question similar to the ship of Theseus in the realm of sets.&lt;/p&gt;

&lt;p&gt;Consider a set with three elements: the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;What happens when we replace a number from this set, for example: the number 3 by the number 4?&lt;/p&gt;

&lt;p&gt;Obviously, we get a set than is not the same as the original set!&lt;/p&gt;

&lt;p&gt;Now imagine that we have a set with the numbers 1, 2 and 10. What happens when we replace 10 with 3? Well, we get a set with the numbers 1, 2 and 3.&lt;/p&gt;

&lt;p&gt;A set with the numbers 1, 2 and 3 like the one in the previous example? Is it the same set or another set with the same elements? Funny question, isn’t it?&lt;/p&gt;

&lt;p&gt;For mathematics, the answer is formal: two sets having the same elements are the same! This is one of the axioms of axiomatic set theory. This axiom even has a pretty name: it is called the axiom of extensionality&lt;sup id=&quot;fnref:extensionality&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:extensionality&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;According to mathematics, therefore, the ship of Theseus is no longer the same as soon as one of its planks is replaced&lt;/p&gt;

&lt;h1 id=&quot;sameness-in-programming&quot;&gt;Sameness in programming&lt;/h1&gt;

&lt;p&gt;Let’s move on to programming now, if you don’t mind. Imagine a product sold on an e-commerce site, a pretty coffee mug, for instance. Let’s simplify it and say that a mug has only two attributes: a description and a price. What happens when you drop the price of a cup? Is this the same cup or is it a different cup?&lt;/p&gt;

&lt;p&gt;Obviously, this is the same cup! In programming, the identity of an object is more than the values ​​of its attributes.&lt;/p&gt;

&lt;p&gt;According to programming, therefore, the ship of Theseus remains the same, although all its planks have been replaced.&lt;/p&gt;

&lt;h1 id=&quot;functional-programming&quot;&gt;Functional programming&lt;/h1&gt;

&lt;p&gt;We are at the core of an obvious contradiction between the world of programming and the world of mathematics. As Bruce MacLennan so beautifully wrote in his beautiful article “Values ​​and Objects in Programming Languages”, in 1982&lt;sup id=&quot;fnref:paper&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paper&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math is value oriented programming.&lt;/p&gt;

  &lt;p&gt;Programming is object-oriented mathematics.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What he means by an object is an entity having a set of attributes at a given time. Whereas a value is, by definition, an entity that never changes.&lt;/p&gt;

&lt;p&gt;In a way, it can be said that the fundamental divergences between functional programming and object-oriented programming revolve around the manipulation of the object/value cursor. Functional programming encourages developers to activate the cursor towards values ​​while object-oriented programming encourages developers to activate the cursor towards objects.&lt;/p&gt;

&lt;p&gt;One of the reasons why a program written in functional programming is less complex than an object-oriented program is because, as we have just seen, it is more complex to define the sameness of objects than the sameness of values.&lt;/p&gt;

&lt;h1 id=&quot;back-to-theseus&quot;&gt;Back to Theseus&lt;/h1&gt;

&lt;p&gt;Writing a program these days is sometimes as much of a challenge as finding a way out of Daedalus’ Labyrinth. According to legend, Theseus managed to find his way out of the Labyrinth with the help of Ariadne’s thread.
I am going to let you meditate on the following question: Could we consider functional programming as Ariadne’s thread that will allow us to find our way out of the maze of complexity created by our programs?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:extensionality&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Axiom_of_extensionality &lt;a href=&quot;#fnref:extensionality&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paper&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;MacLennan, Bruce. (1982). &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;. &lt;a href=&quot;#fnref:paper&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="maths" /><summary type="html">We often talk about the importance of writing our code in terms of pure functions which, like math functions, have no side effects and return the same values ​​for the same arguments. In this article, I propose to explore another fundamental aspect of the difference between functional programming and object-oriented programming: the notion of sameness, that is to say: how do we define that two “things” are the same?</summary></entry><entry><title type="html">La notion de mêmeté en programmation</title><link href="/dop/2021/04/18/memete-programmation.html" rel="alternate" type="text/html" title="La notion de mêmeté en programmation" /><published>2021-04-18T15:04:28+00:00</published><updated>2021-04-18T15:04:28+00:00</updated><id>/dop/2021/04/18/memete-programmation</id><content type="html" xml:base="/dop/2021/04/18/memete-programmation.html">&lt;p&gt;On parle souvent de l’importance d’écrire notre code en termes de fonctions pures qui, comme les fonctions mathématiques, n’ont pas d’effets de bords et retournent les mêmes valeurs pour les mêmes arguments. Dans cet article, je vous propose d’explorer un autre aspect fondamental de la différence entre la programmation fonctionnelle et la programmation orientée objet: la notion de mêmeté, c’est-à-dire: comment définit-on que deux “choses” sont les mêmes?&lt;/p&gt;

&lt;h1 id=&quot;une-histoire-un-peu-bateau&quot;&gt;Une histoire un peu bateau&lt;/h1&gt;

&lt;p&gt;Connaissez-vous l’histoire du bateau de Thésée? Ce héros grec dont le bateau, selon la légende, aurait été préservé par les Athéniens durant des siècles: ils retiraient les planches usées du bateau et les remplaçaient jusq’au point où il ne restait plus aucune planche d’origine.&lt;/p&gt;

&lt;p&gt;Se posa alors la question de savoir s’il s’agissait encore du même bateau ou bien si l’entretien en avait fait un tout autre bateau.&lt;/p&gt;

&lt;p&gt;Qu’en pensez-vous? Et surtout qu’est-ce que cela a à voir avec les maths et la programmation?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/theseus.png&quot; alt=&quot;ship&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;la-mêmeté-en-maths&quot;&gt;La mêmeté en maths&lt;/h1&gt;

&lt;p&gt;Commençons par les maths en nous posant une question similaire concernant le concept le plus fondamental des mathématiques: le concept d’ensemble.&lt;/p&gt;

&lt;p&gt;Prenons un ensemble avec trois éléments: les nombres 1, 2 et 3.&lt;/p&gt;

&lt;p&gt;Que se passe-t-il quand on remplace un nombre de cet ensemble, par exemple: le nombre 3 par le nombre 4?&lt;/p&gt;

&lt;p&gt;Bien évidemment, nous obtenons un ensemble différent de l’ensemble d’origine!&lt;/p&gt;

&lt;p&gt;Maintenant imaginons que nous ayons un ensemble avec les nombres 1, 2 et 10. Que se passe-t-il quand on remplace 10 par 3? Et bien, me direz-vous nous obtenons un ensemble avec les nombres 1, 2 et 3.&lt;/p&gt;

&lt;p&gt;Un ensemble avec les nombres 1, 2 et 3 comme celui de l’exemple précédent? S’agit-il du même ensemble ou bien d’un autre ensemble avec les mêmes éléments? Drôle de question, non?&lt;/p&gt;

&lt;p&gt;Et bien pour les mathématiques, la réponse est formelle: deux ensembles ayant les mêmes éléments sont les mêmes! C’est l’un des axiomes de la théorie axiomatique des ensembles. Cet axiome porte même un joli nom: on l’appelle l’axiome de l’extensionnalité&lt;sup id=&quot;fnref:extensionality&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:extensionality&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Selon les mathématiques donc, le bateau de Thésée n’est plus le même dès que l’on remplace une de ses planches.&lt;/p&gt;

&lt;h1 id=&quot;la-mêmeté-en-programmation&quot;&gt;La mêmeté en programmation&lt;/h1&gt;

&lt;p&gt;Passons à la programmation maintenant, si vous le voulez bien. Imaginons un produit vendu sur un site e-commerce, une jolie tasse à café, par exemple. Simplifions les choses et disons qu’une tasse ne possède que deux attributs: un descriptif et un prix. Que se passe-t-il quand on baisse le prix d’une tasse? S’agit-il de la même tasse ou bien d’une autre tasse?&lt;/p&gt;

&lt;p&gt;Bien évidemment, il s’agit de la même tasse! En programmation, l’identité d’un objet ne se résume pas à la valeurs de ses attributs.&lt;/p&gt;

&lt;p&gt;Selon la programmation donc, le bateau de Thésée reste le même, bien que toutes ses planches aient été remplacées.&lt;/p&gt;

&lt;h1 id=&quot;la-programmation-fonctionnelle&quot;&gt;La programmation fonctionnelle&lt;/h1&gt;

&lt;p&gt;Nous sommes ici au coeur d’une contradiction manifeste entre le monde de la programmation et le monde des mathématiques. Comme l’a si joliment écrit Bruce MacLennan dans son très bel article “Values and Objects in Programming Languages”, en 1982&lt;sup id=&quot;fnref:paper&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:paper&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Les mathématiques, c’est de la programmation orientée valeur.&lt;/p&gt;

  &lt;p&gt;La programmation, c’est des mathématiques orientées objet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ce qu’il entend par un objet, c’est une entité ayant un ensemble d’attributs à un moment donné. Alors qu’une valeur est, par définition, une entité qui ne change jamais.&lt;/p&gt;

&lt;p&gt;D’une certaine façon, on peut dire que les divergences fondamentales entre la programmation fonctionnelle et la programmation orientée objet tournent autour de la manipulation du curseur objet/valeur. La programmation fonctionnelle encourage le développeurs à activer le curseur vers les valeurs alors que la programmation orientée objet encourage les développeurs à activer le curseur vers les objets.&lt;/p&gt;

&lt;p&gt;Une des raisons pour lesquelles un programme écrit en programmation fonctionnelle est moins complexe qu’un programme orienté objet, c’est car comme on vient de le voir il est plus complexe de définir la mêmeté des objets que la mêmeté des valeurs.&lt;/p&gt;

&lt;h1 id=&quot;retour-à-thésée&quot;&gt;Retour à Thésée&lt;/h1&gt;

&lt;p&gt;Écrire un programme de nos jours représente parfois un défi aussi grand que trouver la sortie du labyrinthe de Dédale. Selon la légende, Thésée parvint à sortir du labyrinthe de Dédale grâce à une pelote de fil qu’Ariane lui avait fournit en entrant dans le labyrinthe. Je vous laisse méditer sur la question suivante: Pouvons-nous espérer que la programmation fonctionnelle représente le file d’Ariane qui nous permettra de nous sortir des dédales des programmes que nous écrivons?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:extensionality&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://en.wikipedia.org/wiki/Axiom_of_extensionality &lt;a href=&quot;#fnref:extensionality&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:paper&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;MacLennan, Bruce. (1982). &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;. &lt;a href=&quot;#fnref:paper&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="maths" /><summary type="html">On parle souvent de l’importance d’écrire notre code en termes de fonctions pures qui, comme les fonctions mathématiques, n’ont pas d’effets de bords et retournent les mêmes valeurs pour les mêmes arguments. Dans cet article, je vous propose d’explorer un autre aspect fondamental de la différence entre la programmation fonctionnelle et la programmation orientée objet: la notion de mêmeté, c’est-à-dire: comment définit-on que deux “choses” sont les mêmes?</summary></entry></feed>