<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-08-10T05:50:14+00:00</updated><id>/feed.xml</id><title type="html">Yehonathan Sharvit</title><subtitle>Developer. Author. Speaker.</subtitle><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><entry><title type="html">Separate data schema from data representation</title><link href="/databook/2022/06/22/data-validation.html" rel="alternate" type="text/html" title="Separate data schema from data representation" /><published>2022-06-22T02:35:24+00:00</published><updated>2022-06-22T02:35:24+00:00</updated><id>/databook/2022/06/22/data-validation</id><content type="html" xml:base="/databook/2022/06/22/data-validation.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With data separated from code and represented with generic and immutable data structures, now comes the question of how do we express the shape of the data? In DOP, the expected shape is expressed as a data schema that is kept separated from the data itself. The main benefit of Principle #4 is that it allows developers to decide which pieces of data should have a schema and which pieces of data should not.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/ajv/6.12.6/ajv.bundle.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js&quot; integrity=&quot;sha256-8E6QUcFg1KTnpEU8TFGhpTGHw5fJqB9vCms3OhAYLqw=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;script&gt;
window.ajv = new Ajv();
&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is an exploration of the fourth principle of Data-Oriented Programming. The other principles of DOP are explored here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1&lt;/a&gt;: Separating code (behavior) from data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2&lt;/a&gt;: Representing data with generic data structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt;: Treating data as immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/data-validation.html&quot;&gt;Principle #4&lt;/a&gt;: Separating data schema from data representation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;Principle #4&lt;/em&gt;&amp;#8201;&amp;#8212;&amp;#8201;Separate data schema from data representation.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-4&quot;&gt;Illustration of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Think about handling a request for the addition of an author to the system. To keep things simple, imagine that such a request contains only basic information about the author: their first name and last name and, optionally, the number of books they have written. As seen in Principle #2 (represent data with generic data structures), in DOP, request data is represented as a string map, where the map is expected to have three fields:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;firstName&lt;/code&gt;&amp;#8201;&amp;#8212;&amp;#8201;a string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lastName&lt;/code&gt;&amp;#8201;&amp;#8212;&amp;#8201;a string&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;books&lt;/code&gt;&amp;#8201;&amp;#8212;&amp;#8201;a number (optional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DOP, the expected shape of data is represented as data that is kept separate from the request data. For instance, JSON schema (&lt;a href=&quot;https://json-schema.org/&quot; class=&quot;bare&quot;&gt;https://json-schema.org/&lt;/a&gt;) can represent the data schema of the request with a map. The following listing provides an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;add-author-request-schema-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var addAuthorRequestSchema = {
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;, // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
  &amp;quot;required&amp;quot;: [&amp;quot;firstName&amp;quot;, &amp;quot;lastName&amp;quot;], // &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
  &amp;quot;properties&amp;quot;: {
    &amp;quot;firstName&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;}, // &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
    &amp;quot;lastName&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;}, // &lt;b class=&quot;conum&quot;&gt;(4)&lt;/b&gt;
    &amp;quot;books&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;} // &lt;b class=&quot;conum&quot;&gt;(5)&lt;/b&gt;
  }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data is expected to be a map (in JSON, a map is called an object).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; fields are required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;firstName&lt;/code&gt; must be a string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lastName&lt;/code&gt; must be a string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;books&lt;/code&gt; must be a number (when it is provided).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A data validation library is used to check whether a piece of data conforms to a data schema. For instance, we could use Ajv JSON schema validator (&lt;a href=&quot;https://ajv.js.org/&quot; class=&quot;bare&quot;&gt;https://ajv.js.org/&lt;/a&gt;) to validate data with the &lt;code&gt;validate&lt;/code&gt; function that returns &lt;code&gt;true&lt;/code&gt; when data is valid and &lt;code&gt;false&lt;/code&gt; when data is invalid. The following listing shows this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;check-data-validity-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var validAuthorData = {
  firstName: &amp;quot;Isaac&amp;quot;,
  lastName: &amp;quot;Asimov&amp;quot;,
  books: 500
};

ajv.validate(addAuthorRequestSchema, 
  validAuthorData); //  &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
// → true

var invalidAuthorData = {
  firstName: &amp;quot;Isaac&amp;quot;,
  lastNam: &amp;quot;Asimov&amp;quot;,
  books: &amp;quot;five hundred&amp;quot;
};

ajv.validate(addAuthorRequestSchema, 
  invalidAuthorData); // &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
// → false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data is valid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data has &lt;code&gt;lastNam&lt;/code&gt; instead of &lt;code&gt;lastName&lt;/code&gt;, and &lt;code&gt;books&lt;/code&gt; is a string instead of a number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data is invalid, the details about data validation failures are available in a human readable format. The next listing shows this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;data-validation-errors-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var invalidAuthorData = {
  firstName: &amp;quot;Isaac&amp;quot;,
  lastNam: &amp;quot;Asimov&amp;quot;,
  books: &amp;quot;five hundred&amp;quot;
};

var ajv = new Ajv({allErrors: true}); // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
ajv.validate(addAuthorRequestSchema, invalidAuthorData);
ajv.errorsText(ajv.errors); // &amp;lt;2&amp;gt; 
// → &amp;quot;data should have required property &amp;#39;lastName&amp;#39;,
// →  data.books should be number&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;By default, Ajv stores only the first data validation error. Set &lt;code&gt;allErrors: true&lt;/code&gt; to store all errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data validation errors are stored internally as an array. In order to get a human readable string, use the &lt;code&gt;errorsText&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-4&quot;&gt;Benefits of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separation of data schema from data representation provides numerous benefits. The following sections describe these benefits in detail:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Freedom to choose what data should be validated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced data validation conditions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic generation of data model visualization&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-freedom-to-choose-what-data-should-be-validated&quot;&gt;Benefit #1: Freedom to choose what data should be validated&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data schema is separated from data representation, we can instantiate data without specifying its expected shape. Such freedom is useful in various situations. For example,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rapid prototyping or experimentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code refactoring and data validation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider rapid prototyping. In classic OOP, we need to instantiate every piece of data through a class. During the exploration phase of coding, when the final shape of our data is not yet known, being forced to update the class definition each time the data model changes slows us down. DOP enables a faster pace during the exploration phase by delaying the data schema definition to a later phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One common refactoring pattern is split phase refactoring (&lt;a href=&quot;https://refactoring.com/catalog/splitPhase.html&quot; class=&quot;bare&quot;&gt;https://refactoring.com/catalog/splitPhase.html&lt;/a&gt;), where a single large function is split into multiple smaller functions with private scope. We call these functions, with data that has already been validated by the larger function. In DOP, it is not necessary to specify the shape of the arguments of the inner functions, relying on the data validation that has already occurred.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider how to display some information about an author, such as their full name and whether they are considered prolific. Using the code shown earlier to illustrate Principle #2 to calculate the full name and the prolificity level of the author, one might come up with a &lt;code&gt;displayAuthorInfo&lt;/code&gt; function as the following listing shows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-info-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class NameCalculation {
  static fullName(data) {
    return data.firstName + &amp;quot; &amp;quot; + data.lastName;
  }
}

class AuthorRating {
  static isProlific (data) {
    return data.books &amp;gt; 100;
  }
}

var authorSchema = {
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;required&amp;quot;: [&amp;quot;firstName&amp;quot;, &amp;quot;lastName&amp;quot;],
  &amp;quot;properties&amp;quot;: {
    &amp;quot;firstName&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
    &amp;quot;lastName&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
    &amp;quot;books&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;}
  }
};

function displayAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &amp;quot;displayAuthorInfo called with invalid data&amp;quot;;
  };
  console.log(&amp;quot;Author full name is: &amp;quot;,
    NameCalculation.fullName(authorData));
  if(authorData.books == null) {
    console.log(&amp;quot;Author has not written any book&amp;quot;);
  } else {
    if (AuthorRating.isProlific(authorData)) {
      console.log(&amp;quot;Author is prolific&amp;quot;);
    } else {
      console.log(&amp;quot;Author is not prolific&amp;quot;);
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the first thing done inside the body of &lt;code&gt;displayAuthorInfo&lt;/code&gt; is to validate that the argument passed to the function. Now, apply the split phase refactoring pattern to this simple example and split the body of &lt;code&gt;displayAuthorInfo&lt;/code&gt; into two inner functions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;displayFullName&lt;/code&gt; displays the author&amp;#8217;s full name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;displayProlificity&lt;/code&gt; displays whether the author is prolific or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next listing shows the resulting code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-info-refactored-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function displayFullName(authorData) {
  console.log(&amp;quot;Author full name is: &amp;quot;, 
    NameCalculation.fullName(authorData));
}

function displayProlificity(authorData) {
  if(authorData.books == null) {
    console.log(&amp;quot;Author has not written any book&amp;quot;);
  } else {
    if (AuthorRating.isProlific(authorData)) {
      console.log(&amp;quot;Author is prolific&amp;quot;);
    } else {
      console.log(&amp;quot;Author is not prolific&amp;quot;);
    }
  }
}

function displayAuthorInfo(authorData) {
  if(!ajv.validate(authorSchema, authorData)) {
    throw &amp;quot;displayAuthorInfo called with invalid data&amp;quot;;
  };
  displayFullName(authorData);
  displayProlificity(authorData);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having the data schema separated from data representation eliminates the need to specify a data schema for the arguments of the inner functions &lt;code&gt;displayFullName&lt;/code&gt; and &lt;code&gt;displayProlificity&lt;/code&gt;. It makes the refactoring process a bit smoother. In some cases, the inner functions are more complicated, and it makes sense to specify a data schema for their arguments. DOP gives us the freedom to choose!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-optional-fields&quot;&gt;Benefit #2: Optional fields&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In OOP, allowing a class member to be optional is not easy. For instance, in Java one needs a special construct like the &lt;code&gt;Optional&lt;/code&gt; class introduced in Java 8 (&lt;a href=&quot;http://mng.bz/4jWa&quot; class=&quot;bare&quot;&gt;http://mng.bz/4jWa&lt;/a&gt;). In DOP, it is natural to declare a field as optional in a map. In fact, in JSON Schema, by default, every field is optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to make a field not optional, its name must be included in the &lt;code&gt;required&lt;/code&gt; array as, for instance, in the author schema in the following listing, where only &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; are required, and &lt;code&gt;books&lt;/code&gt; is optional. Notice that when an optional field is defined in a map, its value is validated against the schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-schema-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var authorSchema = {
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;required&amp;quot;: [&amp;quot;firstName&amp;quot;, &amp;quot;lastName&amp;quot;], // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
  &amp;quot;properties&amp;quot;: {
    &amp;quot;firstName&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
    &amp;quot;lastName&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;},
    &amp;quot;books&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;number&amp;quot;} // &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
  }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;books&lt;/code&gt; is not included in &lt;code&gt;required&lt;/code&gt; as it is an optional field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When present, &lt;code&gt;books&lt;/code&gt; must be a number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s illustrate how the validation function deals with optional fields. A map without a &lt;code&gt;books&lt;/code&gt; field is considered to be valid:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-no-books-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var authorDataNoBooks = {
  &amp;quot;firstName&amp;quot;: &amp;quot;Yehonathan&amp;quot;,
  &amp;quot;lastName&amp;quot;: &amp;quot;Sharvit&amp;quot;
};

ajv.validate(authorSchema, authorDataNoBooks); // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
// → true &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The validation passes as &lt;code&gt;books&lt;/code&gt; is an optional field.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, a map with a &lt;code&gt;books&lt;/code&gt; field, where the value is not a number, is considered to be invalid:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-invalid-books-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var authorDataInvalidBooks = {
  &amp;quot;firstName&amp;quot;: &amp;quot;Albert&amp;quot;,
  &amp;quot;lastName&amp;quot;: &amp;quot;Einstein&amp;quot;,
  &amp;quot;books&amp;quot;: &amp;quot;Five&amp;quot;
};

ajv.validate(authorSchema, authorDataInvalidBooks); // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
// → false &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The validation fails as &lt;code&gt;books&lt;/code&gt; is not a number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-advanced-data-validation-conditions&quot;&gt;Benefit #3: Advanced data validation conditions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DOP, data validation occurs at run time. It allows the definition of data validation conditions that go beyond the type of a field. For example, validating that a field is not only a string, but a string with a maximal number of characters or a number comprised in a range of numbers as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JSON Schema supports many other advanced data validation conditions such as regular expression validation for string fields or number fields that should be a multiple of a given number. The author schema in the following listing expects &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; to be strings of less than 100 characters, and &lt;code&gt;books&lt;/code&gt; to be a number between 0 and 10,000.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-schema-complex-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var authorComplexSchema = {
  &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
  &amp;quot;required&amp;quot;: [&amp;quot;firstName&amp;quot;, &amp;quot;lastName&amp;quot;],
  &amp;quot;properties&amp;quot;: {
    &amp;quot;firstName&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;maxLength&amp;quot;: 100
    },
    &amp;quot;lastName&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;,
      &amp;quot;maxLength&amp;quot;: 100
    },
    &amp;quot;books&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;,
      &amp;quot;minimum&amp;quot;: 0,
      &amp;quot;maximum&amp;quot;: 10000
    }
  }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-4-automatic-generation-of-data-model-visualization&quot;&gt;Benefit #4: Automatic generation of data model visualization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the data schema defined as data, we can use several tools to generate data model visualizations. With tools like JSON Schema Viewer (&lt;a href=&quot;https://navneethg.github.io/jsonschemaviewer/&quot; class=&quot;bare&quot;&gt;https://navneethg.github.io/jsonschemaviewer/&lt;/a&gt;) and Malli (&lt;a href=&quot;https://github.com/metosin/malli&quot; class=&quot;bare&quot;&gt;https://github.com/metosin/malli&lt;/a&gt;), a UML diagram can be generated from a JSON schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, the JSON schema in the following listing defines the shape of a &lt;code&gt;bookList&lt;/code&gt; field, which is an array of books where each book is a map, and in the following figure, it is visualized as a UML diagram. These tools generate the UML diagram from the JSON schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-schema-visualize&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;bookList&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;array&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;publicationYear&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;tok-nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;author-schema-uml&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/author-schema.png&quot; alt=&quot;author schema&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cost-for-principle-4&quot;&gt;Cost for Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Applying Principle #4 comes with a price. The following sections look at these costs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weak connection between data and its schema&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-1-weak-connection-between-data-and-its-schema&quot;&gt;Cost #1: Weak connection between data and its schema&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By definition, when data schema and data representation are separated, the connection between data and its schema is weaker that when data is represented with classes. Moreover, the schema definition language (e.g., JSON Schema) is not part of the programming language. It is up to the developer to decide where data validation is necessary and where it is superfluous. As the idiom says, with great power comes great responsibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-2-light-performance-hit&quot;&gt;Cost #2: Light performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned earlier, there exist implementations of JSON schema validation in most programming languages. In DOP, data validation occurs at run time, and it takes some time to run the data validation. In OOP, data validation occurs usually at compile time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This drawback is mitigated by the fact that, even in OOP, some parts of data validation occur at run time. For instance, the conversion of a request JSON payload into an object occurs at run time. Moreover, in DOP, it is quite common to have some data validation parts enabled only during development and to disable them when the system runs in production. As a consequence, this performance hit is not significant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-of-principle-4&quot;&gt;Summary of Principle #4&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DOP, data is represented with immutable generic data structures. When additional information about the shape of the data is required, a data schema can be defined (e.g., using JSON Schema). Keeping the data schema separate from the data representation gives us the freedom to decide where data should be validated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, data validation occurs at run time. As a consequence, data validation conditions that go beyond the static data types (e.g., the string length) can be expressed. However, with great power comes great responsibility, and it is up to the developer to remember to validate data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DOP Principle #4: Separate between data schema and data representation&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To adhere to this principle, separate between data schema and data representation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/do-principle-4-schema.png&quot; alt=&quot;do principle 4 schema&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benefits include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Freedom to choose what data should be validated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced data validation conditions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic generation of data model visualization&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cost for implementing Principle #4 includes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Weak connection between data and its schema&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A small performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">With data separated from code and represented with generic and immutable data structures, now comes the question of how do we express the shape of the data? In DOP, the expected shape is expressed as a data schema that is kept separated from the data itself. The main benefit of Principle #4 is that it allows developers to decide which pieces of data should have a schema and which pieces of data should not.</summary></entry><entry><title type="html">Data is immutable</title><link href="/databook/2022/06/22/immutable-data.html" rel="alternate" type="text/html" title="Data is immutable" /><published>2022-06-22T02:34:24+00:00</published><updated>2022-06-22T02:34:24+00:00</updated><id>/databook/2022/06/22/immutable-data</id><content type="html" xml:base="/databook/2022/06/22/immutable-data.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With data separated from code and represented with generic data structures, how are changes to the data managed? DOP is very strict on this question. Mutation of data is not allowed! In DOP, changes to data are accomplished by creating new versions of the data. The &lt;em&gt;reference&lt;/em&gt; to a variable may be changed so that it refers to a new version of the data, but the &lt;em&gt;value&lt;/em&gt; of the data itself must never change.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/immutable/4.0.0/immutable.min.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is an exploration of the third principle of Data-Oriented Programming. The other principles of DOP are explored here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1&lt;/a&gt;: Separating code (behavior) from data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2&lt;/a&gt;: Representing data with generic data structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt;: Treating data as immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/data-validation.html&quot;&gt;Principle #4&lt;/a&gt;: Separating data schema from data representation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;Principle #3&lt;/em&gt;&amp;#8201;&amp;#8212;&amp;#8201;Data is immutable.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-3&quot;&gt;Illustration of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Think about the number 42. What happens to 42 when you add 1 to it? Does it become 43? No, 42 stays 42 forever! Now, put 42 inside an object: &lt;code&gt;{num: 42}&lt;/code&gt;. What happens to the object when you add 1 to 42? Does it become 43? It depends on the programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Clojure, a programming language that embraces data immutability, the value of the &lt;code&gt;num&lt;/code&gt; field stays &lt;code&gt;42&lt;/code&gt; forever, no matter what.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In many programming languages, the value of the &lt;code&gt;num&lt;/code&gt; field becomes &lt;code&gt;43&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, in JavaScript, mutating the field of a map referred by two variables has an impact on both variables. The following listing demonstrates this.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;mutating-data-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = {num: 42};
var yourData = myData;

yourData.num = yourData.num + 1;
console.log(myData.num);
// → 43&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, &lt;code&gt;myData.num&lt;/code&gt; equals &lt;code&gt;43&lt;/code&gt;. According to DOP, however, data should never change! Instead of mutating data, a new version of it is created. A naive (and inefficient) way to create a new version of a data is to clone it before modifying it. For instance, in the following listing, there is a function that changes the value of a field inside an object by cloning the object via &lt;code&gt;Object.assign&lt;/code&gt;, provided natively by JavaScript. When &lt;code&gt;changeValue&lt;/code&gt; is called on &lt;code&gt;myData&lt;/code&gt;, &lt;code&gt;myData&lt;/code&gt; is not affected; &lt;code&gt;myData.num&lt;/code&gt; remains &lt;code&gt;42&lt;/code&gt;. This is the essence of data immutability!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;cloning-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function changeValue(obj, k, v) {
  var res = Object.assign({}, obj);
  res[k] = v;
  return res;
}

var myData = {num: 42};
var yourData = changeValue(myData, &amp;quot;num&amp;quot;, myData.num + 1);
console.log(myData.num);
// → 42&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Embracing immutability in an efficient way, both in terms of computation and memory, requires a third-party library like Immutable.js (&lt;a href=&quot;https://immutable-js.com/&quot; class=&quot;bare&quot;&gt;https://immutable-js.com/&lt;/a&gt;), which provides an efficient implementation of persistent data structures (a.k.a. immutable data structures). In most programming languages, there exist libraries that provide an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With &lt;code&gt;Immutable.js&lt;/code&gt;, JavaScript native maps and arrays are not used, but rather, immutable maps and immutable lists instantiated via &lt;code&gt;Immutable.Map&lt;/code&gt; and &lt;code&gt;Immutable.List&lt;/code&gt;. An element of a map is accessed using the &lt;code&gt;get&lt;/code&gt; method. A new version of the map is created when a field is modified with the &lt;code&gt;set&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how to create and manipulate immutable data efficiently with a third-party library. In the output, &lt;code&gt;yourData.get(&quot;num&quot;)&lt;/code&gt; is &lt;code&gt;43&lt;/code&gt;, but &lt;code&gt;myData.get(&quot;num&quot;)&lt;/code&gt; remains &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;immutable-js-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = Immutable.Map({num: 42})
var yourData = myData.set(&amp;quot;num&amp;quot;, 43);
console.log(yourData.get(&amp;quot;num&amp;quot;));
// → 43
console.log(myData.get(&amp;quot;num&amp;quot;));
// → 42&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When data is immutable, instead of mutating data, a new version of it is created.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-3&quot;&gt;Benefits of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When programs are constrained from mutating data, we derive benefit in numerous ways. The following sections detail these benefits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data access to all with confidence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predictable code behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast equality checks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrency safety for free&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-data-access-to-all-with-confidence&quot;&gt;Benefit #1: Data access to all with confidence&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;According to Principle #1 (separate code from data), data access is transparent. Any function is allowed to access any piece of data. Without data immutability, we must be careful when passing data as an argument to a function. We can either make sure the function does not mutate the data or clone the data before it is passed to the function. When adhering to data immutability, none of this is required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When data is immutable, it can be passed to any function with confidence because data never changes.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-predictable-code-behavior&quot;&gt;Benefit #2: Predictable code behavior&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an illustration of what is meant by &lt;em&gt;predictable&lt;/em&gt;, here is an example of an &lt;em&gt;unpredictable&lt;/em&gt; piece of code that does not adhere to data immutability. Take a look at the piece of asynchronous JavaScript code in the following listing. When data is mutable, the behavior of asynchronous code is not predictable.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;async-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var myData = {num: 42};
setTimeout(function (data){
  console.log(data.num);
}, 1000, myData);
myData.num = 0;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The value of &lt;code&gt;data.num&lt;/code&gt; inside the timeout callback is not predictable. It depends on whether the data is modified by another piece of code during the 1,000 ms of the timeout. However, with immutable data, it is guaranteed that data never changes and that &lt;code&gt;data.num&lt;/code&gt; is always &lt;code&gt;42&lt;/code&gt; inside the callback.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When data is immutable, the behavior of code that manipulates data is predictable.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-fast-equality-checks&quot;&gt;Benefit #3: Fast equality checks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With UI frameworks like React.js, there are frequent checks to see what portion of the UI data has been modified since the previous rendering cycle. Portions that did not change are not rendered again. In fact, in a typical frontend application, most of the UI data is left unchanged between subsequent rendering cycles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a React application that does not adhere to data immutability, it is necessary to check every (nested) part of the UI data. However, in a React application that follows data immutability, it is possible to optimize the comparison of the data for the case where data is not modified. Indeed, when the object address is the same, then it is certain that the data did not change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comparing object addresses is much faster than comparing all the fields. In Part 1 of my book, fast equality checks are used to reconcile between concurrent mutations in a highly scalable production system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Immutable data enables fast equality checks by comparing data by reference.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-4-free-concurrency-safety&quot;&gt;Benefit #4: Free concurrency safety&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a multi-threaded environment, concurrency safety mechanisms (e.g., mutexes) are often used to prevent the data in thread &lt;code&gt;A&lt;/code&gt; from being modified while it is accessed in thread &lt;code&gt;B&lt;/code&gt;. In addition to the slight performance hit they cause, concurrency safety mechanisms impose a mental burden that makes code writing and reading much more difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Adherence to data immutability eliminates the need for a concurrency mechanism. The data you have in hand never changes!
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cost-for-principle-3&quot;&gt;Cost for Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with the previous principles, applying Principle #3 comes at a price. The following sections look at these costs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Required library for persistent data structures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-1-performance-hit&quot;&gt;Cost #1: Performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned earlier, there exist implementations of persistent data structures in most programming languages. But even the most efficient implementation is a bit slower than the in-place mutation of the data. In most applications, the performance hit and the additional memory consumption involved in using immutable data structures is not significant. But this is something to keep in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-2-required-library-for-persistent-data-structures&quot;&gt;Cost #2: Required library for persistent data structures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like Clojure, the native data structures of the language are immutable. However, in most programming languages, adhering to data immutability requires the inclusion a third-party library that provides an implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact that the data structures are not native to the language means that it is difficult (if not impossible) to enforce the usage of immutable data across the board. Also, when integrating with third-party libraries (e.g., a chart library), persistent data structures must be converted into equivalent native data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-of-principle-3&quot;&gt;Summary of Principle #3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DOP considers data as a value that never changes. Adherence to this principle results in code that is predictable even in a multi-threaded environment, and equality checks are fast. However, a non-negligible mind shift is required, and in most programming languages, a third-party library is needed to provide an efficient implementation of persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DOP Principle #3: Data is immutable&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To adhere to this principle, data is represented with immutable structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/do-principle-3-immutable-data.png&quot; alt=&quot;do principle 3 immutable data&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benefits include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data access to all with confidence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Predictable code behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fast equality checks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrency safety for free&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cost for implementing Principle #3 includes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A performance hit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Required library for persistent data structures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">With data separated from code and represented with generic data structures, how are changes to the data managed? DOP is very strict on this question. Mutation of data is not allowed! In DOP, changes to data are accomplished by creating new versions of the data. The reference to a variable may be changed so that it refers to a new version of the data, but the value of the data itself must never change.</summary></entry><entry><title type="html">Represent data with generic data structures</title><link href="/databook/2022/06/22/generic-data-structures.html" rel="alternate" type="text/html" title="Represent data with generic data structures" /><published>2022-06-22T02:33:24+00:00</published><updated>2022-06-22T02:33:24+00:00</updated><id>/databook/2022/06/22/generic-data-structures</id><content type="html" xml:base="/databook/2022/06/22/generic-data-structures.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When adhering to &lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1 of DOP&lt;/a&gt;, code is separated from data. DOP is not opinionated about the programming constructs to use for organizing the code, but it has a lot to say about how the data should be represented. This is the theme of Principle #2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most common generic data structures are maps (a.k.a. dictionaries) and arrays (or lists). But other generic data structures (e.g., sets, trees, and queues) can be used as well. Principle #2 does not deal with the mutability or the immutability of the data. That is the theme of Principle #3.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js&quot; integrity=&quot;sha256-8E6QUcFg1KTnpEU8TFGhpTGHw5fJqB9vCms3OhAYLqw=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is an exploration of the second principle of Data-Oriented Programming. The other principles of DOP are explored here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1&lt;/a&gt;: Separating code (behavior) from data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2&lt;/a&gt;: Representing data with generic data structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt;: Treating data as immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/data-validation.html&quot;&gt;Principle #4&lt;/a&gt;: Separating data schema from data representation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;Principle #2&lt;/em&gt;&amp;#8201;&amp;#8212;&amp;#8201;Represent application data with generic data structures.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-2&quot;&gt;Illustration of Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DOP, data is represented with generic data structures (like maps and arrays) instead of instantiating data via specific classes. In fact, most of the data entities that appear in a typical application can be represented with maps and arrays (or lists). But there exist other generic data structures (e.g., sets, lists, queues, etc.) that might be required in some use cases. Let&amp;#8217;s look at the same simple example we used to illustrate &lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1&lt;/a&gt; (data that represents an author).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An author is a data entity with a &lt;code&gt;firstName&lt;/code&gt;, a &lt;code&gt;lastName&lt;/code&gt;, and the number of &lt;code&gt;books&lt;/code&gt; they have written. Principle #2 is broken when we use a specific class to represent an author as this listing reveals.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;break-2-oop-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #2 is followed when using a map (a dictionary or an associative array) as a generic data structure that represents an author. The following listing illustrates how we can follow this principle in OOP.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;follow-2-oop-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
  var data = new Map;
  data.firstName = firstName;
  data.lastName = lastName;
  data.books = books;
  return data;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a language like JavaScript, we can also instantiate a map via a data literal, which is a bit more convenient. The following listing shows an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;follow-2-literal-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
  return {
    firstName: firstName,
    lastName: lastName,
    books: books
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-2&quot;&gt;Benefits of Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using generic data structures to represent data has multiple benefits. We cover these benefits in greater detail in the following sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The ability to use generic functions that are not limited to our specific use case&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A flexible data model&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using-functions-that-are-not-limited-to-a-specific-use-case&quot;&gt;Using functions that are not limited to a specific use case&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using generic data structures to represent data makes it possible to manipulate data with a rich set of functions that are available on those data structures natively in our programming language. Additionally, third-party libraries also provide more of these functions. For instance, JavaScript natively provides some basic functions on maps and arrays, and third-party libraries like Lodash (&lt;a href=&quot;https://lodash.com/&quot; class=&quot;bare&quot;&gt;https://lodash.com/&lt;/a&gt;) extend the functionality with even more functions. There is a famous quote by Alan Perlis that summarizes this benefit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an author is represented as a map, the author can be serialized into JSON using &lt;code&gt;JSON.stringify()&lt;/code&gt;, which is part of JavaScript. The following listing provides an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
JSON.stringify(data);
// → &amp;quot;{\&amp;quot;firstName\&amp;quot;:\&amp;quot;Isaac\&amp;quot;,\&amp;quot;lastName\&amp;quot;:\&amp;quot;Asimov\&amp;quot;,\&amp;quot;books\&amp;quot;:500}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serializing author data without the number of books can be accomplished via Lodash&amp;#8217;s &lt;code&gt;_.pick()&lt;/code&gt; function. The following listing uses &lt;code&gt;_.pick()&lt;/code&gt; to create an object with a subset of keys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
var dataWithoutBooks = _.pick(data, [&amp;quot;firstName&amp;quot;, &amp;quot;lastName&amp;quot;]);
JSON.stringify(dataWithoutBooks);
// → &amp;quot;{\&amp;quot;firstName\&amp;quot;:\&amp;quot;Isaac\&amp;quot;,\&amp;quot;lastName\&amp;quot;:\&amp;quot;Asimov\&amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When adhering to Principle #2, a rich set of functionality is available for data manipulation.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flexible-data-model&quot;&gt;Flexible data model&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using generic data structures, the data model is flexible, and data is not forced into a specific shape. Data can be created with no predefined shape, and its shape can be modified at will.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In classic OOP, when &lt;em&gt;not&lt;/em&gt; adhering to Principle #2, each piece of data is instantiated via a class and must follow a rigid shape. When a slightly different data shape is needed, a new class must be defined. Take, for example, &lt;code&gt;AuthorData&lt;/code&gt;, a class that represents an author entity made of three fields: &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt;, and &lt;code&gt;books&lt;/code&gt;. Suppose that you want to add a field called &lt;code&gt;fullName&lt;/code&gt; with the full name of the author. If we fail to adhere to Principle #2, a new class &lt;code&gt;AuthorDataWithFullName&lt;/code&gt; must be defined. However, when using generic data structures, fields can be added to (or removed from) a map &lt;em&gt;on the fly&lt;/em&gt; as the following listing shows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fly-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
data.fullName = &amp;quot;Isaac Asimov&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Working with a flexible data model is particularly useful in applications where the shape of the data tends to be dynamic (e.g., web apps and web services).
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part 1 of my book explores in detail the benefits of a flexible data model in real-world applications. Next, let&amp;#8217;s explore the cost for adhering to Principle #2.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cost-for-principle-2&quot;&gt;Cost for Principle #2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As with any programming principle, using this principle comes with its own set of trade-offs. The price paid for representing data with generic data structures is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is a slight performance hit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No data schema is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No compile-time check that the data is valid is necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some statically typed languages, type casting is needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-1-performance-hit&quot;&gt;Cost #1: Performance hit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When specific classes are used to instantiate data, retrieving the value of a class member is fast because the compiler knows how the data will look and can do many optimizations. With generic data structures, it is harder to optimize, so retrieving the value associated to a key in a map, for example, is a bit slower that retrieving the value of a class member. Similarly, setting the value of an arbitrary key in a map is a bit slower that setting the value of a class member. In most programming languages, this performance hit is not significant, but it is something to keep in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Retrieving and storing the value associated to an arbitrary key from a map is a bit slower than with a class member.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-2-no-data-schema&quot;&gt;Cost #2: No data schema&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data is instantiated from a class, the information about the data shape is in the class definition. Every piece of data has an associated data shape. The existence of data schema at a class level is useful for developers and for IDEs because&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Developers can easily discover the expected data shape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IDEs provide features like field name autocompletion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data is represented with generic data structures, the data schema is not part of the data representation. As a consequence, some pieces of data might have an associated data schema and other pieces of data do not (see Principle #4).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When generic data structures are used to store data, the data shape is not part of the data representation.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-3-no-compile-time-check-that-the-data-is-valid&quot;&gt;Cost #3: No compile-time check that the data is valid&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Look again at the &lt;code&gt;fullName&lt;/code&gt; function in the following listing, which was created to explore Principle #1. This function receives the data it manipulates as an argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fullname-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function fullName(data) {
  return data.firstName + &amp;quot; &amp;quot; + data.lastName;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When data is passed to &lt;code&gt;fullName&lt;/code&gt; that does not conform to the shape &lt;code&gt;fullName&lt;/code&gt; expects, an error occurs at run time. With generic data structures, mistyping the field storing the first name (e.g., &lt;code&gt;fistName&lt;/code&gt; instead of &lt;code&gt;firstName&lt;/code&gt;) does not result in a compile-time error or an exception. Rather, &lt;code&gt;firstName&lt;/code&gt; is mysteriously omitted from the result. The following listing shows this unexpected behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;weird-behavior-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;fullName({fistName: &amp;quot;Issac&amp;quot;, lastName: &amp;quot;Asimov&amp;quot;});
// → &amp;quot;undefined Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we instantiate data via classes with a rigid data shape, this type of error is caught at compile time. This drawback is mitigated by the application of Principle #4 that deals with data validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When data is represented with generic data structures, data shape errors are caught only at run time.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-4-the-need-for-explicit-type-casting&quot;&gt;Cost #4: The need for explicit type casting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In some statically typed languages, explicit type casting is needed. This section takes a look at explicit type casting in Java and at dynamic fields in C#.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a statically typed language like Java, author data can be represented as a map whose keys are of type &lt;code&gt;string&lt;/code&gt; and whose values are of types &lt;code&gt;Object&lt;/code&gt;. For example, in Java, author data is represented by a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt; as the following listing illustrates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-data-java&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-s&quot;&gt;&amp;quot;Isaac&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-s&quot;&gt;&amp;quot;Asimov&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;books&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because the information about the exact type of the field values is not available at compile time, when accessing a field, an explicit type cast is required. For instance, in order to check whether an author is prolific, the value of the &lt;code&gt;books&lt;/code&gt; field must be type cast to an integer as this listing shows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;is-prolific-java&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nc&quot;&gt;AuthorRating&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;tok-kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;tok-nf&quot;&gt;isProlific&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;books&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tok-mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some Java JSON serialization libraries like Gson (&lt;a href=&quot;https://github.com/google/gson&quot; class=&quot;bare&quot;&gt;https://github.com/google/gson&lt;/a&gt;) support serialization of maps of type &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;, without requiring the user to do any type casting. All the magic happens behind the scenes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C# supports a dynamic data type called &lt;code&gt;dynamic&lt;/code&gt; (see &lt;a href=&quot;http://mng.bz/voqJ&quot; class=&quot;bare&quot;&gt;http://mng.bz/voqJ&lt;/a&gt;), which allows type checking to occur at run time. Using this feature, author data is represented as a dictionary, where the keys are of type &lt;code&gt;string&lt;/code&gt;, and the values are of type &lt;code&gt;dynamic&lt;/code&gt;. The next listing provides this representation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;author-data-cs&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;tok-kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-kt&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-s&quot;&gt;&amp;quot;Isaac Asimov&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;tok-n&quot;&gt;asimov&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;books&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;tok-m&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The information about the exact type of the field values is resolved at run time. When accessing a field, no type cast is required. For instance, when checking whether an author is prolific, the &lt;code&gt;books&lt;/code&gt; field can be accessed as though it were declared as an integer as in this listing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;is-prolific-cs&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;tok-nc&quot;&gt;AuthorRating&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;tok-k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;tok-k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;tok-kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;tok-nf&quot;&gt;isProlific&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;tok-n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-kt&quot;&gt;dynamic&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;tok-n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;tok-s&quot;&gt;&amp;quot;books&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tok-m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DOP uses generic data structures to represent data. This might cause a (small) performance hit and impose the need to manually document the shape of data because the compiler cannot validate it statically. Adherence to this principle enables the manipulation of data with a rich set of generic functions (provided by the language and by third-party libraries). Additionally, our data model is flexible. At this point, the data can be either mutable or immutable. The &lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;next principle&lt;/a&gt; illustrates the value of immutability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DOP Principle #2: Represent data with generic data structures&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To comply to this principle, we represent application data with generic data structures, mostly maps and arrays (or lists). The following figure provides a diagram as a visual representation of this principle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/do-principle-2-generic-data.png&quot; alt=&quot;do principle 2 generic data&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benefits include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using generic functions that are not limited to our specific use case&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A flexible data model&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cost for implementing this principle includes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is a slight performance hit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No data schema is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No compile time check that the data is valid is necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In some statically typed languages, explicit type casting is needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">When adhering to Principle #1 of DOP, code is separated from data. DOP is not opinionated about the programming constructs to use for organizing the code, but it has a lot to say about how the data should be represented. This is the theme of Principle #2.</summary></entry><entry><title type="html">Separate code from data</title><link href="/databook/2022/06/22/separate-code-from-data.html" rel="alternate" type="text/html" title="Separate code from data" /><published>2022-06-22T02:32:24+00:00</published><updated>2022-06-22T02:32:24+00:00</updated><id>/databook/2022/06/22/separate-code-from-data</id><content type="html" xml:base="/databook/2022/06/22/separate-code-from-data.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first principle of Data-Oriented Programming (DOP) is a design principle that recommends a clear separation between code (behavior) and data. This may appear to be a FP principle, but in fact, one can adhere to it or break it either in FP or in OOP:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adherence to this principle in OOP means aggregating the code as methods of a static class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breaking this principle in FP means hiding state in the lexical scope of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, this principle does not relate to the way data is represented. Data representation is addressed by &lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2: Represent data with generic data structures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is an exploration of the first principle of Data-Oriented Programming. The other principles of DOP are explored here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1&lt;/a&gt;: Separating code (behavior) from data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2&lt;/a&gt;: Representing data with generic data structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt;: Treating data as immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/data-validation.html&quot;&gt;Principle #4&lt;/a&gt;: Separating data schema from data representation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;Principle #1&lt;/em&gt;&amp;#8201;&amp;#8212;&amp;#8201;Separate code from data in a way that the code resides in functions whose behavior does not depend on data that is encapsulated in the function&amp;#8217;s context.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;illustration-of-principle-1&quot;&gt;Illustration of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our exploration of Principle #1 begins by illustrating how it can be applied to OOP and FP. The following sections illustrate how this principle can be adhered to or broken in a simple program that deals with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An author entity with a &lt;code&gt;firstName&lt;/code&gt;, a &lt;code&gt;lastName&lt;/code&gt;, and the number of &lt;code&gt;books&lt;/code&gt; they wrote.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A piece of code that calculates the full name of the author.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A piece of code that determines if an author is prolific, based on the number of books they wrote.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;breaking-principle-1-in-oop&quot;&gt;Breaking Principle #1 in OOP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Breaking Principle #1 in OOP happens when we write code that combines data and code together in an object. The following listing demonstrates what this looks like.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;break-1-oop-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class Author {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
  fullName() {
    return this.firstName + &amp;quot; &amp;quot; + this.lastName;
  }
  isProlific() {
    return this.books &amp;gt; 100;
  }
}

var obj = new Author(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); // &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
obj.fullName();
// → &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Isaac Asimov really wrote around 500 books!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;breaking-principle-1-in-fp&quot;&gt;Breaking Principle #1 in FP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Breaking this principle without classes in FP means hiding data in the lexical scope of a function. The next listing provides an example of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;break-1-fp-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorObject(firstName, lastName, books) {
  return {
    fullName: function() {
      return firstName + &amp;quot; &amp;quot; + lastName;
    },
    isProlific: function () {
      return books &amp;gt; 100;
    }
  };
}

var obj = createAuthorObject(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); 
obj.fullName();
// → &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;adhering-to-principle-1-in-oop&quot;&gt;Adhering to Principle #1 in OOP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following listing shows an example that adheres to Principle #1 in OOP. Compliance with this principle may be achieved even with classes by writing programs such that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The code consists of static methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data is encapsulated in data classes (classes that are merely containers of data).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;compliant-1-oop-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

class NameCalculation {
  static fullName(data) {
    return data.firstName + &amp;quot; &amp;quot; + data.lastName;
  }
}

class AuthorRating {
  static isProlific (data) {
    return data.books &amp;gt; 100;
  }
}

var data = new AuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); 
NameCalculation.fullName(data);
// → &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;adhering-to-principle-1-in-fp&quot;&gt;Adhering to Principle #1 in FP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is an example that adheres to Principle #1 in FP. Compliance with this principle means separating code from data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;compliant-1-fp-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
  return {
    firstName: firstName,
    lastName: lastName,
    books: books
  };
}

function fullName(data) {
  return data.firstName + &amp;quot; &amp;quot; + data.lastName;
}

function isProlific (data) {
  return data.books &amp;gt; 100;
}

var data = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500); 
fullName(data);
// → &amp;quot;Isaac Asimov&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benefits-of-principle-1&quot;&gt;Benefits of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having illustrated how to follow or break Principle #1 both in OOP and FP, let&amp;#8217;s look at the benefits that Principle #1 brings to our programs. Careful separation of code from data benefits our programs in the following ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code can be reused in different contexts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code can be tested in isolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systems tend to be less complex.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-1-code-can-be-reused-in-different-contexts&quot;&gt;Benefit #1: Code can be reused in different contexts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imagine that besides the author entity, there is a user entity that has nothing to do with authors but has two of the same data fields as the author entity: &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;. The logic of calculating the full name is the same for authors and users&amp;#8201;&amp;#8212;&amp;#8201;retrieving the values of two fields with the same names. However, in traditional OOP as in the version with &lt;code&gt;createAuthorObject&lt;/code&gt; in listing below, the code of &lt;code&gt;fullName&lt;/code&gt; cannot be reused on a user in a &lt;em&gt;straightforward&lt;/em&gt; way because it is locked inside the &lt;code&gt;Author&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;full-name-oo-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class Author {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
  fullName() {
    return this.firstName + &amp;quot; &amp;quot; + this.lastName;
  }
  isProlific() {
    return this.books &amp;gt; 100;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One way to achieve code re-usability when code and data are mixed is to use OOP mechanisms like inheritance or composition to let the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Author&lt;/code&gt; classes use the same &lt;code&gt;fullName&lt;/code&gt; method. These techniques are adequate for simple use cases, but in real-world systems, the abundance of classes (either base classes or composite classes) tends to increase complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is a simple way to avoid inheritance. In this listing, we duplicate the code of &lt;code&gt;fullName&lt;/code&gt; inside a &lt;code&gt;createUserObject&lt;/code&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;oo-duplicate-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorObject(firstName, lastName, books) {
  var data = {firstName: firstName, lastName: lastName, books: books};

  return {
    fullName: function fullName() {
      return data.firstName + &amp;quot; &amp;quot; + data.lastName;
    }
  };
}

function createUserObject(firstName, lastName, email) {
  var data = {firstName: firstName, lastName: lastName, email: email};

  return {
    fullName: function fullName() {
      return data.firstName + &amp;quot; &amp;quot; + data.lastName;
    }
  };
}

var obj = createUserObject(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;john@doe.com&amp;quot;);
obj.fullName();
// → &amp;quot;John Doe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DOP, no modification to the code that deals with author entities is necessary in order to make it available to user entities, because:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The code that deals with full name calculation is separate from the code that deals with the creation of author data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function that calculates the full name works with any hash map that has a &lt;code&gt;firstName&lt;/code&gt; and a &lt;code&gt;lastName&lt;/code&gt; field.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to leverage the fact that data relevant to the full name calculation for a user and an author has the same shape. With no modifications, the &lt;code&gt;fullName&lt;/code&gt; function works properly both on author data and on user data as the following listing shows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;same-code-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;function createAuthorData(firstName, lastName, books) {
  return {firstName: firstName, lastName: lastName, books: books};
}

function fullName(data) {
  return data.firstName + &amp;quot; &amp;quot; + data.lastName;
}

function createUserData(firstName, lastName, email) {
  return {firstName: firstName, lastName: lastName, email: email};
}

var authorData = createAuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
fullName(authorData);

var userData = createUserData(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;john@doe.com&amp;quot;);
fullName(userData);
// → &amp;quot;John Doe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Principle #1 is applied in OOP, code reuse is straightforward even when classes are used. In statically typed OOP languages like Java or C# we would have to create a common interface for &lt;code&gt;AuthorData&lt;/code&gt; and &lt;code&gt;UserData&lt;/code&gt;. In a dynamically typed language like JavaScript, however, that is not required. The code of &lt;code&gt;NameCalculation.fullName()&lt;/code&gt; works both with author data and user data as the next listing demonstrates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;same-code-oop-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class AuthorData {
  constructor(firstName, lastName, books) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.books = books;
  }
}

class NameCalculation {
  static fullName(data) {
    return data.firstName + &amp;quot; &amp;quot; + data.lastName;
  }
}

class UserData {
  constructor(firstName, lastName, email) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
  }
}

var userData = new UserData(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, &amp;quot;john@doe.com&amp;quot;);
NameCalculation.fullName(userData);

var authorData = new AuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
NameCalculation.fullName(authorData);
// → &amp;quot;John Doe&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When code is separate from data, it is straightforward to reuse code in different contexts. This benefit is achievable both in FP and in OOP.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-2-code-can-be-tested-in-isolation&quot;&gt;Benefit #2: Code can be tested in isolation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A similar benefit is the ability to test code in an isolated context. When code is not separate from data, it is necessary to instantiate an object to test its methods. For instance, in order to test the &lt;code&gt;fullName&lt;/code&gt; code that lives inside the &lt;code&gt;createAuthorObject&lt;/code&gt; function, we need to instantiate an author object as this listing shows.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;test-instantiate-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var author =  createAuthorObject(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;, 500);
author.fullName() === &amp;quot;Isaac Asimov&amp;quot;
// → true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this simple scenario, it is not overly burdensome. We only load (unnecessarily) the code for &lt;code&gt;isProlific&lt;/code&gt;.
Although in a real-world situation, instantiating an object might involve complex and tedious setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the DOP version, where &lt;code&gt;createAuthorData&lt;/code&gt; and &lt;code&gt;fullName&lt;/code&gt; are separate, we can create the data to be passed to &lt;code&gt;fullName&lt;/code&gt; in isolation, testing &lt;code&gt;fullName&lt;/code&gt; in isolation as well. The following listing provides an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;test-isolate-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var author =  {
  firstName: &amp;quot;Isaac&amp;quot;, 
  lastName: &amp;quot;Asimov&amp;quot;
};
fullName(author) === &amp;quot;Isaac Asimov&amp;quot;
// → true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If classes are used, it is only necessary to instantiate a data object. We do not need to load the code for &lt;code&gt;isProlific&lt;/code&gt;, which lives in a separate class than &lt;code&gt;fullName&lt;/code&gt;, in order to test &lt;code&gt;fullName&lt;/code&gt;. The next listing lays out an example of this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;test-isolate-oop-klipse-js&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data =  new AuthorData(&amp;quot;Isaac&amp;quot;, &amp;quot;Asimov&amp;quot;);

NameCalculation.fullName(data) === &amp;quot;Isaac Asimov&amp;quot;
// → true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Writing tests is easier when code is separated from data.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benefit-3-systems-tend-to-be-less-complex&quot;&gt;Benefit #3: Systems tend to be less complex&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The third benefit of applying Principle #1 to our programs is that systems tend to be less complex. This benefit is the deepest one but also the one that is most subtle to explain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The type of complexity I refer to is the one that makes systems hard to understand as defined in the paper, &amp;#8220;Out of the Tar Pit&amp;#8221; by Ben Moseley and Peter Marks (&lt;a href=&quot;http://mng.bz/enzq&quot; class=&quot;bare&quot;&gt;http://mng.bz/enzq&lt;/a&gt;). It has nothing to do with the complexity of the resources consumed by a program. Similarly, references to &lt;em&gt;simplicity&lt;/em&gt; mean &lt;em&gt;not complex&lt;/em&gt; (in other words, easy to understand).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Complex in the context of this article means &lt;em&gt;hard to understand&lt;/em&gt;.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Keep in mind that complexity and simplicity (like hard and easy) are not absolute but relative concepts. The complexity of two systems can be compared to determine whether system A is more complex (or simpler) than system B. When code and data are kept separate, the system tends to be easier to understand for two reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;The scope of a data entity or a code entity is smaller than the scope of an entity that combines code and data.&lt;/em&gt; Each entity is therefore easier to understand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Entities of the system are split into disjoint groups: code and data.&lt;/em&gt; Entities therefore have fewer relations to other entities.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This insight is illustrated in a class diagram of our fictitious Library Management System, where code and data are mixed. It is not necessary to know the details of the classes of this system to see that the following diagram represents a complex system; this in the sense that it is hard-to-understand. The system is hard-to-understand because there are many dependencies between the entities that compose the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-class-diagram-overview-2&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/complex-class-relation.png&quot; alt=&quot;complex class relation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most complex entity of the system is the &lt;code&gt;Librarian&lt;/code&gt; entity, which is connected via six relations to other entities. Some relations are data relations (association and composition), and some relations are code relations (inheritance and dependency). But in this design, the &lt;code&gt;Librarian&lt;/code&gt; entity mixes code and data, and therefore, it has to be involved in both data and code relations. If each entity of the system is split into a code entity and a data entity &lt;em&gt;without making any further modification to the system&lt;/em&gt;, the result is made of two disconnected parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The left part is made only of data entities and data relations: association and composition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The right part is made only of code entities and code relations: dependency and inheritance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;lib-mgmt-simplified-class-diagram-2&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/data-code-relation.png&quot; alt=&quot;data code relation&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new system, where code and data are separate, is easier to understand than the original system, where code and data are mixed. Thus, the data part of the system and the code part of the system can each be understood on its own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
A system made of disconnected parts is less complex than a system made of a single part.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One could argue that the complexity of the original system, where code and data are mixed, is due to a bad design and that an experienced OOP developer would have designed a simpler system using smart design patterns. That is true, but in a sense, it is irrelevant. The point of Principle #1 is that a system made of entities that do not combine code and data tends to be simpler than a system made of entities that do combine code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been said many times that &lt;em&gt;simplicity is hard&lt;/em&gt;. According to the first principle of DOP, simplicity is easier to achieve when separating code and data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
Simplicity is easier to achieve when code is separated from data.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cost-for-principle-1&quot;&gt;Cost for Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section looks at the cost involved when we implement Principle #1. The price we pay in order to benefit from the separation between code and data is threefold:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is no control on what code can access what data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no packaging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our systems are made from more entities.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-1-there-is-no-control-on-what-code-can-access-what-data&quot;&gt;Cost #1: There is no control on what code can access what data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When code and data are mixed, it is easy to understand what pieces of code can access what kinds of data. For example, in OOP, the data is encapsulated in an object, which guarantees that the data is accessible only by the object&amp;#8217;s methods. In DOP, data stands on its own. It is transparent if you like, and as a consequence, it can be accessed by any piece of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When refactoring the shape of some data, &lt;em&gt;every&lt;/em&gt; place in our code that accesses this kind of data must be known. Moreover, without the application of &lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Principle #3: Immutable data&lt;/a&gt;, accessing data by any piece of code is inherently unsafe. In that case, it would be hard to guarantee the validity of our data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-2-there-is-no-packaging&quot;&gt;Cost #2: There is no packaging&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the benefits of mixing code and data is that when you have an object in hand, it is a package that contains both the code (via methods) and the data (via members). As a consequence, it is easy to discover how to manipulate the data: you look at the methods of the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DOP, the code that manipulates the data could be anywhere. For example, &lt;code&gt;createAuthorData&lt;/code&gt; might be in one file and &lt;code&gt;fullName&lt;/code&gt; in another file. This makes it difficult for developers to discover that the &lt;code&gt;fullName&lt;/code&gt; function is available. In some situations, it could lead to wasted time and unnecessary code duplication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cost-3-our-systems-are-made-from-more-entities&quot;&gt;Cost #3: Our systems are made from more entities&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do simple arithmetic. Imagine a system made of &lt;em&gt;N&lt;/em&gt; classes that combine code and data. When you split the system into code entities and data entities, you get a system made of 2&lt;em&gt;N&lt;/em&gt; entities. This calculation is not accurate, however, because usually, when you separate code and data, the class hierarchy tends to get simpler as we need less class inheritance and composition. Therefore, the number of classes in the resulting system will probably be somewhere between &lt;em&gt;N&lt;/em&gt; and 2&lt;em&gt;N&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On one hand, when adhering to Principle #1, the entities of the system are simpler. On the other hand, there are more entities. This cost is mitigated by &lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2&lt;/a&gt;, which guides us to represent our data with generic data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When adhering to Principle #1, systems are made of simpler entities, but there are more of them.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-of-principle-1&quot;&gt;Summary of Principle #1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DOP requires the separation of code from data. In OOP languages, aggregate code in static methods and data in classes with no methods. In FP languages, avoid hiding data in the lexical scope of functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating code from data comes at a price. It reduces control over what pieces of code access our data and can cause our systems to be made of more entities. But it&amp;#8217;s worth paying the price because, when adhering to this principle, our code can be reused in different contexts in a straightforward way and tested in isolation. Moreover, a system made of separate entities for code and data tends to be easier to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To follow this principle, we separate code from data in such a way that the code resides in functions whose behavior does not depend on data that is encapsulated in the function&amp;#8217;s context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/do-principle-1-separate.png&quot; alt=&quot;do principle 1 separate&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Benefits include&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Code can be reused in different contexts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code can be tested in isolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systems tend to be less complex.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cost for implementing Principle #1 includes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No control on what code accesses which data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No packaging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More entities.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">The first principle of Data-Oriented Programming (DOP) is a design principle that recommends a clear separation between code (behavior) and data. This may appear to be a FP principle, but in fact, one can adhere to it or break it either in FP or in OOP:</summary></entry><entry><title type="html">Principles of Data-Oriented Programming</title><link href="/dop/2022/06/22/principles-of-dop.html" rel="alternate" type="text/html" title="Principles of Data-Oriented Programming" /><published>2022-06-22T02:31:24+00:00</published><updated>2022-06-22T02:31:24+00:00</updated><id>/dop/2022/06/22/principles-of-dop</id><content type="html" xml:base="/dop/2022/06/22/principles-of-dop.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that my book is completed, I have a better understanding of the core principles of Data-Oriented Programming. This article is a rewrite of &lt;a href=&quot;/2020/09/29/do-principles.html&quot;&gt;my previous article&lt;/a&gt; about DOP Principles from September 2020.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data-oriented programming (DOP) is a programming paradigm aimed at simplifying the design and implementation of software systems, where information is at the center in systems such as frontend or backend web applications and web services, for example. Instead of designing information systems around software constructs that combine code and data (e.g., objects instantiated from classes), DOP encourages the &lt;em&gt;separation&lt;/em&gt; of code from data. Moreover, DOP provides guidelines about how to represent and manipulate data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In DOP, data is treated as a first-class citizen.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The essence of DOP is that it treats data as a first-class citizen. It gives developers the ability to manipulate data inside a program with the same simplicity as they manipulate numbers or strings. Treating data as a first-class citizen is made possible by adhering to four core principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Principle #1&lt;/a&gt;: Separating code (behavior) from data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Principle #2&lt;/a&gt;: Representing data with generic data structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Principle #3&lt;/a&gt;: Treating data as immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/databook/2022/06/22/data-validation.html&quot;&gt;Principle #4&lt;/a&gt;: Separating data schema from data representation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When these four principles are combined, they form a cohesive whole. Systems built using DOP are simpler and easier to understand, so the developer experience is significantly improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;combined-together&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/do-principles-mind-map.png&quot; alt=&quot;do principles mind map&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In a data-oriented system, code is separated from data. Data is represented with generic data structures that are immutable and have a separate schema.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that DOP principles are language-agnostic. They can be adhered to (or broken) in&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Object-oriented programming (OOP) languages such as Java, C#, C++, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional programming (FP) languages such as Clojure, OCaml, Haskell, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Languages that support both OOP and FP such as JavaScript, Python, Ruby, Scala, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This series of articles succinctly illustrates how those principles could be applied or broken in JavaScript. Mentioned briefly are the benefits of adherence to each principle, and the costs paid to enjoy those benefits. This article also illustrates the principles of DOP via simple code snippets. Throughout my book &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented Programming&lt;/a&gt;, the application of DOP principles to production information systems is explored in depth.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;principle-1-separate-code-from-data&quot;&gt;Principle #1: Separate code from data&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Principle #1 is a design principle that recommends a clear separation between code (behavior) and data. This may appear to be a FP principle, but in fact, one can adhere to it or break it either in FP or in OOP:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adherence to this principle in OOP means aggregating the code as methods of a static class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breaking this principle in FP means hiding state in the lexical scope of a function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, this principle does not relate to the way data is represented. Data representation is addressed by Principle #2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This principle is explored further in &lt;a href=&quot;/databook/2022/06/22/separate-code-from-data.html&quot;&gt;Separate code from data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;principle-2-represent-data-with-generic-data-structures&quot;&gt;Principle #2: Represent data with generic data structures&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When adhering to Principle #1, code is separated from data. DOP is not opinionated about the programming constructs to use for organizing the code, but it has a lot to say about how the data should be represented. This is the theme of Principle #2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most common generic data structures are maps (a.k.a. dictionaries) and arrays (or lists). But other generic data structures (e.g., sets, trees, and queues) can be used as well. Principle #2 does not deal with the mutability or the immutability of the data. That is the theme of Principle #3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This principle is explored further in &lt;a href=&quot;/databook/2022/06/22/generic-data-structures.html&quot;&gt;Represent data with generic data structures&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;principle-3-data-is-immutable&quot;&gt;Principle #3: Data is immutable&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With data separated from code and represented with generic data structures, how are changes to the data managed? DOP is very strict on this question. Mutation of data is not allowed! In DOP, changes to data are accomplished by creating new versions of the data. The &lt;em&gt;reference&lt;/em&gt; to a variable may be changed so that it refers to a new version of the data, but the &lt;em&gt;value&lt;/em&gt; of the data itself must never change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This principle is explored further in &lt;a href=&quot;/databook/2022/06/22/immutable-data.html&quot;&gt;Data is immutable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;principle-4-separate-data-schema-from-data-representation&quot;&gt;Principle #4: Separate data schema from data representation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With data separated from code and represented with generic and immutable data structures, now comes the question of how do we express the shape of the data? In DOP, the expected shape is expressed as a data schema that is kept separated from the data itself. The main benefit of Principle #4 is that it allows developers to decide which pieces of data should have a schema and which pieces of data should not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This principle is explored further in &lt;a href=&quot;/databook/2022/06/22/data-validation.html&quot;&gt;Separate data schema from data representation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;DOP simplifies the design and implementation of information systems by treating data as a first-class citizen. This is made possible by adhering to four language agnostic core principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Separating code from data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Representing application data with generic data structures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Treating data as immutable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Separating data schema from data representation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;core-principles&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/chapter00/do-principles-mind-map.png&quot; alt=&quot;do principles mind map&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">This article is an excerpt from my book about Data-Oriented Programming. More excerpts are available on my blog.</summary></entry><entry><title type="html">Reading the present moment</title><link href="/databook/2022/01/17/reading-the-present-moment.html" rel="alternate" type="text/html" title="Reading the present moment" /><published>2022-01-16T23:45:32+00:00</published><updated>2022-01-16T23:45:32+00:00</updated><id>/databook/2022/01/17/reading-the-present-moment</id><content type="html" xml:base="/databook/2022/01/17/reading-the-present-moment.html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;This is an experiment I am doing about introducing a bit of self-referential stuff in  Chapter 13 of &quot;Data-Oriented Programming.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;I was inspired by the &quot;Gödel, Escher, Bach&quot; masterpiece. Not sure yet, if it will make it into the official version of the book though. It depends on your feedback.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Throughout the book, Joe&amp;#8201;&amp;#8212;&amp;#8201;a senior Clojure developer&amp;#8201;&amp;#8212;&amp;#8201;reveals the secrets of Data-Oriented Programming to Theo and Dave&amp;#8201;&amp;#8212;&amp;#8201;two fellow developers&amp;#8201;&amp;#8212;&amp;#8201;who get quite excited about this new paradigm.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;In Chapter 13, Dave tests a piece of code he wrote using as a example the book &quot;Data-Oriented Programming&quot; written by your servant.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;tok-nx&quot;&gt;yehonathan&lt;/span&gt; &lt;span class=&quot;tok-o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;Yehonathan Sharvit&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;bookIsbns&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;9781617298578&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;tok-nx&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;yehonathan&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;tok-s2&quot;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;tok-c1&quot;&gt;// → &amp;quot;&amp;lt;i&amp;gt;Yehonathan Sharvit&amp;lt;/i&amp;gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;And that&amp;#8217;s how the self-referential fun begins&amp;#8230;&amp;#8203;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Please read this article on a device with a wide screen, like a desktop or a tablet. I don&amp;#8217;t think it renders well on a mobile phone.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Theo comes to Dave&amp;#8217;s desk to review his implementation of the &quot;list of authors&quot; feature, he asks him about the author that appears in the test of &lt;code&gt;Author.myName&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Who is Yehonathan Sharvit?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I don&amp;#8217;t really know. The name appeared when I googled for &quot;Data-Oriented Programming&quot; yesterday. He wrote a book on the topic. I thought it would be cool to use its ISBN in my test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Does his book present DOP in a similar way to what Joe taught us?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I don&amp;#8217;t know. I guess I&amp;#8217;ll discover when I receive the print book I ordered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few days later, Dave walks to Theo&amp;#8217;s cube holding a package. Dave opens the package and they take a look at the cover together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Wow, that&amp;#8217;s-- that&amp;#8217;s&amp;#8230;&amp;#8203; odd. The woman on the cover - she&amp;#8217;s so familiar. I could swear she&amp;#8217;s the girl my grandparents knew from this Greek island called Santorini. My grandparents were born there, speak often of their childhood friend and have a photo of her. But how could a girl from their little island wind up on the cover of this book?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: That&amp;#8217;s so cool!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave opens the book with Theo looking over his shoulder. They scan the table of contents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: It looks like this books covers all the same topics Joe taught us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This is great!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave leafs through a few random sections. Hi attention is caught by a bit of dialog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Theo, this is so strange!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: The characters in Sharvit&amp;#8217;s book have the same names as ours!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Let me see&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theo turns to a page from the first chapter. He and Dave read this passage side by side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 1&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Hey Dave! How&amp;#8217;s it going?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Today? Not great. I&amp;#8217;m trying to fix a bug in my code! I can&amp;#8217;t understand why the state of my objects always changes. I&amp;#8217;ll figure it out though, I&amp;#8217;m sure. How&amp;#8217;s your day going?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I just finished the design of a system for a new customer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Cool! Would it be OK for me to see it? I&amp;#8217;m trying to improve my design skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Sure! I have the diagram on my desk. We can take a look now if you like.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I remember this situation. It was around a year ago just a few weeks after I had joined Albatross.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theo&amp;#8217;s face turns pale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I don&amp;#8217;t feel well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theo gets up to splash cold water on his face. When he comes back, still pale, but in better control of his emotions, he tries to remember the situation described in the first chapter of the book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Was it when I showed you my design for Klafim prototype?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Exactly! I was quite impressed by your class hierachy diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Oh no! Don&amp;#8217;t remind me of that time. The long hours of work on such a complex OOP system gave me nightmares.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I remember it as a fun period. Every week I was learning a new technology: GraphQL, Elasticsearch, DataDog, Bigtable, Spring, Express&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Luckily, I met Joe a few days later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Apropos Joe, you never told me  exactly how you met him.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Well now you&amp;#8217;ll know everything. The meeting is told quite accurately at the beginning of Chapter 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave reads a few lines in the beginning of Chapter 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 2&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next morning, Theo asks on Hacker News and on Reddit for ways to reduce system complexity and build flexible systems. Some folks mention using different programming languages, others talk about advanced design patterns. Finally, Theo&amp;#8217;s attention gets captured by a comment from a user named Joe who mentions &quot;Data-Oriented programming&quot; and claims that its main goal is to reduce system complexity. Theo has never heard this term before. Out of curiosity he decides to contact Joe by email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What a coincidence! Joe lives in San Francisco too. Theo invites him to a meeting in his office.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Joe is a 40-year old developer. He&amp;#8217;d been a Java developer for nearly decade before adopting Clojure around 7 years ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Theo tells Joe about the Library Management System he designed and built, and about his struggles to adapt to changing requirements, Joe is not surprised.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: The book doesn&amp;#8217;t say if it was on Hacker News or on Reddit that Joe you exchanged with Joe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I remember it very well: It was on Reddit. In the &quot;r/clojure&quot; community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While they talk, Dave leafs through the pages of the book, when he comes across a curious passage from Chapter 15&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 15&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I get that. But what happens if the code of the function modifies the data that we are writing. Will we write the original data to the file, or the modified data?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I&amp;#8217;ll let you think about that while I get a cup of coffee at the &lt;strong&gt;museum&lt;/strong&gt; coffee shop. Would you like one?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Yes, an espresso please.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: I have a weird sensation of &lt;em&gt;déjà lu&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Me too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Do you know what &lt;em&gt;déjà lu&lt;/em&gt; means?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: No. But it sounds like it&amp;#8217;s related to déjà vu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave and Theo sit quietly, pondering the meaning of &quot;déjà lu&quot; and the bigger puzzle of this weird book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: That&amp;#8217;s it! I think I got the hang of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave shows Theo the result from Google translate with the &quot;Detect language&quot; option activated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: In French, &quot;déjà lu&quot; means &quot;already read&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Do you think that the author is French?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Probably. That would explain some odd turns of phrases I&amp;#8217;ve noticed here and there in the way the characters express themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: But of course! At least we have found a point on which we are not identical to the characters in this book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Anyway, A &lt;em&gt;déjà lu&lt;/em&gt; must be when you live a situation that you have already read in a book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: But I don&amp;#8217;t think we&amp;#8217;ve ever been together at a museum!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Me neither. Could this book be telling not only the past but also the future?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: A future that we will already know when it will happen since we are now reading it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave and Theo together:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8201;&amp;#8212;&amp;#8201;A déjà lu!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 13&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 100%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 13&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-none grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 9.0909%;&quot;&gt;
&lt;col style=&quot;width: 90.9091%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Data-Oriented Programming: Chapter 13&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: This book tells our past and our future. I wonder if it also tells our present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: What chapter do you think we would be at the moment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Let&amp;#8217;s see. At the end of Chapter 12, there&amp;#8217;s a beautiful drawing of the JSON schema cheatsheet we made together last week. It means, that we should now be in Chapter 13.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dave slowly turns the pages of the book, until he finds the line that tells the present moment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: Dave! This is freaking me out! I think we should close this book immediately and forget all about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I can&amp;#8217;t. I&amp;#8217;m too curious to discover my future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: You&amp;#8217;ll have to do it without me. Joe told us many times we should never mess up with the state of a system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: Wait! It&amp;#8217;s true that Joe taught us the merits of immutability. But that only concerns the past state of a system. He never said we didn&amp;#8217;t have the right to mutate our future!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;THEO&lt;/strong&gt;: You mean that reading beyond Chapter 13 won&amp;#8217;t necessarily lock us in a predefined scenario?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DAVE&lt;/strong&gt;: I hope so!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hoping to stay in control of their destiny, Theo and Dave start reading Chapter 14 of &quot;Data-Oriented Programming&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Please share your thoughts about this self-referential stuff by replying to this &lt;a href=&quot;https://twitter.com/viebel/status/1482899756791836674&quot;&gt;tweet&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy this self-referential stuff in Chapter 13?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Do you think it&amp;#8217;s a good idea to include this self-referential stuff in the book?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;How would you make it better?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">This is an experiment I am doing about introducing a bit of self-referential stuff in Chapter 13 of &quot;Data-Oriented Programming.</summary></entry><entry><title type="html">A hundred things I learned writing my first technical book “Data-Oriented Programming”</title><link href="/book/2021/12/19/100-things-I-learned-with-data-oriented-programming.html" rel="alternate" type="text/html" title="A hundred things I learned writing my first technical book “Data-Oriented Programming”" /><published>2021-12-19T04:01:22+00:00</published><updated>2021-12-19T04:01:22+00:00</updated><id>/book/2021/12/19/100-things-I-learned-with-data-oriented-programming</id><content type="html" xml:base="/book/2021/12/19/100-things-I-learned-with-data-oriented-programming.html">&lt;ol&gt;
  &lt;li&gt;Writing a technical book is much harder than writing blog posts.&lt;/li&gt;
  &lt;li&gt;Writing a blog post is like running a sprint while writing a book is like running a marathon.&lt;/li&gt;
  &lt;li&gt;Writing my first technical book without a publisher would have been a MISSION: IMPOSSIBLE!&lt;/li&gt;
  &lt;li&gt;Each piece of the book content must be clear and interesting. Each part, each chapter, each section, each paragraph, each sentence.&lt;/li&gt;
  &lt;li&gt;“Clear” is more important that “interesting”. If something is not clear to your reader, it cannot be interesting for them.&lt;/li&gt;
  &lt;li&gt;A possible way to make things clear is to go from concrete to abstract.&lt;/li&gt;
  &lt;li&gt;A possible way to make things interesting is to teach the material as a story with fiction characters and a bit of drama.&lt;/li&gt;
  &lt;li&gt;The “why” is more important than the “what”.&lt;/li&gt;
  &lt;li&gt;The “what” is more important than the “how”.&lt;/li&gt;
  &lt;li&gt;An average writer makes the reader think the author is smart. A good writer makes the reader think the reader is smart.&lt;/li&gt;
  &lt;li&gt;A technical book is written for MQRs (Minimal Qualified Readers).&lt;/li&gt;
  &lt;li&gt;Figuring out the qualifications of your MQRs (Minimal Qualified Readers) is important as it allows you to assume what knowledge your readers already have.&lt;/li&gt;
  &lt;li&gt;It’s hard to figure out the qualifications of your MQRs (Minimal Qualified Readers).&lt;/li&gt;
  &lt;li&gt;Checking book sales could be addictive.&lt;/li&gt;
  &lt;li&gt;Making a good Table of Contents is crucial as it is the first part of the book potential readers will encounter.&lt;/li&gt;
  &lt;li&gt;Making a good Table of Contents is hard as you need to figure out what you really want to talk about.&lt;/li&gt;
  &lt;li&gt;The Table of Contents might evolve a bit as you write your book.&lt;/li&gt;
  &lt;li&gt;You should resist the temptation to write the first chapter before the Table of Contents is ready.&lt;/li&gt;
  &lt;li&gt;It’s not necessary to write chapters in order. But it’s easier.&lt;/li&gt;
  &lt;li&gt;Never assume that your readers will read the next chapter only because they have enjoyed the previous chapter.&lt;/li&gt;
  &lt;li&gt;You should always convince your readers why what you are teaching is important and relevant for them.&lt;/li&gt;
  &lt;li&gt;Before writing a chapter, you should formulate to yourself what is the main objective of the chapter.&lt;/li&gt;
  &lt;li&gt;If a chapter has two main objectives, it’s a sign that you should split it into two chapters.&lt;/li&gt;
  &lt;li&gt;A chapter should be treated like a piece of software. You should resist the temptation of writing the chapter contents without a plan.&lt;/li&gt;
  &lt;li&gt;A possible way to make things interesting is to use concrete examples.&lt;/li&gt;
  &lt;li&gt;A possible way to make things clear inside a chapter is to start with the easy stuff and increase the level of difficulty as the chapter goes on.&lt;/li&gt;
  &lt;li&gt;Do not hesitate to highlight sentences that convey an important message.&lt;/li&gt;
  &lt;li&gt;It’s OK to engage in writing a technical book without mastering every topic you want to cover in your book.&lt;/li&gt;
  &lt;li&gt;Writing technical book involves a decent amount of research even if you consider yourself as an expert in the field.&lt;/li&gt;
  &lt;li&gt;Finding attractive but accurate titles to book chapters is an art.&lt;/li&gt;
  &lt;li&gt;You can learn a lot from a failed attempt to write a book, provided that you put your ego aside.&lt;/li&gt;
  &lt;li&gt;If you try to write a Wikipedia article about the topic of your book before it is mentioned by other sources, it will be rejected.&lt;/li&gt;
  &lt;li&gt;It’s possible to write a technical book while keeping your day job as a programmer, provided that you are willing to wake up early or sleep late.&lt;/li&gt;
  &lt;li&gt;Writing a technical book takes between a year and two.&lt;/li&gt;
  &lt;li&gt;Don’t rush! Enjoy the journey…&lt;/li&gt;
  &lt;li&gt;It makes lot of sense to use a source control software for your manuscript.&lt;/li&gt;
  &lt;li&gt;AsciiDoc rocks!&lt;/li&gt;
  &lt;li&gt;PlantUML rocks!&lt;/li&gt;
  &lt;li&gt;NeoVim rocks!&lt;/li&gt;
  &lt;li&gt;Using a tool - like PlantUML - that generates diagrams from text makes it easy to refactor multiple diagrams at once (e.g rename a label, change a color).&lt;/li&gt;
  &lt;li&gt;People on Reddit could feel hurt by opinions that take them out of their comfort zone.&lt;/li&gt;
  &lt;li&gt;On Reddit, when people feel hurt, they could become violent.&lt;/li&gt;
  &lt;li&gt;Being mentored by an experienced writer is a blessing.&lt;/li&gt;
  &lt;li&gt;If you are lucky enough to be mentored by an experienced writer, ask them to be hard with you. That’s how you are going to improve your book!&lt;/li&gt;
  &lt;li&gt;A good technical reviewer is a representative of your MQRs (Minimal Qualified Readers). They can tell you upfront is something is going to be unclear to your readers.&lt;/li&gt;
  &lt;li&gt;You should make sure your readers will never frown while reading your book.&lt;/li&gt;
  &lt;li&gt;A project manager that pays attention to the details is important.&lt;/li&gt;
  &lt;li&gt;Your publisher is your partner.&lt;/li&gt;
  &lt;li&gt;You could make more dollars per copy by self-publishing but you’d probably sell much less copies.&lt;/li&gt;
  &lt;li&gt;Asking early feedback from external reviewers is a great source of improvement.&lt;/li&gt;
  &lt;li&gt;Releasing an early version of the book (approx. when the first third is ready) allows you to find out if the topic of your book is interesting.&lt;/li&gt;
  &lt;li&gt;Finding a good book title is hard.&lt;/li&gt;
  &lt;li&gt;Finding a good book subtitle is even harder.&lt;/li&gt;
  &lt;li&gt;You need to be very careful not to hurt the sensitivity of any of your readers.&lt;/li&gt;
  &lt;li&gt;Having your book featured on HackerNews home page does not mean selling lots of copies.&lt;/li&gt;
  &lt;li&gt;Twitter is a great medium to share ideas from your book.&lt;/li&gt;
  &lt;li&gt;Writing a book could sometimes take you to flow.&lt;/li&gt;
  &lt;li&gt;My real motivation for writing a book was neither to be famous nor to be rich. I only wanted to accomplish a child’s dream.&lt;/li&gt;
  &lt;li&gt;It’s hard to find your voice.&lt;/li&gt;
  &lt;li&gt;Once you have found the your voice, the writing flows much better.&lt;/li&gt;
  &lt;li&gt;Usually readers stop reading after reading the middle of the book. If you want them to read the second half of your book, you need to find a way to hook them.&lt;/li&gt;
  &lt;li&gt;A possible way to hook your readers is to tell a story.&lt;/li&gt;
  &lt;li&gt;Inspiration is not linear. It’s OK to stop writing for a couple of hours.&lt;/li&gt;
  &lt;li&gt;Motivation is not linear. It’s OK to stop writing for a couple of weeks.&lt;/li&gt;
  &lt;li&gt;Be open to critics - even when they hurt your ego.&lt;/li&gt;
  &lt;li&gt;The more you write, the more you like it.&lt;/li&gt;
  &lt;li&gt;It’s safe to assume that every developer can read JavaScript.&lt;/li&gt;
  &lt;li&gt;It’s a great feeling to mention the work of other authors.&lt;/li&gt;
  &lt;li&gt;You should make sure that each and every code snippet - that appears in your book - runs as expected.&lt;/li&gt;
  &lt;li&gt;Invoking “it’s so obvious I don’t need to explain it” is not an acceptable argument.&lt;/li&gt;
  &lt;li&gt;Writing your teaching materials as a dialogue between an imaginary expert and a imaginary novice is a very useful process in order to figure out what questions your materials might raise in your reader’s mind.&lt;/li&gt;
  &lt;li&gt;Sometimes the questions that an imaginary novice would ask about the stuff you teach would be tough. Don’t ignore them. It’s an opportunity to make your book better.&lt;/li&gt;
  &lt;li&gt;Rewriting a chapter from scratch because you forgot to save your work could be a blessing as writing from scratch might lead to a material of higher quality.&lt;/li&gt;
  &lt;li&gt;Writing in a coffee shop makes me feel like a famous author, but in fact I am much more productive at home.&lt;/li&gt;
  &lt;li&gt;Writing a preface - after the whole manuscript is ready - is really a pleasure!&lt;/li&gt;
  &lt;li&gt;You should think about the way your contents is going to appear on the paper. Use headlines, highlights, call outs and diagrams to make sure it doesn’t look boring.&lt;/li&gt;
  &lt;li&gt;Resist the temptation to impress your readers with “cool stuff” if you think it might confuse them.&lt;/li&gt;
  &lt;li&gt;Working on your book is a good reason to wake up early. Sometimes, before sunrise (even in summer!).&lt;/li&gt;
  &lt;li&gt;Include at least 2 or 3 diagrams in every chapter. It makes the material fun to read and easier to grasp.&lt;/li&gt;
  &lt;li&gt;Draw your diagrams on a sheet of paper before using drawing software.&lt;/li&gt;
  &lt;li&gt;It’s OK to use colors in diagrams for the online version of the book. But remember that the print version of the book will be not be in color.&lt;/li&gt;
  &lt;li&gt;Mind maps are a great visualization tool. Use them smartly.&lt;/li&gt;
  &lt;li&gt;When a section is more difficult to read than the others, let your readers know about it.&lt;/li&gt;
  &lt;li&gt;When a section is more difficult to read than the others, make it skippable.&lt;/li&gt;
  &lt;li&gt;It’s OK - from time to time - to copy-paste a diagram in order to save from your readers the need to flip back.&lt;/li&gt;
  &lt;li&gt;Asking a friend or a colleague to read your work in progress is not a productive idea. The best feedback comes from people you don’t know.&lt;/li&gt;
  &lt;li&gt;Brainstorming with a friend or a colleague about a difficulty you encounter might be a productive idea.&lt;/li&gt;
  &lt;li&gt;Throwing away some (good) ideas is sometimes necessary. Not easy but necessary.&lt;/li&gt;
  &lt;li&gt;When you are blocked in the middle of a chapter, it might be a sign that you need to rethink the chapter.&lt;/li&gt;
  &lt;li&gt;When you are blocked in the middle of a chapter, it might be a sign that you need to rest and come back later.&lt;/li&gt;
  &lt;li&gt;Adapting parts of your book to blog posts could be a good idea. But you need to resist the temptation of copy-pasting verbatim as the blog posts will be without the context of the book.&lt;/li&gt;
  &lt;li&gt;It feels great when someone with lots of followers tweets about the fun they had reading your book.&lt;/li&gt;
  &lt;li&gt;Don’t worry if your English is not perfect. Your manuscript will be proofread later.&lt;/li&gt;
  &lt;li&gt;“Not being a native English speaker” is not an excuse for your lack of clarity.&lt;/li&gt;
  &lt;li&gt;Writing an appendix is much easier than writing a chapter.&lt;/li&gt;
  &lt;li&gt;Using humour in a technical book is possible. Hopefully, it’s well appreciated.&lt;/li&gt;
  &lt;li&gt;You should write the chapter introduction after all the other parts of the chapter are written.&lt;/li&gt;
  &lt;li&gt;Getting positive feedback - even from people who are easily enthusiastic - feels good.&lt;/li&gt;
  &lt;li&gt;Front matter is the last part an author writes.&lt;/li&gt;
  &lt;li&gt;Writing a hundred things you learned from writing a technical book is not as difficult as it may seem.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker. My passion is to make interesting things easy to understand. I hope you will enjoy the articles.&quot;}</name></author><category term="book" /><category term="dop" /><category term="theory" /><summary type="html">Writing a technical book is much harder than writing blog posts. Writing a blog post is like running a sprint while writing a book is like running a marathon. Writing my first technical book without a publisher would have been a MISSION: IMPOSSIBLE! Each piece of the book content must be clear and interesting. Each part, each chapter, each section, each paragraph, each sentence. “Clear” is more important that “interesting”. If something is not clear to your reader, it cannot be interesting for them. A possible way to make things clear is to go from concrete to abstract. A possible way to make things interesting is to teach the material as a story with fiction characters and a bit of drama. The “why” is more important than the “what”. The “what” is more important than the “how”. An average writer makes the reader think the author is smart. A good writer makes the reader think the reader is smart. A technical book is written for MQRs (Minimal Qualified Readers). Figuring out the qualifications of your MQRs (Minimal Qualified Readers) is important as it allows you to assume what knowledge your readers already have. It’s hard to figure out the qualifications of your MQRs (Minimal Qualified Readers). Checking book sales could be addictive. Making a good Table of Contents is crucial as it is the first part of the book potential readers will encounter. Making a good Table of Contents is hard as you need to figure out what you really want to talk about. The Table of Contents might evolve a bit as you write your book. You should resist the temptation to write the first chapter before the Table of Contents is ready. It’s not necessary to write chapters in order. But it’s easier. Never assume that your readers will read the next chapter only because they have enjoyed the previous chapter. You should always convince your readers why what you are teaching is important and relevant for them. Before writing a chapter, you should formulate to yourself what is the main objective of the chapter. If a chapter has two main objectives, it’s a sign that you should split it into two chapters. A chapter should be treated like a piece of software. You should resist the temptation of writing the chapter contents without a plan. A possible way to make things interesting is to use concrete examples. A possible way to make things clear inside a chapter is to start with the easy stuff and increase the level of difficulty as the chapter goes on. Do not hesitate to highlight sentences that convey an important message. It’s OK to engage in writing a technical book without mastering every topic you want to cover in your book. Writing technical book involves a decent amount of research even if you consider yourself as an expert in the field. Finding attractive but accurate titles to book chapters is an art. You can learn a lot from a failed attempt to write a book, provided that you put your ego aside. If you try to write a Wikipedia article about the topic of your book before it is mentioned by other sources, it will be rejected. It’s possible to write a technical book while keeping your day job as a programmer, provided that you are willing to wake up early or sleep late. Writing a technical book takes between a year and two. Don’t rush! Enjoy the journey… It makes lot of sense to use a source control software for your manuscript. AsciiDoc rocks! PlantUML rocks! NeoVim rocks! Using a tool - like PlantUML - that generates diagrams from text makes it easy to refactor multiple diagrams at once (e.g rename a label, change a color). People on Reddit could feel hurt by opinions that take them out of their comfort zone. On Reddit, when people feel hurt, they could become violent. Being mentored by an experienced writer is a blessing. If you are lucky enough to be mentored by an experienced writer, ask them to be hard with you. That’s how you are going to improve your book! A good technical reviewer is a representative of your MQRs (Minimal Qualified Readers). They can tell you upfront is something is going to be unclear to your readers. You should make sure your readers will never frown while reading your book. A project manager that pays attention to the details is important. Your publisher is your partner. You could make more dollars per copy by self-publishing but you’d probably sell much less copies. Asking early feedback from external reviewers is a great source of improvement. Releasing an early version of the book (approx. when the first third is ready) allows you to find out if the topic of your book is interesting. Finding a good book title is hard. Finding a good book subtitle is even harder. You need to be very careful not to hurt the sensitivity of any of your readers. Having your book featured on HackerNews home page does not mean selling lots of copies. Twitter is a great medium to share ideas from your book. Writing a book could sometimes take you to flow. My real motivation for writing a book was neither to be famous nor to be rich. I only wanted to accomplish a child’s dream. It’s hard to find your voice. Once you have found the your voice, the writing flows much better. Usually readers stop reading after reading the middle of the book. If you want them to read the second half of your book, you need to find a way to hook them. A possible way to hook your readers is to tell a story. Inspiration is not linear. It’s OK to stop writing for a couple of hours. Motivation is not linear. It’s OK to stop writing for a couple of weeks. Be open to critics - even when they hurt your ego. The more you write, the more you like it. It’s safe to assume that every developer can read JavaScript. It’s a great feeling to mention the work of other authors. You should make sure that each and every code snippet - that appears in your book - runs as expected. Invoking “it’s so obvious I don’t need to explain it” is not an acceptable argument. Writing your teaching materials as a dialogue between an imaginary expert and a imaginary novice is a very useful process in order to figure out what questions your materials might raise in your reader’s mind. Sometimes the questions that an imaginary novice would ask about the stuff you teach would be tough. Don’t ignore them. It’s an opportunity to make your book better. Rewriting a chapter from scratch because you forgot to save your work could be a blessing as writing from scratch might lead to a material of higher quality. Writing in a coffee shop makes me feel like a famous author, but in fact I am much more productive at home. Writing a preface - after the whole manuscript is ready - is really a pleasure! You should think about the way your contents is going to appear on the paper. Use headlines, highlights, call outs and diagrams to make sure it doesn’t look boring. Resist the temptation to impress your readers with “cool stuff” if you think it might confuse them. Working on your book is a good reason to wake up early. Sometimes, before sunrise (even in summer!). Include at least 2 or 3 diagrams in every chapter. It makes the material fun to read and easier to grasp. Draw your diagrams on a sheet of paper before using drawing software. It’s OK to use colors in diagrams for the online version of the book. But remember that the print version of the book will be not be in color. Mind maps are a great visualization tool. Use them smartly. When a section is more difficult to read than the others, let your readers know about it. When a section is more difficult to read than the others, make it skippable. It’s OK - from time to time - to copy-paste a diagram in order to save from your readers the need to flip back. Asking a friend or a colleague to read your work in progress is not a productive idea. The best feedback comes from people you don’t know. Brainstorming with a friend or a colleague about a difficulty you encounter might be a productive idea. Throwing away some (good) ideas is sometimes necessary. Not easy but necessary. When you are blocked in the middle of a chapter, it might be a sign that you need to rethink the chapter. When you are blocked in the middle of a chapter, it might be a sign that you need to rest and come back later. Adapting parts of your book to blog posts could be a good idea. But you need to resist the temptation of copy-pasting verbatim as the blog posts will be without the context of the book. It feels great when someone with lots of followers tweets about the fun they had reading your book. Don’t worry if your English is not perfect. Your manuscript will be proofread later. “Not being a native English speaker” is not an excuse for your lack of clarity. Writing an appendix is much easier than writing a chapter. Using humour in a technical book is possible. Hopefully, it’s well appreciated. You should write the chapter introduction after all the other parts of the chapter are written. Getting positive feedback - even from people who are easily enthusiastic - feels good. Front matter is the last part an author writes. Writing a hundred things you learned from writing a technical book is not as difficult as it may seem.</summary></entry><entry><title type="html">Data-Oriented Programming: A link in the chain of programming paradigms</title><link href="/databook/2021/12/10/dop-link.html" rel="alternate" type="text/html" title="Data-Oriented Programming: A link in the chain of programming paradigms" /><published>2021-12-10T04:45:32+00:00</published><updated>2021-12-10T04:45:32+00:00</updated><id>/databook/2021/12/10/dop-link</id><content type="html" xml:base="/databook/2021/12/10/dop-link.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data-Oriented Programming is not an invention. It has its &lt;strong&gt;origins&lt;/strong&gt; in the 1950s and the invention of LISP and is based on a set of &lt;strong&gt;best practices&lt;/strong&gt; that can be found in both Functional Programming and Object-Oriented Programming. However, this paradigm has only been applicable in production systems at scale since the 2010s and the implementation of &lt;strong&gt;efficient&lt;/strong&gt; persistent data structures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article traces the major &lt;strong&gt;ideas&lt;/strong&gt; and &lt;strong&gt;discoveries&lt;/strong&gt; which, over the years, have allowed the emergence of DOP.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/uml/dop-timeline.png&quot; alt=&quot;dop timeline&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1958-lisp&quot;&gt;1958: LISP&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In LISP, John McCarthy has the ingenious idea to represent &lt;strong&gt;data&lt;/strong&gt; as &lt;strong&gt;generic immutable lists&lt;/strong&gt; and to invent a language that makes it very &lt;strong&gt;natural&lt;/strong&gt; to create lists and to access any part of a list. That&amp;#8217;s the reason why LISP stands for LISt Processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In as sense, LISP lists are the ancestors of JavaScript object literals. The idea that it makes sense to represent data with generic data structures (DOP Principle #2) definitely comes from LISP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main limitation of LISP lists is that when we update a list, we need to create a new version of it by cloning it and it has a negative impact on &lt;strong&gt;performances&lt;/strong&gt; both in terms of CPU and memory.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;1981-values-and-objects&quot;&gt;1981: Values and Objects&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a beautiful, short and easy-to-read paper named &lt;a href=&quot;https://www.researchgate.net/publication/220177801_Values_and_Objects_in_Programming_Languages&quot;&gt;Values and Objects in Programming Languages&lt;/a&gt;, Bruce MacLennan clarifies the distinction between &lt;strong&gt;values&lt;/strong&gt; and &lt;strong&gt;objects&lt;/strong&gt;. In a nutshell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Values are &lt;strong&gt;timeless&lt;/strong&gt; abstractions for which the concepts of &lt;strong&gt;updating&lt;/strong&gt;, &lt;strong&gt;sharing&lt;/strong&gt; and &lt;strong&gt;instantiation&lt;/strong&gt; have no meaning. For instance, numbers are values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects exist in &lt;strong&gt;time&lt;/strong&gt; and hence can be &lt;strong&gt;created&lt;/strong&gt;, &lt;strong&gt;destroyed&lt;/strong&gt;, &lt;strong&gt;copied&lt;/strong&gt;, &lt;strong&gt;shared&lt;/strong&gt; and &lt;strong&gt;updated&lt;/strong&gt;. For instance, an employee in a human resource software system is an object.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The meaning of the term &lt;em&gt;object&lt;/em&gt; in this paper is not exactly the same as in the context of Object-Oriented Programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The author explains why it&amp;#8217;s much simpler to write code that deals with values than code that deals with objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This paper has been a source of inspiration for Data-Oriented Programming as it encourages us to implement our systems in such a way that most of our code deals with values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2000-ideal-hash-trees&quot;&gt;2000: Ideal Hash Trees&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Phil Bagwell invented a data structure called Hash Array Mapped Trie (HAMT). In his paper &lt;a href=&quot;https://lampwww.epfl.ch/papers/idealhashtrees.pdf&quot;&gt;Ideal Hash trees&lt;/a&gt;, he used HAMT to implement hash maps with nearly ideal characteristics both in terms of &lt;strong&gt;computation&lt;/strong&gt; and &lt;strong&gt;memory&lt;/strong&gt; usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;HAMT and Ideal hash trees are the foundation of &lt;strong&gt;efficient persistent data structures&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2006-out-of-the-tar-pit&quot;&gt;2006: Out of the Tar Pit&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.semanticscholar.org/paper/Out-of-the-Tar-Pit-Moseley-Marks/41dc590506528e9f9d7650c235b718014836a39d&quot;&gt;Out of the Tar Pit&lt;/a&gt;, Ben Moseley and Peter Marks claim that &lt;strong&gt;complexity&lt;/strong&gt; is the single major difficulty in the development of large-scale software systems. In the context of their paper, complexity means what make a system &lt;strong&gt;hard to understand&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main insight of the authors is that most of the complexity of software systems in not essential but &lt;strong&gt;accidental&lt;/strong&gt;: the complexity doesn&amp;#8217;t come from the problem we have to solve but from the software constructs we use to solve the problem. They suggest various ways to &lt;strong&gt;reduce complexity&lt;/strong&gt; of software systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a sense, Data-Oriented Programming is a way to get us out of the tar pit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2007-clojure&quot;&gt;2007: Clojure&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rich Hickey, an &lt;strong&gt;Object-Oriented&lt;/strong&gt; Programming expert, invented &lt;strong&gt;Clojure&lt;/strong&gt; to make it easier to develop information systems at scale. Rich Hickey likes to summarize Clojure core value with the phrase: &lt;strong&gt;&quot;Just use maps!&quot;&lt;/strong&gt;. By maps, he means &lt;strong&gt;immutable&lt;/strong&gt; maps to be manipulated &lt;strong&gt;efficiently&lt;/strong&gt; by &lt;strong&gt;generic&lt;/strong&gt; functions. Those maps were implemented using the data structures presented by Phil Bagwell in &quot;Ideal Hash Trees&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure has been the main source of inspiration for Data-Oriented Programming. In a sense, Data-Oriented Programming is a formalization of the underlying principles of Clojure and how to apply them in other programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2009-immutability-for-all&quot;&gt;2009: Immutability for all&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure&amp;#8217;s &lt;strong&gt;efficient&lt;/strong&gt; implementation of &lt;strong&gt;persistent data structures&lt;/strong&gt; has been attractive for developers from other programming languages. In 2009, there were ported to Scala. Over the years, they have been &lt;strong&gt;ported&lt;/strong&gt; to other &lt;strong&gt;programming languages&lt;/strong&gt; either by organizations (like Facebook for Immutable.js) or by individual contributors (like Glen Peterson for Paguro in Java).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays, DOP is applicable in virtually any programming language!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dop-principles-as-best-practices&quot;&gt;DOP principles as best practices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;/2020/09/29/do-principles.html&quot;&gt;principles of Data-Oriented programming are not new&lt;/a&gt;. They come from &lt;strong&gt;best practices&lt;/strong&gt; that are well-known among software developers from various programming languages. The &lt;em&gt;innovation&lt;/em&gt; of Data-Oriented programming is the combination of those principles into a cohesive whole.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this section, we put each one of the 4 DOP principles into its broader scope.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-1-separate-code-from-data&quot;&gt;Principle #1: Separate code from data&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating code from data used to be the main point of &lt;strong&gt;tension&lt;/strong&gt; between &lt;strong&gt;Object-Oriented&lt;/strong&gt; Programming (OOP) and &lt;strong&gt;Functional&lt;/strong&gt; Programming (FP). Traditionally, in OOP we &lt;strong&gt;encapsulate&lt;/strong&gt; data together with code in &lt;strong&gt;stateful&lt;/strong&gt; objects, while in FP we write &lt;strong&gt;stateless&lt;/strong&gt; functions that receive data they manipulate as an &lt;strong&gt;explicit&lt;/strong&gt; argument.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tension has been reduced over the years as it is possible in FP to write stateful functions with data encapsulated in their &lt;a href=&quot;https://en.wikipedia.org/wiki/Scope_computer_science&quot;&gt;lexical scope&lt;/a&gt;. Moreover, OOP languages like Java and C# have added support for &lt;strong&gt;anonymous functions&lt;/strong&gt; (lambdas).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-2-represent-data-with-generic-data-structures&quot;&gt;Principle #2: Represent data with generic data structures&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the main innovation of &lt;strong&gt;JavaScript&lt;/strong&gt; when it was released in December 1995 was the &lt;strong&gt;easiness&lt;/strong&gt; to create and manipulate hash maps via &lt;strong&gt;object literals&lt;/strong&gt;. The increasing &lt;strong&gt;popularity&lt;/strong&gt; of JavaScript over the years as a language used everywhere (frontend, backend, desktop) has influenced the developer community to represent data with hash maps when possible. It feels more natural in &lt;strong&gt;dynamically-typed&lt;/strong&gt; programming languages, it is applicable also in &lt;strong&gt;statically-typed&lt;/strong&gt; programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-3-data-is-immutable&quot;&gt;Principle #3: Data is immutable&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data immutability is considered as a best practice as it makes the behaviour of our program more &lt;strong&gt;predictable&lt;/strong&gt;. For instance, in &lt;a href=&quot;https://www.oreilly.com/library/view/effective-java/9780134686097&quot;&gt;Effective Java&lt;/a&gt;, Joshua Block mentions &quot;Minimize mutability&quot; as one of Java best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a famous quote from Alan Kay - who is considered by many as the inventor of Object-Oriented Programming - about the value of immutability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing you wanted any programmer to do is mess with internal state even if presented figuratively. Instead, the objects should be presented as site of higher level behaviors more appropriate for use as dynamic components. (&amp;#8230;&amp;#8203;) It is unfortunate that much of what is called &quot;object-oriented programming&quot; today is simply old style programming with fancier constructs. Many programs are loaded with &quot;assignment-style&quot; operations now done by more expensive attached procedures.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, until 2007 and the implementation of efficient persistent data structures in Clojure, immutability was not applicable for production applications at scale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays, efficient persistent data structures are available in most programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Language&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Library&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/GlenKPeterson/Paguro&quot;&gt;Paguro&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;C#&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/archive/msdn-magazine/2017/march/net-framework-immutable-collections&quot;&gt;Provided by the language&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JavaScript&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://immutable-js.com/&quot;&gt;Immutable.js&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Python&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/tobgu/pyrsistent&quot;&gt;Pyrsistent&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Ruby&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/hamstergem/hamster&quot;&gt;Hamster&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that, many languages provide support for &lt;strong&gt;read-only&lt;/strong&gt; objects natively. Java added  &lt;a href=&quot;https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Record.html&quot;&gt;record classes&lt;/a&gt; in Java 14. C# introduced a &lt;code&gt;record&lt;/code&gt; type in C# 9. There is a (&lt;a href=&quot;https://github.com/tc39/proposal-record-tuple)&quot;&gt;ECMAScript proposal) for supporting immutable records and tuples in JavaScript . Python 3.7 introduced https://docs.python.org/3/library/dataclasses.html[Immutable data classes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;principle-4-separate-data-schema-from-data-representation&quot;&gt;Principle #4: Separate data schema from data representation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the more virulent &lt;strong&gt;critics&lt;/strong&gt; against dynamically-typed programming languages used to be related to the lack of data validation. The answer that dynamically-typed languages used to give to this critics was that you trade data &lt;strong&gt;safety&lt;/strong&gt; for data &lt;strong&gt;flexibility&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the development of &lt;strong&gt;data schema&lt;/strong&gt; languages like &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt;, it is natural to validate data even when data is represented as hash maps.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we have explored the &lt;strong&gt;ideas&lt;/strong&gt; that inspired Data-Oriented Programming and the &lt;strong&gt;discoveries&lt;/strong&gt; that made it applicable in production systems at &lt;strong&gt;scale&lt;/strong&gt; in most programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">This article is an excerpt from my book about Data-Oriented Programming. More excerpts are available on my blog.</summary></entry><entry><title type="html">Polymorphism without objects via multimethods</title><link href="/javascript/2021/10/03/multimethod.html" rel="alternate" type="text/html" title="Polymorphism without objects via multimethods" /><published>2021-10-03T23:54:21+00:00</published><updated>2021-10-03T23:54:21+00:00</updated><id>/javascript/2021/10/03/multimethod</id><content type="html" xml:base="/javascript/2021/10/03/multimethod.html">&lt;p&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt; is well known for allowing different classes to be called with the same interface, via a mechanism called &lt;strong&gt;polymorphism&lt;/strong&gt;. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have &lt;strong&gt;polymorphism without objects&lt;/strong&gt; via &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, multimethods provide more advanced polymorphism than OOP polymorphism as they support cases where the chosen implementation depends on several argument types (multiple dispatch) and even on the dynamic value of the arguments (dynamic dispatch).&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mimicking objects with multimethods (Single dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend on several argument types (Multiple dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend dynamically on several arguments (Dynamic dispatch)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-essence-of-polymorphism&quot;&gt;The essence of polymorphism&lt;/h1&gt;

&lt;p&gt;In OOP, &lt;strong&gt;polymorphism&lt;/strong&gt; is about defining an &lt;strong&gt;interface&lt;/strong&gt; and having &lt;strong&gt;different classes&lt;/strong&gt; that implement the same interface in different ways.&lt;/p&gt;

&lt;p&gt;Let’s illustrate polymorphism with an adaptation of the classic OOP polymorphism example: animal greetings. Let’s say that our animals are &lt;strong&gt;anthropomorphic&lt;/strong&gt; and each of them has its own way to greet, by emitting its preferred sound and telling its name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anthropomorphism&lt;/em&gt; is our first word that comes from the Greek: it comes from the Greek &lt;em&gt;ánthrōpos&lt;/em&gt; that means &lt;em&gt;human&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it’s our second word that comes from the Greek. The first one was &lt;em&gt;polymorphism&lt;/em&gt; coming from the Greek &lt;em&gt;polús&lt;/em&gt; that means &lt;em&gt;many&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;. Polymorphism is the ability of different objects to implement in different ways the same method.&lt;/p&gt;

&lt;p&gt;In Java, for instance, we’d define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAnimal&lt;/code&gt; interface with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; method and each animal class would implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; in its own way, like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Woof woof! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Meow! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cow&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Moo! Call me &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s ask ourselves: what is the &lt;strong&gt;fundamental&lt;/strong&gt; difference between OOP polymorphism and a &lt;strong&gt;naive switch statement&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Let me tell you what I mean by a naive switch statement. We could, as &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; recommends, represent an animal with a &lt;strong&gt;map&lt;/strong&gt; having two &lt;strong&gt;fields&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and call a different piece of code depending on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
break;
case &quot;cat&quot;:
console.log(&quot;Meow! I am: &quot; + animal.name);
break;
case &quot;cow&quot;:
console.log(&quot;Moo! Call me &quot; + animal.name);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes me think that we have not yet met our animals. For no further due, I am happy to present our heroes: Fido, Milo and Clarabelle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fido-milo-clarabelle.jpg&quot; alt=&quot;Fido&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myDog = {
&quot;type&quot;: &quot;dog&quot;,
&quot;name&quot;: &quot;Fido&quot;
};
var myCat = {
&quot;type&quot;: &quot;cat&quot;,
&quot;name&quot;: &quot;Milo&quot;
};
var myCow = {
&quot;type&quot;: &quot;cow&quot;,
&quot;name&quot;: &quot;Clarabelle&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first difference between &lt;strong&gt;OOP polymorphism&lt;/strong&gt; and our &lt;strong&gt;switch statement&lt;/strong&gt; is that, if we pass an invalid map to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; function, bad things will happen.&lt;/p&gt;

&lt;p&gt;We could easily fix that by validating input data using &lt;a href=&quot;/javascript/2021/09/30/data-validation-with-json-schema.html&quot;&gt;JSON Schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another drawback of the switch statement approach is that when you want to &lt;strong&gt;modify&lt;/strong&gt; the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; for a specific animal, you have to change the code that deals with all the animals, While in the OOP approach, we have to change only a specific animal class.&lt;/p&gt;

&lt;p&gt;This could also be easily fixed by having a &lt;strong&gt;separate function&lt;/strong&gt; for each animal, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am: &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
greetDog(animal);
break;
case &quot;cat&quot;:
greetCat(animal);
break;
case &quot;cow&quot;:
greetCow(animal);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you want to &lt;strong&gt;extend&lt;/strong&gt; the functionality of greet and add a new animal?&lt;/p&gt;

&lt;p&gt;Now, we got to the &lt;strong&gt;essence&lt;/strong&gt; of polymorphism! With a switch statement, we cannot add a new animal without modifying the original code, while in OOP we can add a new class without having to modify the original code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main benefit of polymorphism is that it makes the code easily extensible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I have a surprise for you: We don’t need objects to make our code easily extensible. This is what we call: &lt;strong&gt;polymorphism without objects&lt;/strong&gt;. And it is possible with &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;multimethods-with-single-dispatch&quot;&gt;Multimethods with single dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethod&lt;/strong&gt; is a software construct that provides &lt;strong&gt;polymorphism&lt;/strong&gt; without the need for objects.&lt;/p&gt;

&lt;p&gt;Multimethods are made of two pieces:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a &lt;strong&gt;dispatched value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A set of &lt;strong&gt;methods&lt;/strong&gt; that provide an &lt;strong&gt;implementation&lt;/strong&gt; for each dispatched value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dispatch function is similar to an interface in the sense that it defines the way the function needs to be called. But it goes beyond that as it also dispatches a value that differentiates between the different implementations.&lt;/p&gt;

&lt;p&gt;Let me show illustrate how I would implement the animal greeting capabilities using a multimethod called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. We need a dispatch function and 3 methods. Let’s call the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it dispatches the animal type, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And each dispatch value is handled by a specific method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram, there is an arrow between animal and the methods in addition to the arrow between animal and the dispatch function because the arguments of a multimethod are passed to the dispatch function and to the methods.&lt;/p&gt;

&lt;p&gt;For now, our multimethod receives a single argument. But in the next section, it will receive several arguments.&lt;/p&gt;

&lt;p&gt;Let’s see how a multimethod looks like in terms of code. For that, we need a library. For instance, in JavaScript using a library named &lt;a href=&quot;https://github.com/caderek/arrows/tree/master/packages/multimethod&quot;&gt;arrows/multimethod&lt;/a&gt;, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi&lt;/code&gt; to create a multimethod and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; to create a method.&lt;/p&gt;

&lt;p&gt;We start the definition of a multimethod by declaring its &lt;strong&gt;dispatch function&lt;/strong&gt;. In our case, the dispatch function emits the type of the animal as the dispatched value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greet = multi(animal =&amp;gt; animal.type);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we need a method for each dispatch value. In our case, we’ll have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt; for dogs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt; for cats and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt; for cows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
greet = method(&quot;dog&quot;, greetDog)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetCat(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
greet = method(&quot;cat&quot;, greetCat)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
greet = method(&quot;cow&quot;, greetCow)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important to notice that each method declaration could live in its own file. That’s how multimethods provide &lt;strong&gt;extensibility&lt;/strong&gt;: We are free to add new methods without having to modify the original implementation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Method declarations are decoupled from the multimethod initialization&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Under the hood, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrows/multimethod&lt;/code&gt; library maintains a &lt;strong&gt;hash map&lt;/strong&gt;, where the keys correspond to the values emitted by the dispatch function and the values are the methods. When you call the multimethod, the library queries the hash map to find the implementation that corresponds to the dispatched value.&lt;/p&gt;

&lt;p&gt;In terms of usage, we call a multimethod as a regular function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myCow);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if by mistake we pass an animal that doesn’t have a corresponding method, we get a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoMethodError&lt;/code&gt; exception:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myHorse = {
&quot;type&quot;: &quot;horse&quot;,
&quot;name&quot;: &quot;Horace&quot;
};
greet(myHorse);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless you can declare a &lt;strong&gt;default method&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function defaultGreet(animal) {
    console.log(&quot;My name is &quot; + animal.name);
}
greet = method(defaultGreet)(greet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now our horse can greet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myHorse);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-multiple-dispatch&quot;&gt;Multimethods with multiple dispatch&lt;/h1&gt;

&lt;p&gt;So far, we have mimicked OOP by having as a dispatch value the type of the multimethod argument. But if you think again about the flow of a multimethod, you will discover something interesting: in fact the dispatch function could emit any value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod.png&quot; alt=&quot;multi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, we could emit the type of two arguments!&lt;/p&gt;

&lt;p&gt;Imagine that our animals are &lt;strong&gt;polyglot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Polyglot&lt;/em&gt; comes from the Greek &lt;em&gt;polús&lt;/em&gt; meaning &lt;em&gt;much&lt;/em&gt; and &lt;em&gt;glôssa&lt;/em&gt; meaning &lt;em&gt;language&lt;/em&gt;. A polyglot is a person speaking many languages.&lt;/p&gt;

&lt;p&gt;Let’s say our animals speak English and French.&lt;/p&gt;

&lt;p&gt;We represent a language like we represent an animal, with a map having two fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var french = {
&quot;type&quot;: &quot;fr&quot;,
&quot;name&quot;: &quot;Français&quot;
};
var english = {
&quot;type&quot;: &quot;en&quot;,
&quot;name&quot;: &quot;English&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s write the code for the &lt;strong&gt;dispatch function&lt;/strong&gt; and the &lt;strong&gt;methods&lt;/strong&gt; for our polyglot animals. Let’s call our multimethod: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetLang&lt;/code&gt;. We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one dispatch function&lt;/li&gt;
  &lt;li&gt;6 methods: 3 animals (dog, cat, cow) times 2 languages (en, fr).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before the implementation I’d like to draw a flow diagram. It will help me to make things crystal clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal-polyglot.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I omitted the arrow between the arguments and the methods in order to keep the diagram readable. Otherwise there would be too many arrows.&lt;/p&gt;

&lt;p&gt;The dispatch function is going to return an array with two elements: the type of the animal and the type of the language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greetLang = multi((animal, language) =&amp;gt; [animal.type, language.type]);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;A dispatch function could emit any value. It gives us more flexibility than with OOP polymorphism&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The order of the elements in the array It doesn’t matter but it needs to be consistent with the wiring of the methods.&lt;/p&gt;

&lt;p&gt;Now, let’s implement the 6 methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogEn(animal, language) {
console.log(&quot;Woof woof! My name is &quot; + animal.name + &quot; and I speak &quot; +
language.name);
}
greetLang = method([&quot;dog&quot;, &quot;en&quot;], greetLangDogEn)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogFr(animal, language) {
console.log(&quot;Ouaf Ouaf! Mon nom est &quot; + animal.name + &quot; et je parle &quot; +
language.name);
}
greetLang = method([&quot;dog&quot;, &quot;fr&quot;], greetLangDogFr)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCatEn(animal, language) {
console.log(&quot;Meow! I am &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
greetLang = method([&quot;cat&quot;, &quot;en&quot;], greetLangCatEn)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCatFr(animal, language) {
console.log(&quot;Miaou! Je m'appelle &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
greetLang = method([&quot;cat&quot;, &quot;fr&quot;], greetLangCatFr)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCowEn(animal, language) {
console.log(&quot;Moo! Call me &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
greetLang = method([&quot;cow&quot;, &quot;en&quot;], greetLangCowEn)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangCowFr(animal, language) {
console.log(&quot;Meuh! Appelle moi &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
greetLang = method([&quot;cow&quot;, &quot;fr&quot;], greetLangCowFr)(greetLang);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a closer look at the code for the methods that deal with French and tell me if you are surprised to see “Ouaf Ouaf”
instead of “Woof Woof” for dogs, “Miaou” instead of “Meow” for cats and “Meuh” instead of “Moo” for cows. I find it funny that that animal &lt;strong&gt;onomatopoeia&lt;/strong&gt; are different in French than in English!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Onomatopoeia&lt;/em&gt; comes also from the Greek: &lt;em&gt;ónoma&lt;/em&gt; means &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;poiéō&lt;/em&gt; means &lt;em&gt;to produce&lt;/em&gt;. It is the property of words that sound like what they represent. For instance, Woof, Meow and Moo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple dispatch&lt;/strong&gt; is when a dispatch function emits a value that depends on more than one argument.&lt;/p&gt;

&lt;p&gt;Let’s see our multimethod in action and ask our dog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fido&lt;/code&gt; to greet in French:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greetLang(myDog, french);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-dynamic-dispatch&quot;&gt;Multimethods with dynamic dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Dynamic dispatch&lt;/strong&gt; is when the dispatch function of a multimethod returns a value that goes &lt;strong&gt;beyond the static type&lt;/strong&gt; of its arguments, like for instance a number or a boolean.&lt;/p&gt;

&lt;p&gt;Imagine that instead of being polyglot our animals would suffer from &lt;strong&gt;dysmakrylexia&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dysmakrylexia&lt;/em&gt; comes from the Greek &lt;em&gt;dus&lt;/em&gt; expressing the idea of &lt;em&gt;difficulty&lt;/em&gt;, &lt;em&gt;makrýs&lt;/em&gt; meaning &lt;em&gt;long&lt;/em&gt; and &lt;em&gt;léxis&lt;/em&gt; that means &lt;em&gt;diction&lt;/em&gt;. Therefore, dysmakrilexia is a difficulty to pronounce long words.&lt;/p&gt;

&lt;p&gt;It’s not a real word, I invented it for the purpose of this article!&lt;/p&gt;

&lt;p&gt;Let’s say that when their name has more than 5 letters an animal is not able to tell it.&lt;/p&gt;

&lt;p&gt;Let’s call our multimethod &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dysGreet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-dys.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its dispatch function returns an array with two elements: the animal type and a boolean about whether the name is long or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var dysGreet = multi(animal =&amp;gt; [animal.type, animal.name.length &amp;gt; 5]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogShort(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
dysGreet = method([&quot;dog&quot;, false], dysGreetDogShort)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogLong(animal) {
console.log(&quot;Woof woof!&quot;);
}
dysGreet = method([&quot;dog&quot;, true], dysGreetDogLong)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCatShort(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
dysGreet = method([&quot;cat&quot;, false], dysGreetCatShort)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCatLong(animal) {
console.log(&quot;Meow!&quot;);
}
dysGreet = method([&quot;cat&quot;, true], dysGreetCatLong)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCowShort(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
dysGreet = method([&quot;cow&quot;, false], dysGreetCowShort)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetCowLong(animal) {
console.log(&quot;Moo!&quot;);
}
dysGreet = method([&quot;cow&quot;, true], dysGreetCowLong)(dysGreet);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, if we ask Clarabelle to greet, she omits her name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;dysGreet(myCow)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-in-other-languages&quot;&gt;Multimethods in other languages&lt;/h1&gt;

&lt;p&gt;Multimethods are available in many languages, beside JavaScript. In Common LISP and Clojure, they are part of the language. In Python, there is a library called &lt;a href=&quot;https://github.com/weissjeffm/multimethods&quot;&gt;multimethods&lt;/a&gt; and in Ruby there is &lt;a href=&quot;https://github.com/psantacl/ruby-multimethods&quot;&gt;Ruby multimethods&lt;/a&gt;. Both work quite like JavaScript arrows/multimethod.&lt;/p&gt;

&lt;p&gt;In Java, there is the &lt;a href=&quot;http://igm.univ-mlv.fr/~forax/works/jmmf/&quot;&gt;Java Multimethod Framework&lt;/a&gt; and C# supports multimethods natively via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; keyword. However, in both cases, it works only with static data types and not with generic data structures. Also, dynamic dispatch is not supported.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethods&lt;/strong&gt; make it possible to benefit from &lt;strong&gt;polymorphism&lt;/strong&gt; when &lt;strong&gt;data&lt;/strong&gt; is represented with &lt;strong&gt;generic maps&lt;/strong&gt;. Multimethods are made of a &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a dispatch value and &lt;strong&gt;methods&lt;/strong&gt; that provide implementations for the dispatch values.&lt;/p&gt;

&lt;p&gt;In the simplest case (&lt;strong&gt;single dispatch&lt;/strong&gt;), the multimethod receives a single map that contains a type field and the dispatch function of the multimethod emits the value of the type field. In more advanced cases (&lt;strong&gt;multiple dispatch&lt;/strong&gt; and &lt;strong&gt;dynamic dispatch&lt;/strong&gt;), the dispatch function emits an arbitrary value that depends on several arguments.&lt;/p&gt;

&lt;script src=&quot;https://viebel.github.io/klipse/repo/js/multimethod.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;var {multi, method, fromMulti} = window.multimethod;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">Object-Oriented Programming is well known for allowing different classes to be called with the same interface, via a mechanism called polymorphism. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have polymorphism without objects via multimethods.</summary></entry><entry><title type="html">Polymorphism without objects via multimethods</title><link href="/javascript/2021/10/02/multimethod.html" rel="alternate" type="text/html" title="Polymorphism without objects via multimethods" /><published>2021-10-02T20:12:21+00:00</published><updated>2021-10-02T20:12:21+00:00</updated><id>/javascript/2021/10/02/multimethod</id><content type="html" xml:base="/javascript/2021/10/02/multimethod.html">&lt;p&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt; is well known for allowing different classes to be called with the same interface, via a mechanism called &lt;strong&gt;polymorphism&lt;/strong&gt;. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have &lt;strong&gt;polymorphism without objects&lt;/strong&gt; via &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article has been revised and improved. The revised version is available &lt;a href=&quot;/javascript/2021/10/03/multimethod.html&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Moreover, multimethods provide more advanced polymorphism than OOP polymorphism as they support cases where the chosen implementation depends on several argument types (multiple dispatch) and even on the dynamic value of the arguments (dynamic dispatch).&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mimicking objects with multimethods (Single dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend on several argument types (Multiple dispatch)&lt;/li&gt;
  &lt;li&gt;Multimethods where implementations depend dynamically on several arguments (Dynamic dispatch)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-essence-of-polymorphism&quot;&gt;The essence of polymorphism&lt;/h1&gt;

&lt;p&gt;In OOP, &lt;strong&gt;polymorphism&lt;/strong&gt; is about defining an &lt;strong&gt;interface&lt;/strong&gt; and having &lt;strong&gt;different classes&lt;/strong&gt; that implement the same interface in different ways.&lt;/p&gt;

&lt;p&gt;Let’s illustrate polymorphism with an adaptation of the classic OOP polymorphism example: animal greetings. Let’s say that our animals are &lt;strong&gt;anthropomorphic&lt;/strong&gt; and each of them has its own way to greet, by emitting its preferred sound and telling its name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anthropomorphism&lt;/em&gt; is our first word that comes from the Greek: it comes from the Greek &lt;em&gt;ánthrōpos&lt;/em&gt; that means &lt;em&gt;human&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In fact, it’s our second word that comes from the Greek. The first one was &lt;em&gt;polymorphism&lt;/em&gt; coming from the Greek &lt;em&gt;polús&lt;/em&gt; that means &lt;em&gt;many&lt;/em&gt; and &lt;em&gt;morphē&lt;/em&gt; that means &lt;em&gt;form&lt;/em&gt;. Polymorphism is the ability of different objects to implement in different ways the same method.&lt;/p&gt;

&lt;p&gt;In Java, for instance, we’d define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAnimal&lt;/code&gt; interface with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; method and each animal class would implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; in its own way, like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Woof woof! My name is &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Meow! I am &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cow&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAnimal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Moo! Call me &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s ask ourselves: what is the &lt;strong&gt;fundamental&lt;/strong&gt; difference between OOP polymorphism and a &lt;strong&gt;naive switch statement&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Let me tell you what I mean by a naive switch statement. We could, as &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; recommends, represent an animal with a &lt;strong&gt;map&lt;/strong&gt; having two &lt;strong&gt;fields&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and call a different piece of code depending on the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
break;
case &quot;cat&quot;:
console.log(&quot;Meow! I am: &quot; + animal.name);
break;
case &quot;cow&quot;:
console.log(&quot;Moo! Call me &quot; + animal.name);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It makes me think that we have not yet met our animals. For no further due, I am happy to present our heroes: Fido, Milo and Clarabelle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fido-milo-clarabelle.jpg&quot; alt=&quot;Fido&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var myDog = {
&quot;type&quot;: &quot;dog&quot;,
&quot;name&quot;: &quot;Fido&quot;
};
var myCat = {
&quot;type&quot;: &quot;cat&quot;,
&quot;name&quot;: &quot;Milo&quot;
};
var myCow = {
&quot;type&quot;: &quot;cow&quot;,
&quot;name&quot;: &quot;Clarabelle&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first difference between &lt;strong&gt;OOP polymorphism&lt;/strong&gt; and our &lt;strong&gt;switch statement&lt;/strong&gt; is that, if we pass an invalid map to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; function, bad things will happen.&lt;/p&gt;

&lt;p&gt;We could easily fix that by validating input data using &lt;a href=&quot;/javascript/2021/09/30/data-validation-with-json-schema.html&quot;&gt;JSON Schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another drawback of the switch statement approach is that when you want to &lt;strong&gt;modify&lt;/strong&gt; the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt; for a specific animal, you have to change the code that deals with all the animals, While in the OOP approach, we have to change only a specific animal class.&lt;/p&gt;

&lt;p&gt;This could also be easily fixed by having a &lt;strong&gt;separate function&lt;/strong&gt; for each animal, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof Woof! My name is: &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am: &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function greet(animal) {
switch (animal.type) {
case &quot;dog&quot;:
greetDog(animal);
break;
case &quot;cat&quot;:
greetCat(animal);
break;
case &quot;cow&quot;:
greetCow(animal);
break;
};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if you want to &lt;strong&gt;extend&lt;/strong&gt; the functionality of greet and add a new animal?&lt;/p&gt;

&lt;p&gt;Now, we got to the &lt;strong&gt;essence&lt;/strong&gt; of polymorphism! With a switch statement, we cannot add a new animal without modifying the original code, while in OOP we can add a new class without having to modify the original code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main benefit of polymorphism is that it makes the code easily extensible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I have a surprise for you: We don’t need objects to make our code easily extensible. This is what we call: &lt;strong&gt;polymorphism without objects&lt;/strong&gt;. And it is possible with &lt;strong&gt;multimethods&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;multimethods-with-single-dispatch&quot;&gt;Multimethods with single dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethod&lt;/strong&gt; is a software construct that provides &lt;strong&gt;polymorphism&lt;/strong&gt; without the need for objects.&lt;/p&gt;

&lt;p&gt;Multimethods are made of two pieces:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a &lt;strong&gt;dispatched value&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A set of &lt;strong&gt;methods&lt;/strong&gt; that provide an &lt;strong&gt;implementation&lt;/strong&gt; for each dispatched value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dispatch function is similar to an interface in the sense that it defines the way the function needs to be called. But it goes beyond that as it also dispatches a value that differentiates between the different implementations.&lt;/p&gt;

&lt;p&gt;Let me show illustrate how I would implement the animal greeting capabilities using a multimethod called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. We need a dispatch function and 3 methods. Let’s call the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it dispatches the animal type, either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And each dispatch value is handled by a specific method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;dog&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cat&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;cow&quot;&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the diagram, there is an arrow between animal and the methods in addition to the arrow between animal and the dispatch function because the arguments of a multimethod are passed to the dispatch function and to the methods.&lt;/p&gt;

&lt;p&gt;For now, our multimethod receives a single argument. But in the next section, it will receive several arguments.&lt;/p&gt;

&lt;p&gt;Let’s see how a multimethod looks like in terms of code.&lt;/p&gt;

&lt;p&gt;We start with the dispatch function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDispatch&lt;/code&gt;: it defines the signature of the multimethod and emits the type of the animal as the dispatched value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDispatch(animal) {
return animal.type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need a method for each dispatch value. In our case, we’ll have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetDog&lt;/code&gt; for dogs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCat&lt;/code&gt; for cats and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetCow&lt;/code&gt; for cows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetDog(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
function greetCat(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
function greetCow(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the context of multimethods, a method is a function that provides an implementation for a dispatch value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the one hand we have the greet dispatch function and on the other hand we have the different greet implementations. How do you &lt;strong&gt;wire&lt;/strong&gt; everything together?&lt;/p&gt;

&lt;p&gt;For that, we need a library. For instance, in JavaScript using a library named &lt;a href=&quot;https://github.com/caderek/arrows/tree/master/packages/multimethod&quot;&gt;arrows/multimethod&lt;/a&gt;, we call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi&lt;/code&gt; to create a multimethod and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt; to create a method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greet = multi(
greetDispatch,
method(&quot;dog&quot;, greetDog),
method(&quot;cat&quot;, greetCat),
method(&quot;cow&quot;, greetCow)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The names of the dispatch function and the methods are not really important. But I like to follow a simple &lt;strong&gt;naming convention&lt;/strong&gt;: use the name of the multimethod as a &lt;strong&gt;prefix&lt;/strong&gt; for the dispatch function and the methods and have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch&lt;/code&gt; &lt;strong&gt;suffix&lt;/strong&gt; for the dispatch function and a specific &lt;strong&gt;suffix&lt;/strong&gt; for each method.&lt;/p&gt;

&lt;p&gt;Under the hood, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrows/multimethod&lt;/code&gt; library maintains a &lt;strong&gt;hash map&lt;/strong&gt;, where the keys are the values emitted by the dispatch function and the values are the methods. When you call method, the library adds an entry to the hash map and when you call the multimethod it queries the hash map to find the implementation that corresponds to the dispatch value.&lt;/p&gt;

&lt;p&gt;In terms of usage, we call a multimethod as a regular function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greet(myCow);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-multiple-dispatch&quot;&gt;Multimethods with multiple dispatch&lt;/h1&gt;

&lt;p&gt;So far, we have mimicked OOP by having as a dispatch value the type of the multimethod argument. But if you think again about the flow of a multimethod, you will discover something interesting: in fact the dispatch function could emit any value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod.png&quot; alt=&quot;multi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, we could emit the type of two arguments!&lt;/p&gt;

&lt;p&gt;Imagine that our animals are &lt;strong&gt;polyglot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Polyglot&lt;/em&gt; comes from the Greek &lt;em&gt;polús&lt;/em&gt; meaning &lt;em&gt;much&lt;/em&gt; and &lt;em&gt;glôssa&lt;/em&gt; meaning &lt;em&gt;language&lt;/em&gt;. A polyglot is a person speaking many languages.&lt;/p&gt;

&lt;p&gt;Let’s say our animals speak English and French.&lt;/p&gt;

&lt;p&gt;We represent a language like we represent an animal, with a map having two fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var french = {
&quot;type&quot;: &quot;fr&quot;,
&quot;name&quot;: &quot;Français&quot;
};
var english = {
&quot;type&quot;: &quot;en&quot;,
&quot;name&quot;: &quot;English&quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let’s write the code for the &lt;strong&gt;dispatch function&lt;/strong&gt; and the &lt;strong&gt;methods&lt;/strong&gt; for our polyglot animals. Let’s call our multimethod: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greetLang&lt;/code&gt;. We have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one dispatch function&lt;/li&gt;
  &lt;li&gt;6 methods: 3 animals (dog, cat, cow) times 2 languages (en, fr).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But before the implementation I’d like to draw a flow diagram. It will help me to make things crystal clear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-animal-polyglot.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I omitted the arrow between the arguments and the methods in order to keep the diagram readable. Otherwise there would be too many arrows.&lt;/p&gt;

&lt;p&gt;The dispatch function is going to return an array with two elements: the type of the animal and the type of the language:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDispatch(animal, language) {
return [animal.type, language.type];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The order of the elements in the array It doesn’t matter but it needs to be consistent with the wiring of the methods.&lt;/p&gt;

&lt;p&gt;Now, let’s implement the 6 methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function greetLangDogEn(animal, language) {
console.log(&quot;Woof woof! My name is &quot; + animal.name + &quot; and I speak &quot; +
language.name);
}
function greetLangDogFr(animal, language) {
console.log(&quot;Ouaf Ouaf! Mon nom est &quot; + animal.name + &quot; et je parle &quot; +
language.name);
}
function greetLangCatEn(animal, language) {
console.log(&quot;Meow! I am &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
function greetLangCatFr(animal, language) {
console.log(&quot;Miaou! Je m'appelle &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
function greetLangCowEn(animal, language) {
console.log(&quot;Moo! Call me &quot; + animal.name + &quot; and I speak &quot; + language.name);
}
function greetLangCowFr(animal, language) {
console.log(&quot;Meuh! Appelle moi &quot; + animal.name + &quot; et je parle &quot; + language.name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a closer look at the code for the methods that deal with French and tell me if you are surprised to see “Ouaf Ouaf”
instead of “Woof Woof” for dogs, “Miaou” instead of “Meow” for cats and “Meuh” instead of “Moo” for cows. I find it funny that that animal &lt;strong&gt;onomatopoeia&lt;/strong&gt; are different in French than in English!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Onomatopoeia&lt;/em&gt; comes also from the Greek: &lt;em&gt;ónoma&lt;/em&gt; means &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;poiéō&lt;/em&gt; means &lt;em&gt;to produce&lt;/em&gt;. It is the property of words that sound like what they represent. For instance, Woof, Meow and Moo.&lt;/p&gt;

&lt;p&gt;Anyway, after we have defined our &lt;strong&gt;dispatch function&lt;/strong&gt; and our &lt;strong&gt;methods&lt;/strong&gt;, we need to &lt;strong&gt;wire&lt;/strong&gt; them altogether in a multimethod, like we did with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greet&lt;/code&gt;. The only difference that the dispatch values are arrays of strings instead of strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var greetLang = multi(
  greetLangDispatch,
  method([&quot;dog&quot;, &quot;en&quot;], greetLangDogEn),
  method([&quot;dog&quot;, &quot;fr&quot;], greetLangDogFr),
  method([&quot;cat&quot;, &quot;en&quot;], greetLangCatEn),
  method([&quot;cat&quot;, &quot;fr&quot;], greetLangCatFr),
  method([&quot;cow&quot;, &quot;en&quot;], greetLangCowEn),
  method([&quot;cow&quot;, &quot;fr&quot;], greetLangCowFr)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Multiple dispatch&lt;/strong&gt; is when a dispatch function emits a value that depends on more than one argument.&lt;/p&gt;

&lt;p&gt;Let’s see our multimethod in action and ask our dog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fido&lt;/code&gt; to greet in French:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;greetLang(myDog, french);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-with-dynamic-dispatch&quot;&gt;Multimethods with dynamic dispatch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Dynamic dispatch&lt;/strong&gt; is when the dispatch function of a multimethod returns a value that goes &lt;strong&gt;beyond the static type&lt;/strong&gt; of its arguments, like for instance a number or a boolean.&lt;/p&gt;

&lt;p&gt;Imagine that instead of being polyglot our animals would suffer from &lt;strong&gt;dysmakrylexia&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dysmakrylexia&lt;/em&gt; comes from the Greek &lt;em&gt;dus&lt;/em&gt; expressing the idea of &lt;em&gt;difficulty&lt;/em&gt;, &lt;em&gt;makrýs&lt;/em&gt; meaning &lt;em&gt;long&lt;/em&gt; and &lt;em&gt;léxis&lt;/em&gt; that means &lt;em&gt;diction&lt;/em&gt;. Therefore, dysmakrilexia is a difficulty to pronounce long words.&lt;/p&gt;

&lt;p&gt;It’s not a real word, I invented it for the purpose of this article!&lt;/p&gt;

&lt;p&gt;Let’s say that when their name has more than 5 letters an animal is not able to tell it.&lt;/p&gt;

&lt;p&gt;Let’s call our multimethod &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dysGreet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/multimethod-dys.png&quot; alt=&quot;multi-single-dispatch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its dispatch function returns an array with two elements: the animal type and a boolean about whether the name is long or not:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDispatch(animal) {
var hasLongName = animal.name.length &amp;gt; 5;
return [animal.type, hasLongName];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here are the methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function dysGreetDogShort(animal) {
console.log(&quot;Woof woof! My name is &quot; + animal.name);
}
function dysGreetDogLong(animal) {
console.log(&quot;Woof woof!&quot;);
}
function dysGreetCatShort(animal) {
console.log(&quot;Meow! I am &quot; + animal.name);
}
function dysGreetCatLong(animal) {
console.log(&quot;Meow!&quot;);
}
function dysGreetCowShort(animal) {
console.log(&quot;Moo! Call me &quot; + animal.name);
}
function dysGreetCowLong(animal) {
console.log(&quot;Moo!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As surprising as it may sound, wiring a multimethod with dynamic dispatch is as simple as wiring a multimethod with static dispatch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var dysGreet = multi(
dysGreetDispatch,
method([&quot;dog&quot;, false], dysGreetDogShort),
method([&quot;dog&quot;, true], dysGreetDogLong),
method([&quot;cat&quot;, false], dysGreetCatShort),
method([&quot;cat&quot;, true], dysGreetCatLong),
method([&quot;cow&quot;, false], dysGreetCowShort),
method([&quot;cow&quot;, true], dysGreetCowLong)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, if we ask Clarabelle to greet, she omits her name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;dysGreet(myCow)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;multimethods-in-other-languages&quot;&gt;Multimethods in other languages&lt;/h1&gt;

&lt;p&gt;Multimethods are available in many languages, beside JavaScript. In Common LISP and Clojure, they are part of the language. In Python, there is a library called &lt;a href=&quot;https://github.com/weissjeffm/multimethods&quot;&gt;multimethods&lt;/a&gt; and in Ruby there is &lt;a href=&quot;https://github.com/psantacl/ruby-multimethods&quot;&gt;Ruby multimethods&lt;/a&gt;. Both work quite like JavaScript arrows/multimethod.&lt;/p&gt;

&lt;p&gt;In Java, there is the &lt;a href=&quot;http://igm.univ-mlv.fr/~forax/works/jmmf/&quot;&gt;Java Multimethod Framework&lt;/a&gt; and C# supports multimethods natively via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; keyword. However, in both cases, it works only with static data types and not with generic data structures. Also, dynamic dispatch is not supported.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Multimethods&lt;/strong&gt; make it possible to benefit from &lt;strong&gt;polymorphism&lt;/strong&gt; when &lt;strong&gt;data&lt;/strong&gt; is represented with &lt;strong&gt;generic maps&lt;/strong&gt;. Multimethods are made of a &lt;strong&gt;dispatch function&lt;/strong&gt; that emits a dispatch value and &lt;strong&gt;methods&lt;/strong&gt; that provide implementations for the dispatch values.&lt;/p&gt;

&lt;p&gt;In the simplest case (&lt;strong&gt;single dispatch&lt;/strong&gt;), the multimethod receives a single map that contains a type field and the dispatch function of the multimethod emits the value of the type field. In more advanced cases (&lt;strong&gt;multiple dispatch&lt;/strong&gt; and &lt;strong&gt;dynamic dispatch&lt;/strong&gt;), the dispatch function emits an arbitrary value that depends on several arguments.&lt;/p&gt;

&lt;script src=&quot;https://viebel.github.io/klipse/repo/js/multimethod.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;var {multi, method, fromMulti} = window.multimethod;&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="javascript" /><category term="javascript" /><summary type="html">Object-Oriented Programming is well known for allowing different classes to be called with the same interface, via a mechanism called polymorphism. It may seem that the only way to have polymorphism in a program is with objects. In fact, as we are going to see in this article it is possible to have polymorphism without objects via multimethods.</summary></entry></feed>