<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-04-01T16:57:52+00:00</updated><id>/feed.xml</id><title type="html">Yehonathan Sharvit</title><subtitle>Developer. Author. Speaker.</subtitle><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker based in Israel. My passion is to make interesting things easy to understand.&quot;}</name></author><entry><title type="html">Data-Oriented programming challenges</title><link href="/dop/2021/04/01/dop-challenges.html" rel="alternate" type="text/html" title="Data-Oriented programming challenges" /><published>2021-04-01T02:38:15+00:00</published><updated>2021-04-01T02:38:15+00:00</updated><id>/dop/2021/04/01/dop-challenges</id><content type="html" xml:base="/dop/2021/04/01/dop-challenges.html">&lt;p&gt;According to Data-Oriented programming, the best way to reduce complexity of information systems is to follow three basic principles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Separate code from data&lt;/li&gt;
  &lt;li&gt;Keep data immutable&lt;/li&gt;
  &lt;li&gt;Represent data with generic data structures&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are a series of 6 short programming challenges and their solutions written in JavaScript according to the principles of Data-Oriented programming. The purpose is to illustrate the simplicity of Data-Oriented programming.&lt;/p&gt;

&lt;p&gt;If you agree with DOP principles, please implement your solutions in the programming language of your choice, according to DOP principles. I’m sure you’ll enjoy!&lt;/p&gt;

&lt;p&gt;If you disagree with one or more DOP principles, feel free to implement the solutions by breaking one or more principles, and explain why you think that your solution is simpler than the ones that I wrote.&lt;/p&gt;

&lt;h1 id=&quot;rules&quot;&gt;Rules&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;You are allowed to choose any programming language&lt;/li&gt;
  &lt;li&gt;You are allowed to use any third-party library&lt;/li&gt;
  &lt;li&gt;You are allowed to use reflection&lt;/li&gt;
  &lt;li&gt;In the context of the challenges, simplicity is more important than performances.&lt;/li&gt;
  &lt;li&gt;Submit your code snippets as a pull request to the official book source code &lt;a href=&quot;https://github.com/viebel/data-oriented-programming&quot;&gt;Github repository&lt;/a&gt;, under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenges&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;In case you disagree with DOP, please add a few words as comments in your code that explain why you think that your solution is simpler than the ones that I wrote.&lt;/li&gt;
  &lt;li&gt;Four copies of &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; will be given away among the folks that submit a correct solution to at least 4 of the challenges.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;data-model&quot;&gt;Data model&lt;/h1&gt;

&lt;p&gt;Here is the library data model in an informal way:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-data-mindmap.png&quot; alt=&quot;mindmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More formally, here is a UML diagram that describes the relationships between the data entities of the library:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-data-diagram.png&quot; alt=&quot;diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is an example of library data in JavaScript that we are going to use through this article:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var libraryData = {
    &quot;name&quot;: &quot;The smallest library on earth&quot;,
    &quot;address&quot;: &quot;Here and now&quot;,
    &quot;catalog&quot;: {
        &quot;booksByIsbn&quot;: {
            &quot;978-1779501127&quot;: {
                &quot;isbn&quot;: &quot;978-1779501127&quot;,
                &quot;title&quot;: &quot;Watchmen&quot;,
                &quot;publicationYear&quot;: 1987,
                &quot;authorIds&quot;: [&quot;alan-moore&quot;,
                              &quot;dave-gibbons&quot;],
                &quot;bookItems&quot;: [
                    {
                        &quot;id&quot;: &quot;book-item-1&quot;,
                        &quot;rackId&quot;: &quot;rack-17&quot;,
                    },
                    {
                        &quot;id&quot;: &quot;book-item-2&quot;,
                        &quot;rackId&quot;: &quot;rack-17&quot;,
                    }
                ]
            }
        },
        &quot;authorsById&quot;: {
            &quot;alan-moore&quot;: {
                &quot;name&quot;: &quot;Alan Moore&quot;,
                &quot;bookIsbns&quot;: [&quot;978-1779501127&quot;]
            },
            &quot;dave-gibbons&quot;: {
                &quot;name&quot;: &quot;Dave Gibbons&quot;,
                &quot;bookIsbns&quot;: [&quot;978-1779501127&quot;]
            }
        }
    },
  &quot;userManagement&quot;: {
    &quot;librarians&quot;: {
      &quot;franck@gmail.com&quot; : {
        &quot;email&quot;: &quot;franck@gmail.com&quot;,
        &quot;encryptedPassword&quot;: &quot;bXlwYXNzd29yZA==&quot;
      }
    },
    &quot;members&quot;: {
      &quot;samantha@gmail.com&quot;: {
        &quot;email&quot;: &quot;samantha@gmail.com&quot;,
        &quot;encryptedPassword&quot;: &quot;c2VjcmV0&quot;,
        &quot;isBlocked&quot;: false,
      }
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;warm-up&quot;&gt;Warm up&lt;/h1&gt;

&lt;p&gt;What’s the title of the book whose ISBN is “978-1779501127” in upper case?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var informationPath = [&quot;catalog&quot;, &quot;booksByIsbn&quot;, &quot;978-1779501127&quot;, &quot;title&quot;]; 
_.get(libraryData, informationPath).toUpperCase();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, each piece of information has an information path. As you’ll see through the upcoming challenges, this unusual approach has many benefits.&lt;/p&gt;

&lt;h1 id=&quot;challenge-1-retrieve-a-piece-of-information&quot;&gt;Challenge #1: Retrieve a piece of information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge ‍&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBookProperty&lt;/code&gt; that receives library data and ISBN and a field name and returns the value of the field for the book with the given ISBN&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function getBookProperty(libraryData, isbn, fieldName) {
  var informationPath = [&quot;catalog&quot;, &quot;booksByIsbn&quot;, isbn, fieldName]; 
  return _.get(libraryData, informationPath);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;getBookProperty(libraryData, &quot;978-1779501127&quot;, &quot;title&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, data fields are first-class citizens. We are free to create and combine field names dynamically in our program.&lt;/p&gt;

&lt;h1 id=&quot;challenge-2-search-information&quot;&gt;Challenge #2: Search information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge ‍&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookInfo&lt;/code&gt; that receives library data and a string and returns a JSON string that contains book information about the books whose title contains the given string, in a case insensitive way. Book information is made of: title, isbn, author full names.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remark&lt;/strong&gt;: You are not allowed to extract author names from author ids. Assume that author ids are opaque strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function authorNames(catalogData, book) {
  return _.map(_.get(book, &quot;authorIds&quot;),
               function(authorId) {
    return _.get(catalogData, [&quot;authorsById&quot;, authorId, &quot;name&quot;]);
    });
}

function bookInfo(catalogData, book) {
  return  {
    &quot;title&quot;: _.get(book, &quot;title&quot;),
    &quot;isbn&quot;: _.get(book, &quot;isbn&quot;),
    &quot;authorNames&quot;: authorNames(catalogData, book)
  };
}

function searchBooksByTitle(libraryData, query) {
  var catalogData = _.get(libraryData, &quot;catalog&quot;);
  var allBooks = _.get(catalogData, &quot;booksByIsbn&quot;);
  var matchingBooks = _.filter(allBooks, function(book) { 
    return _.get(book, &quot;title&quot;).toLowerCase()
      .includes(query.toLowerCase());
  });
  return JSON.stringify(_.map(matchingBooks, function(book) {
    return bookInfo(catalogData, book);
  }));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;searchBooksByTitle(libraryData, &quot;watCH&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the main benefits are the power of expression of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; combined with the freedom of creating on the fly a book info structure and serialize it for free.&lt;/p&gt;

&lt;h1 id=&quot;challenge-3-add-a-piece-of-information&quot;&gt;Challenge #3: Add a piece of information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blockMember&lt;/code&gt; that receives library data and an email address and returns a new version of library data &lt;strong&gt;without altering the original version&lt;/strong&gt;, where the user with the given email is blocked.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function blockMember(libraryData, email) {
  var informationPath = [&quot;userManagement&quot;, &quot;members&quot;, email, &quot;isBlocked&quot;]; 
  return _.set(libraryData, informationPath, true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var updatedLibraryData = blockMember(libraryData, &quot;samantha@gmail.com&quot;);

var informationPath = [&quot;userManagement&quot;, &quot;members&quot;, &quot;samantha@gmail.com&quot;, &quot;isBlocked&quot;]; 
[_.get(updatedLibraryData, informationPath), _.get(libraryData, informationPath)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, data is immutable. Functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.set()_&lt;/code&gt; make it efficient (both in terms of memory and computation) to create modified versions of data.&lt;/p&gt;

&lt;h1 id=&quot;challenge-4-rename-keys-in-a-data-entity&quot;&gt;Challenge #4: Rename keys in a data entity&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKeys&lt;/code&gt; that receives a data entity and a key mappings and returns a new data entity, without altering the original entity, where the fields are renamed according to the key mappings&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function renameKeys(map, keyMap) {
  return _.reduce(keyMap,
                  function(res, newKey, oldKey) {
                    var value = _.get(map, oldKey);
                    var resWithNewKey = _.set(res, newKey, value);
                    var resWithoutOldKey = _.omit(resWithNewKey, oldKey);
                    return resWithoutOldKey;
                  },
                  map);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKeys&lt;/code&gt; works with author entities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var alanMoore = {
  &quot;name&quot;: &quot;Alan Moore&quot;,
  &quot;bookIsbns&quot;: [&quot;978-1779501127&quot;]
};
renameKeys(alanMoore, {&quot;bookIsbns&quot;: &quot;books&quot;}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKeys&lt;/code&gt; works also with book item entities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var bookItem = {
  &quot;id&quot;: &quot;book-item-1&quot;,
  &quot;rackId&quot;: &quot;rack-17&quot;,
  &quot;isLent&quot;: true
};

renameKeys(bookItem, {&quot;rackId&quot;: &quot;id&quot;,
                     &quot;id&quot;: &quot;bookItemId&quot;}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Data-Oriented programming, data entities are represented with generic data structures that can be manipulated with generic functions that work with any data entity.&lt;/p&gt;

&lt;h1 id=&quot;challenge-5-merge-pieces-of-information&quot;&gt;Challenge #5: Merge pieces of information&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergeAndSerialize&lt;/code&gt; that receives two pieces of book information, one from the database and one from an external service like &lt;a href=&quot;https://openlibrary.org/dev/docs/api/books&quot;&gt;Open Library Books API&lt;/a&gt; and returns a JSON string with information from both sources.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;var watchmenFromDB = {
        &quot;isbn&quot;: &quot;978-1779501127&quot;,
        &quot;title&quot;: &quot;Watchmen&quot;,
        &quot;publicationYear&quot;: 1987,
        &quot;authorIds&quot;: [&quot;alan-moore&quot;,
                      &quot;dave-gibbons&quot;],
        &quot;bookItems&quot;: [
          {
            &quot;id&quot;: &quot;book-item-1&quot;,
            &quot;rackId&quot;: &quot;rack-17&quot;,
            &quot;isLent&quot;: true
          },
          {
            &quot;id&quot;: &quot;book-item-2&quot;,
            &quot;rackId&quot;: &quot;rack-17&quot;,
            &quot;isLent&quot;: false
          }
        ]
      };

var watchmenFromOpenLib = {
  &quot;publishers&quot;: [
    &quot;DC Comics&quot;
  ],
  &quot;number_of_pages&quot;: 334,
  &quot;weight&quot;: &quot;1.4 pounds&quot;,
  &quot;physical_format&quot;: &quot;Paperback&quot;,
  &quot;subjects&quot;: [
    &quot;Graphic Novels&quot;,
    &quot;Comics &amp;amp; Graphic Novels&quot;,
    &quot;Fiction&quot;,
    &quot;Fantastic fiction&quot;
  ],
  &quot;isbn_13&quot;: [
    &quot;9780930289232&quot;
  ],
  &quot;title&quot;: &quot;Watchmen&quot;,
  &quot;isbn_10&quot;: [
    &quot;0930289234&quot;
  ],
  &quot;publish_date&quot;: &quot;April 1, 1995&quot;,
  &quot;physical_dimensions&quot;: &quot;10.1 x 6.6 x 0.8 inches&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We simply merge the two maps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;_.merge(watchmenFromDB, watchmenFromOpenLib);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we JSON serialize the result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function mergeAndSerialize(a, b) {
  return JSON.stringify(_.merge(a, b));
}

mergeAndSerialize(watchmenFromDB, watchmenFromOpenLib);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we represent data with generic data structures, we benefit from many well defined functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt;, implemented either in the programming language itself or in third-party libraries like `Lodash.js.&lt;/p&gt;

&lt;h1 id=&quot;challenge-6-compare-versions-of-data&quot;&gt;Challenge #6: Compare versions of data&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Write a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diff&lt;/code&gt; that receives two versions of library data and returns an object that contains the diff between the two versions, in the format of your choice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;function diffObjects(data1, data2) {
  var emptyObject = _.isArray(data1) ? [] : {};
  if(data1 == data2) {
    return emptyObject;
  }
  var keys = _.union(_.keys(data1), _.keys(data2));
  return _.reduce(keys,
                  function (acc, k) {
    var res = diff(_.get(data1, k),
                   _.get(data2, k));
    if((_.isObject(res) &amp;amp;&amp;amp; _.isEmpty(res)) ||
       (res == &quot;data-diff:no-diff&quot;)) {
      return acc;
    }
    return _.set(acc, [k], res);
  },
                  emptyObject);
}

function diff(data1, data2) {
  if(_.isObject(data1) &amp;amp;&amp;amp; _.isObject(data2)) {
    return diffObjects(data1, data2);
  }
  if(data1 !== data2) {
    return data2;
  }
  return &quot;data-diff:no-diff&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;diff(libraryData, updatedLibraryData);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-eval-js&quot;&gt;diff(libraryData, libraryDataupdatedLibraryData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When every piece of data in the system is represented with generic data structures, it is quite easy to compare recursively different data versions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Do you like 😃 DOP or do you hate 😡 it?&lt;/p&gt;

&lt;p&gt;Anyway, it’s time to show off your coding skills 🧑‍💻!&lt;/p&gt;

&lt;p&gt;Submit your code snippets as a pull request to the official book source code &lt;a href=&quot;https://github.com/viebel/data-oriented-programming&quot;&gt;Github repository&lt;/a&gt;, under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;challenges&lt;/code&gt; folder.
In case you disagree with DOP, please add a few words as comments in your code that explain why you think that your solution is simpler than the ones that I wrote.&lt;/p&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/g/lodash@4(lodash.min.js+lodash.fp.min.js)&quot;&gt;&lt;/script&gt;

&lt;script&gt;
var fp = _.noConflict();
var _ = fp.convert({
  // Specify capping iteratee arguments.
  'cap': false,
  // Specify currying.
  'curry': false,
  // Specify fixed arity.
  'fixed': false,
  // Specify immutable operations.
  'immutable': true,
  // Specify rearranging arguments.
  'rearg': false
});
&lt;/script&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="dop" /><category term="dop" /><category term="javascript" /><summary type="html">According to Data-Oriented programming, the best way to reduce complexity of information systems is to follow three basic principles:</summary></entry><entry><title type="html">How to access data dynamically in Java without losing type safety</title><link href="/java/2021/03/28/dynamic-data-access-in-java.html" rel="alternate" type="text/html" title="How to access data dynamically in Java without losing type safety" /><published>2021-03-28T12:11:42+00:00</published><updated>2021-03-28T12:11:42+00:00</updated><id>/java/2021/03/28/dynamic-data-access-in-java</id><content type="html" xml:base="/java/2021/03/28/dynamic-data-access-in-java.html">&lt;p&gt;An interesting question in the context of information systems is:&lt;/p&gt;

&lt;p&gt;To what extent &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt; is applicable in a statically-typed language like Java?&lt;/p&gt;

&lt;p&gt;The first two principles of Data-Oriented programming (DOP) seem to be in the spirit of the newest additions to Java (e.g data records in Java 14):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Principle #1: Code is &lt;strong&gt;separated&lt;/strong&gt; from data&lt;/li&gt;
  &lt;li&gt;Principle #2: Data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, when it comes to Principle #3, it causes discomfort to many Java developers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Principle #3: Data access is &lt;strong&gt;flexible&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By flexible data access, we mean that it should be possible inside our programs to access dynamically a data field, given its name.&lt;/p&gt;

&lt;p&gt;There are two ways to provide &lt;strong&gt;dynamic data access&lt;/strong&gt; in Java:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Represent data with &lt;strong&gt;classes&lt;/strong&gt; (or records in Java 14) and use &lt;strong&gt;reflection&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Represent data with &lt;strong&gt;string maps&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The purpose of this article is to illustrate various ways to &lt;strong&gt;access data dynamically&lt;/strong&gt; in Java, both with classes and maps. Towards the end of the article, we suggest how to keep a bit of &lt;strong&gt;type safety&lt;/strong&gt; even when data access is dynamic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/freedom.jpg&quot; alt=&quot;freedom&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;data-in-json&quot;&gt;Data in JSON&lt;/h1&gt;

&lt;p&gt;Let’s take as an example data from a library catalog with a single book.&lt;/p&gt;

&lt;p&gt;Here is an example of a catalog data in JSON:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some pieces of data in our catalog are &lt;strong&gt;homogeneous maps of unknown size&lt;/strong&gt; (e.g. the book index, the author index)&lt;/p&gt;

&lt;p&gt;Other pieces of data are &lt;strong&gt;heterogeneous maps of fixed size&lt;/strong&gt; (e.g. a book, a author).&lt;/p&gt;

&lt;p&gt;Homogeneous maps of unknown size are usually represented by &lt;strong&gt;hash maps&lt;/strong&gt;, while heterogeneous maps of fixed sized are usually represented with &lt;strong&gt;classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The example that we are going to use again and again throughout the article, is accessing the title of watchmen inside the catalog and convert it to upper case.&lt;/p&gt;

&lt;h1 id=&quot;representing-data-with-records&quot;&gt;Representing data with records&lt;/h1&gt;

&lt;p&gt;Java 14 introduced the concept of a &lt;strong&gt;data record&lt;/strong&gt; that provides a first-class means for modelling data-only aggregates.&lt;/p&gt;

&lt;p&gt;Here is how our data model would look like with records:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicationYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CatalogData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorByIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Records are instantiated like classes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Conceptually, the title of Watchmen, like any other piece of information has an &lt;em&gt;information path&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when we navigate the information path we encounter both records and hash maps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The natural way to access data in a record is via the dot notation&lt;/li&gt;
  &lt;li&gt;The natural way to access data in a hash map is via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get()&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how we access the title of watchmen and convert it to upper case.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This lack of uniformity between data access in a record and in a map is not only annoying from a theoretic perspective. It also has practical drawbacks. For instance, we cannot store the information path in a variable or in a function argument. In fact, we don’t have a &lt;strong&gt;dynamic access to information&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;accessing-data-in-a-record-via-reflection&quot;&gt;Accessing data in a record via reflection&lt;/h1&gt;

&lt;p&gt;We can overcome the drawbacks exposed in the previous section and provide a &lt;strong&gt;dynamic access to information&lt;/strong&gt; in a record or in a class, via &lt;strong&gt;reflection&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now, we are able to access data in a record via a string that holds the name of a field. For instance:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;Watchmen&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can easily modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess.get()&lt;/code&gt; so that it works both with records and maps:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now, we can write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getIn()&lt;/code&gt; method that receives an object and an information path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is how we access the title of watchmen in the catalog, via its &lt;strong&gt;information path&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;watchmen&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem that remains to be solved is the type of the value that we retrieve via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess.get()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess.getIn()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The most cumbersome way is to cast explicitly:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another option is to add two specific methods to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicAccess&lt;/code&gt; that return a string:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It makes data access a bit less verbose:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;representing-data-with-hash-maps&quot;&gt;Representing data with hash maps&lt;/h1&gt;

&lt;p&gt;Another approach to providing a &lt;strong&gt;dynamic data access&lt;/strong&gt; is to represent every piece of data with hash maps. The benefits of this approach is that we don’t need to use reflection. The drawback is that all our maps are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt; and it means that we have lost &lt;strong&gt;type safety&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like before, we are free to access any piece of information via its information path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;typed-getters&quot;&gt;Typed getters&lt;/h1&gt;

&lt;p&gt;We could move one step further and try to make it easier to specify the type of a value associated with a key, by making &lt;strong&gt;field names first-class citizens&lt;/strong&gt; in our program.&lt;/p&gt;

&lt;p&gt;Let’s start with a non-nested key in a map or a record.&lt;/p&gt;

&lt;p&gt;We create a generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Getter&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can create a &lt;strong&gt;typed getter&lt;/strong&gt; that contains both:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the name of the field&lt;/li&gt;
  &lt;li&gt;the type of its value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For instance, here is how we create a typed getter for the title of a book:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is how we use the typed getter to access the field value:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;watchmen&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The getter is typed, therefore we can access the value as a string without any casting:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can extend the typed getter approach to nested keys:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetterIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetterIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchFieldException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DynamicAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is how we access a piece of information via its information path:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;nc&quot;&gt;GetterIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NESTED_TITLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetterIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;informationPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NESTED_TITLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;WATCHMEN&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Providing a &lt;strong&gt;dynamic data access&lt;/strong&gt; in a &lt;strong&gt;statically-typed&lt;/strong&gt; language like Java is challenging. When data is represented with classes or records, we need to use reflection and when data is represented with string maps, we loose the information about types.&lt;/p&gt;

&lt;p&gt;Maybe an approach like the typed getters, presented at the end of the article, could open the door to the Java community for a &lt;strong&gt;dynamic data access&lt;/strong&gt; that doesn’t compromise &lt;strong&gt;type safety&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="java" /><category term="java" /><summary type="html">An interesting question in the context of information systems is:</summary></entry><entry><title type="html">The concepts behind Data-Oriented programming</title><link href="/clojure/2021/03/15/rich-hickey-concepts.html" rel="alternate" type="text/html" title="The concepts behind Data-Oriented programming" /><published>2021-03-15T04:03:52+00:00</published><updated>2021-03-15T04:03:52+00:00</updated><id>/clojure/2021/03/15/rich-hickey-concepts</id><content type="html" xml:base="/clojure/2021/03/15/rich-hickey-concepts.html">&lt;p&gt;Here are 9 fundamental general concepts about programming.&lt;/p&gt;

&lt;p&gt;In my opinion, &lt;strong&gt;Data-Oriented programming&lt;/strong&gt; as a language-agnostic paradigm is founded on a certain understanding (interpretation?) of those concepts.&lt;/p&gt;

&lt;p&gt;My understanding of those concepts has been highly influenced by &lt;strong&gt;Rich Hickey&lt;/strong&gt;’s talks where he shares his unique approach to &lt;strong&gt;effective information systems&lt;/strong&gt; and the rationale behind &lt;strong&gt;Clojure&lt;/strong&gt; as a &lt;strong&gt;Data-Oriented&lt;/strong&gt; programming language.&lt;/p&gt;

&lt;p&gt;This glossary is my attempt to make Data-Oriented programming better understood in the global community of developers and explains how DOP differs from Object-Oriented programming and functional programming.&lt;/p&gt;

&lt;p&gt;The concepts are presented in alphabetical order.&lt;/p&gt;

&lt;h2 id=&quot;1-abstraction&quot;&gt;1. Abstraction&lt;/h2&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; is about drawing from a set of &lt;strong&gt;exemplars&lt;/strong&gt; some &lt;strong&gt;essential&lt;/strong&gt; thing.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Relational algebra&lt;/strong&gt; is an example of &lt;strong&gt;data abstraction&lt;/strong&gt;. Modelling data as relations gives us lot of power:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We express advanced data manipulation operations with well-defined relational algebra operators&lt;/li&gt;
  &lt;li&gt;An implementation of relational algebra operators is applicable to all exemplars of data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;in-clojure&quot;&gt;In Clojure&lt;/h3&gt;
&lt;p&gt;Representing data with &lt;strong&gt;maps&lt;/strong&gt; (“just use maps”) is a &lt;strong&gt;data abstraction&lt;/strong&gt;. The only required knowledge in order to access data is the field name, represented with a generic entity (e.g. a string or a keyword).&lt;/p&gt;

&lt;p&gt;Moreover, there is a well-defined algebra of maps  applicable to any data represented with maps.&lt;/p&gt;

&lt;h3 id=&quot;see-also&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;Concretion&lt;/p&gt;

&lt;h2 id=&quot;2-concretion&quot;&gt;2. Concretion&lt;/h2&gt;
&lt;h3 id=&quot;definition-1&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Concretion&lt;/strong&gt; is when in order to use something we need a &lt;strong&gt;concrete&lt;/strong&gt; knowledge about the thing.&lt;/p&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Dependency Inversion Principle&lt;/a&gt;: Entities must depend on &lt;strong&gt;abstractions&lt;/strong&gt;, not on &lt;strong&gt;concretions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The common way to apply DIP to Object-Oriented programming is that when a class depends on another class, it should not depend on concrete instances of the other class. Rather, it should depend on an &lt;strong&gt;abstract interface&lt;/strong&gt; implemented by that class.&lt;/p&gt;

&lt;p&gt;A more abstract way to handle dependency between entities is to invoke code by &lt;strong&gt;sending a message&lt;/strong&gt; to an object. The only required knowledge is the name of the message, represented with a generic entity (e.g. a string).&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-1&quot;&gt;In Clojure&lt;/h3&gt;

&lt;p&gt;In a sense, Clojure idiom &lt;em&gt;just use maps&lt;/em&gt; is an application of the Dependency Inversion Principle to &lt;strong&gt;data&lt;/strong&gt;. Representing data with a data class or a data record is a &lt;strong&gt;concretion&lt;/strong&gt;: The only way to access data is via the class methods or record members.&lt;/p&gt;

&lt;p&gt;When we access data through the methods of an interface, it’s a bit less concrete. But still, we can access data only through the methods defined in the interface.&lt;/p&gt;

&lt;p&gt;A more abstract (less concrete) way to represent data is with generic maps. In order to access data in a map, the only required knowledge is the field name, represented with generic entities like strings (or Clojure keywords).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Code&lt;/th&gt;
      &lt;th&gt;Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Concrete&lt;/td&gt;
      &lt;td&gt;Concrete class&lt;/td&gt;
      &lt;td&gt;Concrete record&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Less concrete&lt;/td&gt;
      &lt;td&gt;Abstract class&lt;/td&gt;
      &lt;td&gt;Abstract class with getters&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Most abstract&lt;/td&gt;
      &lt;td&gt;Message passing&lt;/td&gt;
      &lt;td&gt;Generic map&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;see-also-1&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;Abstraction&lt;/p&gt;

&lt;h2 id=&quot;3-identity&quot;&gt;3. Identity&lt;/h2&gt;
&lt;h3 id=&quot;definition-2&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Identity&lt;/strong&gt; is a &lt;strong&gt;stable&lt;/strong&gt; logical entity that humans or programs associate with a series of different &lt;strong&gt;values&lt;/strong&gt; over &lt;strong&gt;time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An identity is not the same as a name.&lt;/p&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example&lt;/h3&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan-state-on-march-2021&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; No kidding!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:firstName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Yehonathan&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:lastName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sharvit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yehonathan-state-on-march-2021&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s describe exactly what happens in this code snippet in terms of name, identity, state and value:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yehonathan&lt;/code&gt; is a name that refers to an identity&lt;/li&gt;
  &lt;li&gt;The identity is represented as an &lt;a href=&quot;https://clojuredocs.org/clojure.core/atom&quot;&gt;atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The map with the fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age=42&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName=&quot;Yehonathan&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName=&quot;Sharvit&quot;&lt;/code&gt; is a value&lt;/li&gt;
  &lt;li&gt;After calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(reset! yehonathan ...)&lt;/code&gt;, the state of the identity referred by the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yehonathan&lt;/code&gt; is the map with the fields &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age=42&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;firstName=&quot;Yehonathan&quot;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastName=&quot;Sharvit&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;see-also-2&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;State, Value&lt;/p&gt;

&lt;h2 id=&quot;4-information&quot;&gt;4. Information&lt;/h2&gt;
&lt;h3 id=&quot;definition-3&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Information&lt;/strong&gt; is what you &lt;strong&gt;know&lt;/strong&gt; about something that happened in the &lt;strong&gt;world&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Information is inherently &lt;strong&gt;sparse&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Information is &lt;strong&gt;open&lt;/strong&gt; in the sense that it could contain pieces that you don’t care about in some context.&lt;/p&gt;

&lt;p&gt;Information &lt;strong&gt;accretes&lt;/strong&gt;, it just keeps accumulating.&lt;/p&gt;

&lt;p&gt;The best way to grapple information is by using names.&lt;/p&gt;

&lt;h2 id=&quot;5-loose-coupling&quot;&gt;5. Loose coupling&lt;/h2&gt;
&lt;h3 id=&quot;definition-4&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;A system is &lt;strong&gt;loosely coupled&lt;/strong&gt; when its components have little knowledge of the internals of other components.&lt;/p&gt;

&lt;p&gt;Components A is loosely coupled with component B if A communicates with B without &lt;strong&gt;concrete knowledge&lt;/strong&gt; about the internals of B.&lt;/p&gt;

&lt;h3 id=&quot;example-3&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Web services that communicate via JSON are loosely coupled.&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-2&quot;&gt;In Clojure&lt;/h3&gt;

&lt;p&gt;In Clojure, inside a program we “&lt;strong&gt;just use maps&lt;/strong&gt;” to communicate. This is based on the principle that
“we should program the &lt;strong&gt;insides&lt;/strong&gt; of our systems like we program the &lt;strong&gt;outsides&lt;/strong&gt;”.
Outside, we have loose coupling everywhere: over the wire we communicate via data (e.g. JSON).
Let’s do the same inside and communicate via data (e.g. hash maps).&lt;/p&gt;

&lt;p&gt;Compare that with functions that receive a record (or a data class) as an argument. In order to call those functions, we need to import the definition of the record. That’s not loose coupling!&lt;/p&gt;

&lt;h3 id=&quot;see-also-3&quot;&gt;See also&lt;/h3&gt;

&lt;p&gt;Abstraction, Concretion&lt;/p&gt;

&lt;h2 id=&quot;6-maybe&quot;&gt;6. Maybe&lt;/h2&gt;
&lt;h3 id=&quot;definition-5&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;Nothing is of type &lt;em&gt;maybe&lt;/em&gt; something.&lt;/p&gt;

&lt;p&gt;Maybe is a property of the aggregate not of the field.&lt;/p&gt;

&lt;h3 id=&quot;example-4&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;It makes no sense to say that the type of the social security number of a person is &lt;em&gt;maybe&lt;/em&gt; a string.&lt;/p&gt;

&lt;p&gt;What makes sense is to say: in this map (that aggregates data about a person), the social security number is maybe a string (it could also be absent from the map).&lt;/p&gt;

&lt;p&gt;Even more precise: this function receives as an argument a map where the social security number is maybe a string.&lt;/p&gt;

&lt;h2 id=&quot;7-names&quot;&gt;7. Names&lt;/h2&gt;
&lt;h3 id=&quot;definition-6&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Names&lt;/strong&gt; are a fundamental property of information. However, in statically-typed languages, names compile away. There exist at compile time but not a run time.&lt;/p&gt;

&lt;p&gt;At run time, a field cannot be access &lt;strong&gt;dynamically&lt;/strong&gt; by its name. In order to access data, we are required to import the definition of the class that contains the data.&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-3&quot;&gt;In Clojure&lt;/h3&gt;
&lt;p&gt;In a map, field names are first-class.&lt;/p&gt;

&lt;h3 id=&quot;see-also-4&quot;&gt;See also&lt;/h3&gt;

&lt;p&gt;Concretion, Loose-coupling&lt;/p&gt;

&lt;h2 id=&quot;8-state&quot;&gt;8. State&lt;/h2&gt;
&lt;h3 id=&quot;definition-7&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; of an identity is the value &lt;strong&gt;currently&lt;/strong&gt; associated with this identity.&lt;/p&gt;

&lt;p&gt;State never changes. At different times, different values are associated with an identity. We say that an identity can be in different states at different times.&lt;/p&gt;

&lt;p&gt;An identity is not a state. An identity has a state at any point in time.&lt;/p&gt;

&lt;h3 id=&quot;see-also-5&quot;&gt;See also&lt;/h3&gt;
&lt;p&gt;Identity, Value&lt;/p&gt;

&lt;h2 id=&quot;9-value&quot;&gt;9. Value&lt;/h2&gt;
&lt;h3 id=&quot;definition-8&quot;&gt;Definition&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;value&lt;/strong&gt; is something that doesn’t change. A value is inherently &lt;strong&gt;immutable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Values are part of the world, not part of our programs or our mental models.&lt;/p&gt;

&lt;h3 id=&quot;example-5&quot;&gt;Example&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In all programming languages, numbers are values.&lt;/li&gt;
  &lt;li&gt;In most programming languages, strings are values.&lt;/li&gt;
  &lt;li&gt;In functional programming languages, data collections are values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;see-also-6&quot;&gt;See also&lt;/h3&gt;

&lt;p&gt;Identity, State&lt;/p&gt;

&lt;h3 id=&quot;in-clojure-4&quot;&gt;In Clojure&lt;/h3&gt;
&lt;p&gt;In Clojure, every piece of data is a value: numbers, strings, maps, vectors, sets, lists.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’ll leave you with the following questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What are the fundamental differences between Clojure and Object-Oriented programming?&lt;/li&gt;
  &lt;li&gt;What are the fundamental differences between Clojure and functional Oriented programming?&lt;/li&gt;
  &lt;li&gt;What are the main benefits of Data-Oriented programming as evangelised by Clojure when building information systems?&lt;/li&gt;
&lt;/ol&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker based in Israel. My passion is to make interesting things easy to understand.&quot;}</name></author><category term="clojure" /><category term="dop" /><category term="clojure" /><category term="theory" /><summary type="html">Here are 9 fundamental general concepts about programming.</summary></entry><entry><title type="html">Data-Oriented programming in Java</title><link href="/java/2021/03/05/data-oriented-programming-in-java.html" rel="alternate" type="text/html" title="Data-Oriented programming in Java" /><published>2021-03-05T04:03:52+00:00</published><updated>2021-03-05T04:03:52+00:00</updated><id>/java/2021/03/05/data-oriented-programming-in-java</id><content type="html" xml:base="/java/2021/03/05/data-oriented-programming-in-java.html">&lt;h1 id=&quot;the-principles-of-data-oriented-programming&quot;&gt;The principles of Data-Oriented programming&lt;/h1&gt;

&lt;p&gt;The purpose of Data-Oriented programming (DOP) is to &lt;strong&gt;reduce the complexity&lt;/strong&gt; of software systems, by promoting the treatment of data as a first-class citizen.&lt;/p&gt;

&lt;p&gt;Concretely, it comes down to the application of 3 principles:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code is &lt;strong&gt;separated&lt;/strong&gt; from data&lt;/li&gt;
  &lt;li&gt;Data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Data access is &lt;strong&gt;flexible&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those principles are not new: They have been adopted in one way or another by the Java community over the years through various design patterns (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity_component_system&quot;&gt;Entity component system&lt;/a&gt;) and smart libraries that leverage Java annotations (e.g. Project Lombok).&lt;/p&gt;

&lt;p&gt;However, I believe that the combination of those 3 principles makes &lt;strong&gt;a whole that is greater that the sum of its parts&lt;/strong&gt;, in the sense that software systems built on top of DOP principles tend to be less complex. In my book &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt;, I am exploring in greater details how to apply the principles of DOP in the context of a &lt;strong&gt;production software system&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the present article, I am going to illustrate how to apply the principles of DOP in Java.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dop-in-java.png&quot; alt=&quot;Data-Oriented Programming in Java&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;separating-code-from-data-in-java&quot;&gt;Separating code from data in Java&lt;/h1&gt;

&lt;p&gt;Suppose we want to build a library management system with the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Two kinds of &lt;em&gt;users&lt;/em&gt;: library members and librarians&lt;/li&gt;
  &lt;li&gt;Users &lt;em&gt;log in&lt;/em&gt; to the system via email and password.&lt;/li&gt;
  &lt;li&gt;Members can &lt;em&gt;borrow&lt;/em&gt; books&lt;/li&gt;
  &lt;li&gt;Members and librarians can &lt;em&gt;search&lt;/em&gt; books by title or by author&lt;/li&gt;
  &lt;li&gt;Librarians can &lt;em&gt;block&lt;/em&gt; and &lt;em&gt;unblock&lt;/em&gt; members (e.g. when they are late in returning a book)&lt;/li&gt;
  &lt;li&gt;Librarians can &lt;em&gt;list the books&lt;/em&gt; currently lent by a member&lt;/li&gt;
  &lt;li&gt;There could be &lt;em&gt;several copies&lt;/em&gt; of a book&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A possible (naive) classic Java design for such a system would be made of the following classes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Library&lt;/code&gt;: The central part for which the system is designed&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt;: A book&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BookItem&lt;/code&gt;: A book can have multiple copies, each copy is considered as a book item&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BookLending&lt;/code&gt;: When a book is lent, a book lending object is created&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Member&lt;/code&gt;: A member of the library&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Librarian&lt;/code&gt;: A librarian&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;: A base class for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Librarian&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Member&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Catalog&lt;/code&gt;: Contains list of books&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt;: A book author&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A possible class diagram (eluding the details about members and methods) would be something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-uml-diagram.png&quot; alt=&quot;Library management class diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, a Java expert would probably comes up with a smarter design, leveraging some smart &lt;strong&gt;design patterns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, I’d like to illustrate how the application of DOP Principle #1 naturally leads to a simpler design, without involving any design patterns. We are going to split each class of our system in two classes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A code class with &lt;strong&gt;static methods&lt;/strong&gt; only&lt;/li&gt;
  &lt;li&gt;A data class with &lt;strong&gt;members&lt;/strong&gt; only&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result is a diagram made of two disjoint diagrams:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Data classes on the left&lt;/li&gt;
  &lt;li&gt;Code classes on the right&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lms-separate-code-from-data.png&quot; alt=&quot;Separating code from data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t you agree that the resulting diagram is less complex than the previous one?&lt;/p&gt;

&lt;p&gt;The cool think is that applying Principle #1 doesn’t require being a Java expert. Of course, the combination of smart design patterns and DOP Principle #1 would lead to an even better design.&lt;/p&gt;

&lt;h1 id=&quot;how-to-represent-immutable-data-in-java&quot;&gt;How to represent immutable data in Java&lt;/h1&gt;

&lt;p&gt;The benefits of applying DOP Principle #2 about &lt;strong&gt;data immutability&lt;/strong&gt; in Java have been widely discussed. Basically, it comes down to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread safety&lt;/li&gt;
  &lt;li&gt;Absence of hidden side-effects&lt;/li&gt;
  &lt;li&gt;Ease of caching&lt;/li&gt;
  &lt;li&gt;Prevention of identity mutation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interesting question is: How do we represent immutable data in Java. There are mainly, three approaches:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Immutable classes (boilerplate code avoided via Java annotations)&lt;/li&gt;
  &lt;li&gt;Data records (available since Java 14)&lt;/li&gt;
  &lt;li&gt;Persistent hash maps&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;representing-data-with-immutable-classes&quot;&gt;Representing data with immutable classes&lt;/h2&gt;

&lt;p&gt;Immutable classes, have no methods and the members cannot be modified.&lt;/p&gt;

&lt;p&gt;Writing manually for each immutable class of our system the appropriate constructors, getters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashCode()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString()&lt;/code&gt; involves lot of boilerplate code. We could avoid the boilerplate code using a Java annotation like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@value&lt;/code&gt; annotation from &lt;a href=&quot;https://projectlombok.org/features/Value&quot;&gt;Project Lombok&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how we could represent the catalog data of our library management system using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@value&lt;/code&gt; annotation:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicationYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@value&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorByIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As an example, here is how we would instantiate data of a catalog with a single book: Watchmen.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we display in upper case the id of the first author of Watchmen like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;representing-data-with-records&quot;&gt;Representing data with records&lt;/h2&gt;

&lt;p&gt;Java language maintainers acknowledge the need to provide immutable data representation at the language level. Java 14 introduced the concept of a record that provides a first-class means for modelling data-only aggregates.&lt;/p&gt;

&lt;p&gt;Here is how our data model would look like with records:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicationYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CatalogData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorByIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Records are instantiated like immutable classes:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CatalogData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we display in upper case the id of the first author of Watchmen like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read more about Java records in this &lt;a href=&quot;https://blogs.oracle.com/javamagazine/records-come-to-java&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;persistent-string-maps&quot;&gt;Persistent string maps&lt;/h2&gt;

&lt;p&gt;Now comes the esoteric part that might cause you to feel uncomfortable as a Java developer.&lt;/p&gt;

&lt;p&gt;Instead of representing data with a layout that is statically defined in our code base, we could represent data with hash maps without specifying data layout at all.&lt;/p&gt;

&lt;p&gt;The advantage of this approach is that it makes data access and data manipulation flexible. Of course, it has to trade off &lt;strong&gt;flexibility&lt;/strong&gt; for &lt;strong&gt;type safety&lt;/strong&gt;. My purpose here is not to convince you that this is the way you should represent data in Java. My humble purpose is to suggest that a &lt;strong&gt;dynamic approach&lt;/strong&gt; to data is applicable in Java. Hopefully, it will motivate Java experts to explore if it makes sense to promote the dynamic data approach in Java.&lt;/p&gt;

&lt;p&gt;Let’s see first how we could instantiate our catalog data using native Java immutable string maps and lists:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The limitation of Java immutable maps is that we cannot update them efficiently. Creating a new version of the catalog data (e.g. updating the publication year of a book) would require to copy the whole map. Fortunately, there is this computer science thing called &lt;strong&gt;persistent data structures&lt;/strong&gt; that makes it possible to update immutable data structures &lt;strong&gt;efficiently&lt;/strong&gt; both in terms of memory and computation.&lt;/p&gt;

&lt;p&gt;There is a Java library named &lt;a href=&quot;https://github.com/GlenKPeterson/Paguro&quot;&gt;Paguro&lt;/a&gt; that provides efficient persistent data structures in Java.&lt;/p&gt;

&lt;p&gt;Instantiating our catalog with Paguro is a bit more verbose as we have to wrap key-values pairs in maps with tuples:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Watchmen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;publicationYear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1987&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alan Moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dave Gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bookIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchmen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alan-moore&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alanM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dave-gibbons&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daveG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;tup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorsById&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorsById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With string maps (both Paguro and Java), we cannot easily access nested data in our catalog:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127j&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// throws an exception&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem is that inside the catalog map, we have values of different types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;items&lt;/code&gt; is a string&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;booksByIsbn&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorByIds&lt;/code&gt; are maps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to be able to access the value associated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;booksByIsbn&lt;/code&gt; as a map, we have to do a static cast:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;booksByIsbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns a map&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we have to do it multiple times until we get to the value we are interested in:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I told you it would be esoteric!&lt;/p&gt;

&lt;p&gt;We could alleviate a bit the awkwardness of this approach by adding getter methods in our map for each type of value (similar to Apache Wicket &lt;a href=&quot;https://ci.apache.org/projects/wicket/apidocs/9.x/org/apache/wicket/util/value/ValueMap.html&quot;&gt;value maps&lt;/a&gt;). Then it would look a bit less awkward to access a value in a nested map, as the casting is hidden in the getter:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN-MOORE&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could move one step further and implement nested value getters (similar to &lt;a href=&quot;https://clojuredocs.org/clojure.core/get-in&quot;&gt;get-in&lt;/a&gt; in Clojure or &lt;a href=&quot;https://lodash.com/docs/4.17.15#get&quot;&gt;Lodash get&lt;/a&gt; in JavaScript). Then, we could access a nested value in a very concise way:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;catalog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;booksByIsbn&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&quot;978-1779501127&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&quot;authorIds&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &quot;ALAN_MOORE&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me conclude this article by mentioning &lt;strong&gt;potential benefits&lt;/strong&gt; that the dynamic data approach would provide if it is adopted by the Java community.&lt;/p&gt;

&lt;h1 id=&quot;potential-benefits-of-a-dynamic-data-approach&quot;&gt;Potential benefits of a dynamic data approach&lt;/h1&gt;
&lt;h2 id=&quot;weak-dependency-between-code-and-data&quot;&gt;Weak dependency between code and data&lt;/h2&gt;

&lt;p&gt;When a piece of code manipulates data represented in a generic way it doesn’t have to include the class that defines the layout of the data. The only information that is required is the name of the fields to be manipulated.&lt;/p&gt;

&lt;h2 id=&quot;information-path&quot;&gt;Information path&lt;/h2&gt;

&lt;p&gt;When we represent the whole data of the system in a generic way, each piece of information of the system is accessible via its information bath: A list of keys and indexes that describe the path to the information.&lt;/p&gt;

&lt;h2 id=&quot;serialization-without-reflection&quot;&gt;Serialization without reflection&lt;/h2&gt;

&lt;p&gt;When data is represented with hash maps and lists, we can serialize it (e.g. JSON serialization) in a natural way without using reflection or any custom annotation.&lt;/p&gt;

&lt;h2 id=&quot;manipulate-data-with-general-purpose-functions&quot;&gt;Manipulate data with general-purpose functions&lt;/h2&gt;

&lt;p&gt;When data is represented in a generic way, we are free to manipulate it with a rich set of general-purpose functions. Let me mention two quick examples:&lt;/p&gt;

&lt;h3 id=&quot;rename-keys&quot;&gt;Rename keys&lt;/h3&gt;

&lt;p&gt;Suppose we want to send book information over the wire with a slight modification: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title&lt;/code&gt; field should be renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bookTitle&lt;/code&gt;. In a non-dynamic approach to data, we would have to create another class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BookWithBookTitle&lt;/code&gt; (it would be hard to come up with a good name!).&lt;/p&gt;

&lt;p&gt;In a dynamic data approach, we could write a general purpose function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKey()&lt;/code&gt;. The cool thing is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKey()&lt;/code&gt; wouldn’t be coupled to book data. As a consequence, we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renameKey()&lt;/code&gt; to rename the field of author data.&lt;/p&gt;

&lt;h3 id=&quot;merge-data&quot;&gt;Merge data&lt;/h3&gt;

&lt;p&gt;Suppose, we’d like to enrich book information with data from Amazon and GoodReads. In a non-dynamic approach we’d probably need to create classes or records for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AmazonBookInfo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GoodReadsBookInfo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnrichedBookInfo&lt;/code&gt;. Anyway, we’d have to write custom code that merges information from Amazon and GoodReads.&lt;/p&gt;

&lt;p&gt;In a dynamic data approach, we could leverage a general purpose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; function that works on an arbitrary map.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This article suggested that it would be possible to apply the principles of Data-Oriented programming in Java.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code is &lt;strong&gt;separated&lt;/strong&gt; code from data&lt;/li&gt;
  &lt;li&gt;Data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Data access is &lt;strong&gt;flexible&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Principles #1 and #2 feel quite natural to Java developers (especially with the addition of Java records). However, Principle #3 feels much less natural.&lt;/p&gt;

&lt;p&gt;I hope that by having illustrated the benefits of a dynamic data approach, I have motivated a bit the Java community. Now it’s time for Java experts to take it from there and discover (&lt;em&gt;hopefully in the near future&lt;/em&gt;) what is the best way to embrace &lt;strong&gt;Data-Oriented programming in Java&lt;/strong&gt;.&lt;/p&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker based in Israel. My passion is to make interesting things easy to understand.&quot;}</name></author><category term="java" /><category term="dop" /><category term="java" /><summary type="html">The principles of Data-Oriented programming</summary></entry><entry><title type="html">Structural sharing with 7 lines of JavaScript.</title><link href="/javascript/2021/02/26/structural-sharing-in-javascript.html" rel="alternate" type="text/html" title="Structural sharing with 7 lines of JavaScript." /><published>2021-02-26T02:03:52+00:00</published><updated>2021-02-26T02:03:52+00:00</updated><id>/javascript/2021/02/26/structural-sharing-in-javascript</id><content type="html" xml:base="/javascript/2021/02/26/structural-sharing-in-javascript.html">&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;When we build an application that embraces &lt;strong&gt;data immutability&lt;/strong&gt;, we handle changes in data by creating a new version of data instead of mutating data in place, without compromising on performance. There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Persistent_data_structure&quot;&gt;various techniques&lt;/a&gt; to achieve data immutability in an efficient manner.&lt;/p&gt;

&lt;p&gt;JavaScript data manipulation libraries like &lt;a href=&quot;https://ramdajs.com/&quot;&gt;Ramda&lt;/a&gt; and &lt;a href=&quot;{ % post_url  2020-11-26-lodash-fp %}&quot;&gt;Lodash FP&lt;/a&gt; provide an interesting implementation of structural sharing via a technique called &lt;a href=&quot;https://en.wikipedia.org/wiki/Persistent_data_structure#Path_copying&quot;&gt;path copying&lt;/a&gt;. The cool thing with path copying is that it works with &lt;strong&gt;native JavaScript objects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After reading this article, you will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;😄  Be part of the few &lt;strong&gt;lucky JavaScript developers&lt;/strong&gt; that clearly understand what is structural sharing&lt;/li&gt;
  &lt;li&gt;💻  &lt;strong&gt;Implement&lt;/strong&gt; structural sharing in a few lines of JavaScript code&lt;/li&gt;
  &lt;li&gt;⚠️ Be aware of the &lt;strong&gt;limitation&lt;/strong&gt; of path copying&lt;/li&gt;
  &lt;li&gt;🤗  Be &lt;strong&gt;motivated&lt;/strong&gt; to read my book about &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remark: This article assumes that you are already aware of the benefits of data immutability.&lt;/p&gt;

&lt;h1 id=&quot;what-is-structural-sharing&quot;&gt;What is structural sharing?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Structural sharing&lt;/strong&gt; provides an efficient way to share data between multiple versions of it, instead of copying the whole data.&lt;/p&gt;

&lt;p&gt;It’s kind of similar to the way &lt;strong&gt;git&lt;/strong&gt; manages multiple versions of your source code: git doesn’t copy all the files on each commit. Instead, the files that are not changed by a commit are shared with previous commits.&lt;/p&gt;

&lt;p&gt;The same strategy could be applied with data. Let’s take as an example a map that represents the data of a library in a library management system. In this map, we have 4 fields:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;: a string for the name of the library&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;address&lt;/code&gt;: a string for the address of the library&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catalog&lt;/code&gt;: a map with the book information&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;: a map for the user information&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of a tiny library, with two users and a single book:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var libraryData = {
  &quot;name&quot;: &quot;The smallest library on earth&quot;,
  &quot;address&quot;: &quot;Here and now&quot;,
  &quot;users&quot;: [
    {&quot;username&quot;: &quot;user-1&quot;,
     &quot;password&quot;: &quot;pass-1&quot;}, 
    {&quot;username&quot;: &quot;user-2&quot;,
     &quot;password&quot;: &quot;pass-2&quot;}
  ],
  &quot;catalog&quot;: {
    &quot;books&quot;: [
      {
        &quot;title&quot;: &quot;Watchmen&quot;,
        &quot;publicationYear&quot;: 1986,
        &quot;authors&quot;: [
          {
            &quot;firstName&quot;: &quot;Alan&quot;,
            &quot;lastName&quot;: &quot;Moore&quot;
          },
          {
            &quot;firstName&quot;: &quot;Dave&quot;,
            &quot;lastName&quot;: &quot;Gibbons&quot;
          }
        ]
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose we want to create a version of the library where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;address&lt;/code&gt; field is modified. We can achieve that by &lt;strong&gt;shallow copying&lt;/strong&gt; the original library and modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;address&lt;/code&gt; field, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.assign()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function set(obj, key, val) {
  var copy = Object.assign({}, obj);
  copy[key] = val;
  return copy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fields whose values are strings, it works fine because &lt;strong&gt;strings are immutable&lt;/strong&gt; in JavaScript. But what about fields whose values are maps? We don’t want changes made on one of version of the map to be reflected on the other versions of the map!&lt;/p&gt;

&lt;p&gt;Like in git, we don’t want changes in a commit to affect files in a previous commit!&lt;/p&gt;

&lt;p&gt;We could solve this challenge in a very naive way by &lt;strong&gt;deep copying&lt;/strong&gt; the whole map when creating a new version of it. But of course, it would have a negative impact on the performance, both in terms of memory and CPU.&lt;/p&gt;

&lt;p&gt;Another approach is to &lt;strong&gt;prevent data from being changed&lt;/strong&gt;. When data is immutable, we don’t need to protect ourselves from the threat we just mentioned. It is safe to do a shallow copy of the data because immutable data never changes.&lt;/p&gt;

&lt;p&gt;Data immutability could be guaranteed either by convention (and code reviews) or by the program itself. For example, JavaScript provides a way to prevent data from being changed, via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.freeze()&lt;/code&gt;. Here is an implementation of a deep freeze, from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function deepFreeze(object) {
  const propNames = Object.getOwnPropertyNames(object);
  // Freeze properties before freezing self
  for (const name of propNames) {
    const value = object[name];
    if (value &amp;amp;&amp;amp; typeof value === &quot;object&quot;) {
      deepFreeze(value);
    }
  }
  return Object.freeze(object);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s the essence of structural sharing:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure data is &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Create new version of data via &lt;strong&gt;shallow copying&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a code snippet for a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set()&lt;/code&gt; that implements structural sharing when the change occurs at the &lt;strong&gt;root of the map&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function shallowCopy(o) {
  if(Array.isArray(o)) {
    return Object.assign([], o);
  }
  return Object.assign({}, o);
}

function set(o, k, v) {
  var copy = shallowCopy(o);
  copy[k] = v;
  return copy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a new version of data with a change at the root of a map is easy. Now, we are going to show how to handle changes at any nesting level in a map.&lt;/p&gt;

&lt;h1 id=&quot;implementation-of-path-copying-in-javascript&quot;&gt;Implementation of path copying in JavaScript&lt;/h1&gt;

&lt;p&gt;Suppose we want to update the password of a user and see how to apply &lt;strong&gt;recursively&lt;/strong&gt; our structural sharing strategy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Shallow copy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;address&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catalog&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use a modified version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;:
    &lt;ol&gt;
      &lt;li&gt;Shallow copy all users except &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Use a modified version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user-1&lt;/code&gt;:
        &lt;ol&gt;
          &lt;li&gt;Shallow copy all the fields except &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/change-password.png&quot; alt=&quot;change-password&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code for it would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var nextUser = Object.assign({}, libraryData.users[1]);
nextUser.password = &quot;new-pass-2&quot;;
var nextUsers = Object.assign([], libraryData.users);
nextUsers[1] = nextUser;
var nextLibraryData = Object.assign({}, libraryData);
nextLibraryData.users = nextUsers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now, let’s generalize this approach with a recursive functions. As we promised in the article title, here is an implementation of structural sharing in &lt;strong&gt;7 lines of JavaScript code&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;function setIn(m, [k, ...restOfPath], v) {
  var modifiedNode = v;
  if (restOfPath.length &amp;gt; 0) {
    modifiedNode = setIn(m[k], restOfPath, v);
  }
  return set(m, k, modifiedNode);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is how we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setIn&lt;/code&gt; to modify the password of a user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;var libraryDataV1 = setIn(libraryData, [&quot;users&quot;, 1, &quot;password&quot;], &quot;new-pass-2&quot;);
libraryDataV1.users[1].password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, the previous version is left unchanged:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;libraryData.users[1].password
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;efficiency-of-structural-sharing&quot;&gt;Efficiency of structural sharing&lt;/h1&gt;

&lt;p&gt;Path copying is &lt;strong&gt;usually efficient&lt;/strong&gt; – both in terms of memory and computation – because most of the nodes in a nested map are copied by reference (shallow copy).&lt;/p&gt;

&lt;p&gt;For example, the catalog map (that could be a huge object) is shared between the original library data and the new version of library data. They both use the same reference.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-eval-js&quot;&gt;libraryDataV1.catalog === libraryData.catalog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Path copying works fine with deeply nested data where at each nesting level we don’t have too many elements. When we have &lt;strong&gt;many elements at some level&lt;/strong&gt;, shallow copying might be an issue. Suppose we have a million user in our system, copying a million references each time we update the password of a user is not acceptable.&lt;/p&gt;

&lt;p&gt;The same issue occurs with git if you have a folder with too many files.&lt;/p&gt;

&lt;p&gt;In my book about &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-Oriented programming&lt;/a&gt;, I discuss techniques to overcome this limitation.&lt;/p&gt;

&lt;p&gt;The book illustrate in details the benefits of building a software system based upon data immutability.&lt;/p&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker based in Israel. My passion is to make interesting things easy to understand.&quot;}</name></author><category term="javascript" /><category term="dop" /><category term="javascript" /><summary type="html">Motivation</summary></entry><entry><title type="html">Graph visualization playground with Cytoscape.</title><link href="/visualization/2021/02/16/graph-playground-cytoscape.html" rel="alternate" type="text/html" title="Graph visualization playground with Cytoscape." /><published>2021-02-16T14:11:22+00:00</published><updated>2021-02-16T14:11:22+00:00</updated><id>/visualization/2021/02/16/graph-playground-cytoscape</id><content type="html" xml:base="/visualization/2021/02/16/graph-playground-cytoscape.html">&lt;p&gt;Playground for visualizing graphs using &lt;a href=&quot;https://js.cytoscape.org/&quot;&gt;Cytoscape.js&lt;/a&gt; in Clojure.&lt;/p&gt;

&lt;p&gt;We define the default graph options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(def ^:dynamic *default-graph-options* 
  {:style [{:selector &quot;node&quot;
  :style {:background-color &quot;#666&quot;
        :label &quot;data(label)&quot;}}
    {:selector &quot;edge&quot;
      :style {&quot;width&quot; 2
        :line-color &quot;#ccc&quot;
        :target-arrow-color &quot;#ccc&quot;
        :curve-style &quot;bezier&quot;
        :target-arrow-shape &quot;triangle&quot;
        :label &quot;data(label)&quot;}}]
  :layout {:name &quot;circle&quot;}
  :userZoomingEnabled false
  :userPanningEnabled false
  :boxSelectionEnabled false}) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A function that renders the graph specified by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elements&lt;/code&gt; on the container whose id is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container-id&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(defn cytoscape-clj [elements container-id]
  (js/cytoscape
   (clj-&amp;gt;js (merge *default-graph-options*
                   {:container (js/document.getElementById container-id)
                    :elements elements})))
  nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s render a graph with some nodes and edges:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt; (def elements [{:data {:id &quot;a&quot;}}
               {:data {:id &quot;b&quot;}}
               {:data {:id &quot;c&quot;}}
               {:data {:id &quot;d&quot;}}
               {:data {:id &quot;e&quot;}}
               {:data {:id &quot;ab&quot; :source &quot;a&quot; :target &quot;b&quot;}}
               {:data {:id &quot;ad&quot; :source &quot;a&quot; :target &quot;d&quot;}}
               {:data {:id &quot;be&quot; :source &quot;b&quot; :target &quot;e&quot;}}
               {:data {:id &quot;cb&quot; :source &quot;c&quot; :target &quot;b&quot;}}
               {:data {:id &quot;de&quot; :source &quot;d&quot; :target &quot;e&quot;}}])
 (cytoscape-clj elements &quot;graph-2&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&quot;graph-2&quot; style=&quot;width: 100%; height: 200px; background-color: white;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Now we write functions that create edges and nodes for a fully-connected graph:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(defn edge [a b] {:data {:source a :target b}})
(defn connect-all [ids]
  (for [a ids
        b ids
        :when (&amp;lt; a b)]
    (edge a b)))

(defn nodes [ids]
  (for [id ids]
    {:data {:id id}}))

(defn elements [ids]
  (concat (nodes ids)
          (connect-all ids)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We render a fully-connected directed graph with 6 nodes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(cytoscape-clj (elements (range 6)) &quot;graph-3&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&quot;graph-3&quot; style=&quot;width: 100%; height: 200px; background-color: white;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;We render a fully-connected undirected graph with 6 nodes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse&quot;&gt;(binding [*default-graph-options* (assoc-in *default-graph-options*
            [:style 1 :style :target-arrow-shape] nil)]
            (cytoscape-clj (elements (range 6)) &quot;graph-4&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&quot;graph-4&quot; style=&quot;width: 100%; height: 200px; background-color: white;&quot;&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.18.0/cytoscape.min.js&quot;&gt;
&lt;/script&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker based in Israel. My passion is to make interesting things easy to understand.&quot;}</name></author><category term="visualization" /><category term="visualization" /><category term="clojure" /><category term="graph" /><summary type="html">Playground for visualizing graphs using Cytoscape.js in Clojure.</summary></entry><entry><title type="html">Distinction between three data related programming paradigms.</title><link href="/visualization/2021/02/16/data-related-paradigms.html" rel="alternate" type="text/html" title="Distinction between three data related programming paradigms." /><published>2021-02-16T14:11:22+00:00</published><updated>2021-02-16T14:11:22+00:00</updated><id>/visualization/2021/02/16/data-related-paradigms</id><content type="html" xml:base="/visualization/2021/02/16/data-related-paradigms.html">&lt;p&gt;&lt;strong&gt;Data-oriented programming&lt;/strong&gt; is not a new concept. It is a paradigm that is applied by developers from different programming languages in order to reduce the complexity of the systems they build.&lt;/p&gt;

&lt;p&gt;The purpose of my book &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7&quot;&gt;Data-oriented programming&lt;/a&gt; is to explore the principles underlying this paradigm and to illustrate their benefits in the context of a software system.&lt;/p&gt;

&lt;p&gt;The present article describes the distinction between &lt;strong&gt;Data-oriented programming&lt;/strong&gt; and two other programming paradigms whose name contain the term &lt;em&gt;data&lt;/em&gt;: &lt;strong&gt;Data-oriented design&lt;/strong&gt; and &lt;strong&gt;Data-driven programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each paradigm has a its own objective and pursues it by focusing on a different aspect of data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/data-love.jpg&quot; alt=&quot;data&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things. (&lt;em&gt;Phil Karlton&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;data-oriented-design&quot;&gt;Data-oriented design&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Data-oriented design&lt;/strong&gt; is a program optimization approach motivated by efficient usage of the CPU cache, used mostly in video game development.&lt;/p&gt;

&lt;p&gt;The approach is to focus on the &lt;strong&gt;data layout&lt;/strong&gt;, separating and sorting fields according to when they are needed, and to think about transformations of data.&lt;/p&gt;

&lt;p&gt;In this context, what’s important is how the data &lt;strong&gt;resides in memory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The objective of this paradigm is to &lt;strong&gt;improve the performance&lt;/strong&gt; of the system.&lt;/p&gt;

&lt;h2 id=&quot;data-driven-programming&quot;&gt;Data-driven programming&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Data-driven programming&lt;/strong&gt; is the idea that you create &lt;strong&gt;domain specific languages&lt;/strong&gt; (DSLs) which are made out of &lt;strong&gt;descriptive data&lt;/strong&gt;. It is a branch of declarative programming.&lt;/p&gt;

&lt;p&gt;In this context, what’s important is to describe the &lt;strong&gt;behaviour of a program&lt;/strong&gt; in terms of data.&lt;/p&gt;

&lt;p&gt;The objective of this paradigm is to &lt;strong&gt;increase code clarity&lt;/strong&gt; and to &lt;strong&gt;reduce the risk of bugs&lt;/strong&gt; related to mistakes in the implementation of the expected behaviour of the program.&lt;/p&gt;

&lt;h2 id=&quot;data-oriented-programming&quot;&gt;Data-oriented programming&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Data-oriented programming&lt;/strong&gt; is a paradigm that treats data of the system as a &lt;strong&gt;first-class citizen&lt;/strong&gt;. Data is represented by &lt;strong&gt;generic immutable data structures&lt;/strong&gt; (like maps and vectors) that are manipulated by &lt;strong&gt;general purpose functions&lt;/strong&gt; (like map, filter, select, group, sort …).&lt;/p&gt;

&lt;p&gt;In this context, what’s important is the &lt;strong&gt;representation of data&lt;/strong&gt; by the program.&lt;/p&gt;

&lt;p&gt;The objective of this paradigm is to &lt;strong&gt;reduce the complexity&lt;/strong&gt; of the system.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Before we conclude, I’d like to mention that there is a draft &lt;a href=&quot;https://en.wikipedia.org/wiki/Draft:Data-oriented_programming&quot;&gt;Wikipedia article&lt;/a&gt; about Data-Oriented programming. You are welcome to contribute to the article.&lt;/p&gt;

&lt;p&gt;We saw that the three data-related  paradigms have different objectives and each of them pursues its objective by focusing on a different aspect of data inside a program.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Paradigm&lt;/th&gt;
      &lt;th&gt;Objective&lt;/th&gt;
      &lt;th&gt;Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Data-oriented design&lt;/td&gt;
      &lt;td&gt;Increase performance&lt;/td&gt;
      &lt;td&gt;Data layout&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data-driven programming&lt;/td&gt;
      &lt;td&gt;Increase clarity&lt;/td&gt;
      &lt;td&gt;Behaviour described by data&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data-oriented programming&lt;/td&gt;
      &lt;td&gt;Reduce complexity&lt;/td&gt;
      &lt;td&gt;Data representation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>{&quot;image&quot;=&gt;&quot;authorimage.jpg&quot;, &quot;greetings&quot;=&gt;&quot;Hi there! My name is Yehonathan Sharvit. I'm a software developer, author and speaker based in Israel. My passion is to make interesting things easy to understand.&quot;}</name></author><category term="visualization" /><category term="dop" /><category term="theory" /><summary type="html">Data-oriented programming is not a new concept. It is a paradigm that is applied by developers from different programming languages in order to reduce the complexity of the systems they build.</summary></entry><entry><title type="html">A new way of blogging about Python</title><link href="/python/2021/02/07/blog-python.html" rel="alternate" type="text/html" title="A new way of blogging about Python" /><published>2021-02-07T02:34:28+00:00</published><updated>2021-02-07T02:34:28+00:00</updated><id>/python/2021/02/07/blog-python</id><content type="html" xml:base="/python/2021/02/07/blog-python.html">&lt;p&gt;This blog post is about to show a new way of blogging about Python.&lt;/p&gt;

&lt;p&gt;Look at a typical blog post or tutorial about any programming language: The article usually presents a couple of code snippets. As I see it, there are two pains with code snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They contain the input and the output but not the &lt;strong&gt;actual evaluation&lt;/strong&gt; of the input&lt;/li&gt;
  &lt;li&gt;It’s impossible for the reader to &lt;strong&gt;modify&lt;/strong&gt; the output&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;the-forgotten-dream&quot;&gt;The forgotten dream&lt;/h1&gt;

&lt;p&gt;A long time ago, all the developers had a common &lt;strong&gt;dream&lt;/strong&gt;. The dream was about interactivity, instant feedback, evaluation…&lt;/p&gt;

&lt;p&gt;But we put this dream aside - because the browser understands only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And after a while, we even forgot that we ever had this dream.&lt;/p&gt;

&lt;p&gt;Still, there are some people that didn’t forget this dream, like Alan Kay:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question: Well, look at Wikipedia — it’s a tremendous collaboration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alan Kay: It is, but go to the article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Logo_(programming_language)&quot;&gt;Logo&lt;/a&gt;, can you write and execute Logo programs? Are there examples? No. The Wikipedia people didn’t even imagine that, in spite of the fact that they’re on a computer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442?pgno=2&quot; target=&quot;_blank&quot;&gt;full interview of Alan Kay&lt;/a&gt;. (Thanks &lt;a href=&quot;https://twitter.com/fasihsignal&quot;&gt;@fasihsignal&lt;/a&gt; for bringing this quote to our awareness.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dream.jpg&quot; alt=&quot;dream&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-klipse-plugin&quot;&gt;The Klipse plugin&lt;/h1&gt;

&lt;p&gt;The Klipse plugin is a small step toward our forgotten dream: it is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; tag that transforms static code snippets of an html page into live and interactive snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Live&lt;/strong&gt;: The code is executed in your browser&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interactive&lt;/strong&gt;: You can modify the code and it is evaluated as you type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt; is written in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClojureScript&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;The following languages are supported by &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse&lt;/a&gt;: Clojure, Ruby, JavaScript, Ocaml, Scheme, Jsx, Brainfuck, Prolog, C++ and Lua.&lt;/p&gt;

&lt;p&gt;In this article, we are going to demonstrate interactive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; code snippets evaluated by 
&lt;a href=&quot;https://skulpt.org/&quot;&gt;Skulpt&lt;/a&gt;,  an &lt;strong&gt;entirely in-browser&lt;/strong&gt; implementation of Python.&lt;/p&gt;

&lt;h1 id=&quot;klipsify-an-python-code-snippet&quot;&gt;Klipsify an Python code snippet&lt;/h1&gt;

&lt;p&gt;Let’s have on this page a small static code snippet:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(This blog is written with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kramdown&lt;/code&gt; plugin helps a lot in beautifying the code snippets.)&lt;/p&gt;

&lt;p&gt;And now, we are going to &lt;strong&gt;klipsify&lt;/strong&gt; this code snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-python&quot;&gt;def hello():
  print(&quot;Hello World!&quot;)
  
hello()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to edit the code above: it’s interactive =&amp;gt; it evaluates as you type.&lt;/p&gt;

&lt;p&gt;All I had to do in order to &lt;strong&gt;klipsify&lt;/strong&gt; my code snippet, was to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;language-klipse-python&lt;/code&gt; class (configurable) to the appropriate html element.&lt;/p&gt;

&lt;p&gt;See it by yourself: here is the source of this page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;And now, we are going to &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;klipsify&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; this code snippet:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;language-klipse-python&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
def foo:
  print(&quot;Hello World!&quot;)
  
foo()
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;live-demo&quot;&gt;Live demo&lt;/h1&gt;

&lt;p&gt;Before dealing about integration of the Klipse plugin on a web page, let’s enjoy another Klipse snippet implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factorial&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-klipse-python&quot;&gt;def factorial(n):
  if n == 0:
    return 1
  return n*factorial(n-1)

print(factorial(5))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead! modify the code snippet above, and it will evaluate as you type…&lt;/p&gt;

&lt;h1 id=&quot;evaluating-a-gist&quot;&gt;Evaluating a gist&lt;/h1&gt;

&lt;p&gt;We can also evaluate code from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, we could evaluate &lt;a href=&quot;https://gist.github.com/viebel/9ab6b853c78c5e651f844ea2568c44a9&quot;&gt;this gist&lt;/a&gt; that tells a turtle to draw a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle&quot;&gt;Sierpiński triangle&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;
&lt;div class=&quot;language-klipse-python&quot; data-gist-id=&quot;viebel/9ab6b853c78c5e651f844ea2568c44a9&quot;&gt;&lt;/div&gt;
&lt;/pre&gt;

&lt;p&gt;Again, feel free to modify the code…&lt;/p&gt;

&lt;h1 id=&quot;integration&quot;&gt;Integration&lt;/h1&gt;

&lt;p&gt;All you need to do in order to integrate the Klipse plugin to your blog (or any other web page), is to add this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; tag to your web page:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://app.klipse.tech/css/codemirror.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;klipse_settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;selector_eval_python_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.language-klipse-python&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://app.klipse.tech/plugin_prod/js/klipse_plugin.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By the way, this is exactly what we did on the page that you are currently reading.&lt;/p&gt;

&lt;h1 id=&quot;other-languages&quot;&gt;Other languages&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; is designed as a platform that could support any language that has a client-side evaluator, by writing modules to the Klipse plugin. Currently, in addition to Python, there are modules available for the following languages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Javascript: &lt;a href=&quot;http://blog.klipse.tech/javascript/2016/06/20/blog-javascript.html&quot;&gt;A new way of blogging about javascript&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clojure[script]: &lt;a href=&quot;http://blog.klipse.tech/clojure/2016/06/07/klipse-plugin-tuto.html&quot;&gt;How to klipsify a clojure[script] blog post&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brainfuck: &lt;a href=&quot;http://blog.klipse.tech/brainfuck/2016/12/17/brainfuck.html&quot;&gt;Brainfuck for dummies&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scheme: &lt;a href=&quot;http://blog.klipse.tech/scheme/2016/09/11/scheme-tutorial-1.html&quot;&gt;Interactive overview of Scheme’s semantics&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lua: &lt;a href=&quot;http://blog.klipse.tech/lua/2017/03/19/blog-lua.html&quot;&gt;A new way of blogging about Lua&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Go ahead!&lt;/p&gt;

&lt;p&gt;Write your own blog post with interactive snippets in your preferred language.&lt;/p&gt;

&lt;p&gt;It’s super simple to integrate the &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse plugin&lt;/a&gt; on a blog post: check the instructions on &lt;a href=&quot;https://github.com/viebel/klipse&quot;&gt;Klipse github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can get some inspiration by &lt;a href=&quot;https://github.com/viebel/klipse#community&quot;&gt;the work of the Klipse community&lt;/a&gt;…&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="python" /><category term="klipse" /><category term="python" /><summary type="html">This blog post is about to show a new way of blogging about Python.</summary></entry><entry><title type="html">Imagine there’s no objects</title><link href="/databook/2021/02/07/imagine.html" rel="alternate" type="text/html" title="Imagine there’s no objects" /><published>2021-02-07T02:34:28+00:00</published><updated>2021-02-07T02:34:28+00:00</updated><id>/databook/2021/02/07/imagine</id><content type="html" xml:base="/databook/2021/02/07/imagine.html">&lt;p&gt;Here is an adaptation of &lt;em&gt;Imagine&lt;/em&gt;, by John Lennon to the context of &lt;strong&gt;Data-Oriented programming&lt;/strong&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/EDRRbuWuUbQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Imagine there’s no &lt;em&gt;objects&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s easy if you try&lt;/p&gt;

&lt;p&gt;No &lt;em&gt;classes&lt;/em&gt; below us&lt;/p&gt;

&lt;p&gt;Above us only &lt;em&gt;information&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Imagine all the entities being only &lt;em&gt;data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Imagine there’s no &lt;em&gt;mutation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It isn’t hard to do&lt;/p&gt;

&lt;p&gt;Nothing to protect with a &lt;em&gt;mutex&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And no &lt;em&gt;deadlock&lt;/em&gt; too&lt;/p&gt;

&lt;p&gt;Imagine all the entities being only &lt;em&gt;data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You may say I’m a dreamer&lt;/p&gt;

&lt;p&gt;But I’m not the only one&lt;/p&gt;

&lt;p&gt;I hope some day &lt;em&gt;OO&lt;/em&gt; will join us&lt;/p&gt;

&lt;p&gt;And the world will be as one&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Imagine no &lt;em&gt;code&lt;/em&gt; is &lt;em&gt;locked&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I wonder if you can&lt;/p&gt;

&lt;p&gt;No need for &lt;em&gt;methods&lt;/em&gt; and &lt;em&gt;inheritance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A brotherhood of input and output&lt;/p&gt;

&lt;p&gt;Imagine all the code being &lt;em&gt;pure functions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You may say I’m a dreamer&lt;/p&gt;

&lt;p&gt;But I’m not the only one&lt;/p&gt;

&lt;p&gt;I hope some day &lt;em&gt;OO&lt;/em&gt; will join us&lt;/p&gt;

&lt;p&gt;And the world will be as one&lt;/p&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="databook" /><category term="dop" /><summary type="html">Here is an adaptation of Imagine, by John Lennon to the context of Data-Oriented programming.</summary></entry><entry><title type="html">Computing the data diff between two hash maps</title><link href="/databook/2020/12/20/data-diff.html" rel="alternate" type="text/html" title="Computing the data diff between two hash maps" /><published>2020-12-20T00:15:29+00:00</published><updated>2020-12-20T00:15:29+00:00</updated><id>/databook/2020/12/20/data-diff</id><content type="html" xml:base="/databook/2020/12/20/data-diff.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our &lt;a href=&quot;/databook/2020/12/18/occ-do-git.html&quot;&gt;implementation&lt;/a&gt; of the 3-way merge resolution algorithm, where the system state is represented as a nested hash map, relies on the ability two compare two versions of the system state via the &lt;code&gt;DataDiff&lt;/code&gt; class that implements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The computation of a &lt;strong&gt;semantic diff&lt;/strong&gt; between two hash maps (a.k.a data diff)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The detection of &lt;strong&gt;empty intersection&lt;/strong&gt; between two hash maps&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internals of the &lt;code&gt;DataDiff&lt;/code&gt; class are now revealed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-data-diff-algorithm&quot;&gt;The data diff algorithm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Computing a &lt;strong&gt;semantic diff&lt;/strong&gt; between two hash maps is the most challenging part of the reconciliation algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But at the end of the day, it deals only with &lt;strong&gt;data manipulation&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s define exactly what we mean by a semantic diff between two hash maps &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The semantic diff between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is a hash map &lt;code&gt;d&lt;/code&gt; that contains all the nested fields of &lt;code&gt;b&lt;/code&gt; whose value differ from their value in &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;DataDiff&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;tok-nx&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-mf&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;tok-nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-mf&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;tok-nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-mf&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;tok-p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;tok-nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-mf&quot;&gt;4&lt;/span&gt;
        &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;should return&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;tok-nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;tok-nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;tok-o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;tok-mf&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;tok-p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our implementation uses &lt;strong&gt;immutable functions&lt;/strong&gt; from &lt;a href=&quot;/javascript/2020/11/26/lodash-fp.html&quot;&gt;Lodash&lt;/a&gt;. By default, Lodash functions are not immutable. In order to use a immutable version of the functions, we need to use Lodash FP module (Functional Programming), as it is explained in the Lodash FP guide.&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;. With this &lt;a href=&quot;#lodash-config&quot;&gt;piece of code&lt;/a&gt; the signature of the immutable functions is exactly the same as the mutable functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lodash-config&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;_ = fp.convert({
    &amp;quot;cap&amp;quot;: false,
    &amp;quot;curry&amp;quot;: false,
    &amp;quot;fixed&amp;quot;: false,
    &amp;quot;immutable&amp;quot;: true,
    &amp;quot;rearg&amp;quot;: false
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And now to the implementation! The core of the code is inside &lt;code&gt;_.reduce()&lt;/code&gt; where we make the recursive call to &lt;code&gt;DataDiff.diff()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;class DataDiff {
    static diffObjects(data1, data2) {
        var emptyObject = _.isArray(data1) ? [] : {};
        if(data1 == data2) {
            return emptyObject;
        }
        var keys = _.union(_.keys(data1), _.keys(data2));
        return _.reduce(keys,
                        function (acc, k) {
                            var res = DataDiff.diff(_.get(data1, k),
                                                    _.get(data2, k));
                            if((_.isObject(res) &amp;amp;&amp;amp; _.isEmpty(res)) ||
                               (res == &amp;quot;data-diff:no-diff&amp;quot;)) {
                                return acc;
                            }
                            return _.set(acc, k, res);
                        },
                        emptyObject);
    }

    static diff(data1, data2) {
        if(_.isObject(data1) &amp;amp;&amp;amp; _.isObject(data2)) {
            return DataDiff.diffObjects(data1, data2);
        }
        if(data1 !== data2) {
            return data2;
        }
        return &amp;quot;data-diff:no-diff&amp;quot;;
    }
}

window.DataDiff = DataDiff&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;performance-of-calculating-semantic-diff&quot;&gt;Performance of calculating semantic diff&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the general case, calculating the semantic diff of two hash maps is not efficient as we have to go over all the leaves of both maps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But when the two maps are created via &lt;strong&gt;structural sharing&lt;/strong&gt; from the same map, the implementation in &lt;strong&gt;efficient&lt;/strong&gt; as most of the nodes are shared between the two hash maps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
In DO, the versions of the system state are always created via structural sharing: that&amp;#8217;s why the code in the conflict resolution phase is efficient.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;playing-with-data-diff&quot;&gt;Playing with data diff&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if you don&amp;#8217;t grasp all the details of the implementation, feel free to play with &lt;code&gt;DataDiff&lt;/code&gt; and see how it calculates the semantic diff between two hash maps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var data1 = {
    g: {
        c: 3
    },
    x: 2,
    y: {
        z: 1
    },
    w: [5]
}

var data2 = {
    g: {
        c: 3
    },
    x: 2,
    y: {
        z: 2
    },
    w: [4]
}

DataDiff.diff(data1, data2);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intersection-of-maps&quot;&gt;Intersection of maps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;DataDiff&lt;/code&gt; also provides a &lt;code&gt;DataDiff.isEmptyIntersection()&lt;/code&gt; that we used in the &lt;a href=&quot;/databook/2020/12/18/occ-do-git.html&quot;&gt;reconciliation algorithm&lt;/a&gt; to detect a conflict.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;DataDiff.leaves = function(obj, prefix = &amp;#39;&amp;#39;) {
    return _.reduce(obj,
                    function(acc, v, k) {
                        if (_.isObject(v)) {
                            return _.concat(acc,
                                            DataDiff.leaves(v,
                                                            prefix + k + &amp;quot;.&amp;quot;))
                        }
                        return _.concat(acc, [prefix + k]);
                    },
                    []);
}

DataDiff.isEmptyIntersection = function(delta1, delta2) {
    return _.isEmpty(_.intersection(DataDiff.leaves(delta1),
                                    DataDiff.leaves(delta2)));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to play with it also!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var diff1 = {
    g: {
        c: 3
    }
}

var diff2 = {
    g: {
        c: 4
    }
}

DataDiff.isEmptyIntersection(diff1, diff2);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;klipse-javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;var diff3 = {
    g: {
        c: 3
    }
}

var diff4 = {
    g: {
        d: 4
    }
}

DataDiff.isEmptyIntersection(diff3, diff4);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    This article is an excerpt from my &lt;a href=&quot;https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;utm_medium=affiliate&amp;utm_campaign=book_sharvit2_data_1_29_21&amp;a_aid=viebel&amp;a_bid=d5b546b7&quot;&gt; book &lt;/a&gt; about &lt;b&gt;Data-Oriented Programming&lt;/b&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    More excerpts are available on my &lt;a href=&quot;/data-oriented-programming-book.html&quot;&gt;blog&lt;/a&gt;.
  &lt;/p&gt;

  &lt;br&gt;
&lt;/div&gt;
&lt;script src='https://cdn.jsdelivr.net/g/lodash@4(lodash.min.js+lodash.fp.min.js)'&gt;&lt;/script&gt;
&lt;script&gt;
var fp = _.noConflict();
&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. &lt;a href=&quot;https://github.com/lodash/lodash/wiki/FP-Guide&quot; class=&quot;bare&quot;&gt;https://github.com/lodash/lodash/wiki/FP-Guide&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yehonathan Sharvit</name></author><category term="d" /><category term="dop" /><summary type="html">This article is an excerpt from my book about Data-Oriented Programming. More excerpts are available on my blog.</summary></entry></feed>